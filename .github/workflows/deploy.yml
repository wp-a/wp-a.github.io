# 工作流名称
name: Deploy Hexo Blog (Custom Script) # 部署 Hexo 博客 (自定义脚本)

on:
  push:
    branches:
      - main # <<< 确保这里是你的 Hexo 源码仓库的主分支，可能是 main 或 master

jobs:
  build_and_deploy: # 构建并部署作业
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境下运行

    steps:
      - name: Checkout repository # 检出仓库
        uses: actions/checkout@v4
        with:
          submodules: false # 禁用子模块检查，如果你的主题是子模块且需要，请改为 true

      - name: Setup Node.js # 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20' # <<< 建议使用主要版本，例如 '20' 或 '22'，通常比精确版本号更稳定
          # cache: 'npm' # 可选：缓存依赖以加快构建速度
          # cache-dependency-path: 'package-lock.json' # 如果使用 package-lock.json

      - name: Install Dependencies # 安装依赖
        run: npm install # <<< 如果你使用 Yarn，则使用 yarn install。这个步骤会安装 package.json 中列出的所有依赖，包括 hexo 和 hexo-deployer-git

      # !!! 新增步骤：给 hexo 可执行文件添加执行权限 !!!
      - name: Grant execute permission to hexo # 赋予 hexo 执行权限
        run: chmod +x ./node_modules/.bin/hexo # +x 表示添加执行权限

      - name: Clean and Generate Static Files # 清理并生成站点
        run: |
          # 使用 npx 来执行 hexo 命令，确保找到本地安装的 hexo 可执行文件
          npx hexo clean
          npx hexo generate

      - name: Configure Git for Deployment # 配置部署用的 Git 用户信息
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Deploy to GitHub Pages # 部署到 GitHub Pages
        env:
          GH_TOKEN: ${{ secrets.HEXO_DEPLOY }} # <<< 确保 Secret 名称正确 (HEXO_DEPLOY)
        run: |
          cd public/ # 进入 public 目录
          git init # 初始化新的 Git 仓库
          git add -A # 添加所有文件
          git commit -m "Deploy site via GitHub Actions" # 提交
          # 使用 HTTPS URL 和 token 进行认证，添加到 origin
          # 确保这里的用户名和仓库名是你的部署仓库 (wp-a/wp-a.github.io)
          git remote add origin https://github.com/wp-a/wp-a.github.io.git
          # 设置远程 origin 的 URL，包含 token 用于认证
          git remote set-url origin https://${{ secrets.GH_TOKEN }}@github.com/wp-a/wp-a.github.io.git
          # 强制推送到目标仓库的 main 分支
          git push origin HEAD:main -f # <<< 确保目标分支是 main 或 master

