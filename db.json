{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/transpancy.css","path":"css/transpancy.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/countup.js","path":"js/countup.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/hexo_githubcalendar.js","path":"js/hexo_githubcalendar.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/reward.js","path":"js/reward.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/1.webp","path":"img/1.webp","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/10year.webp","path":"img/10year.webp","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/123.JPG","path":"img/123.JPG","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/2","path":"img/2","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/2.webp","path":"img/2.webp","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/3000.webp","path":"img/3000.webp","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/README.md","path":"img/README.md","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/growen.webp","path":"img/growen.webp","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/head.gif","path":"img/head.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/head.png","path":"img/head.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/head.webp","path":"img/head.webp","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/css/critical.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1738050105021},{"_id":"source/_data/link.yml","hash":"efa1bd27fbb521ec546d63f2a0a78c7f73b355e8","modified":1738991436250},{"_id":"source/_data/creativity.yml","hash":"4f8319095596ce97fe94d1a3eb17d500706cd40f","modified":1739021054308},{"_id":"source/_data/reward.yml","hash":"b1af7565cfd0279c8ae9423f12862cdd38379b4b","modified":1738949192129},{"_id":"source/_posts/2day.md","hash":"fe92b0f4e89b94a24c6065349398f39e009321a4","modified":1738661889152},{"_id":"source/_posts/3day.md","hash":"f66478e77db89580e1fefe680648b8ab01ab3048","modified":1738661920403},{"_id":"source/_posts/4day.md","hash":"fe4aa34afc27c69105d830cddc15c378df1e36ba","modified":1738661935351},{"_id":"source/_posts/1day.md","hash":"eca7dc04e9450775e23e64bc03d34131fffabf59","modified":1738661907023},{"_id":"source/_posts/5day.md","hash":"331d52631b13c7678091972e2daff4f28aee10af","modified":1738661859674},{"_id":"source/_posts/6day.md","hash":"bc989b7aa9f14c6eb41095b0efa5c484bb8644e3","modified":1738662495729},{"_id":"source/_posts/7day.md","hash":"e1a98a7333d188fb12eef0e32c080f75e3dd8394","modified":1738854484873},{"_id":"source/_posts/8day.md","hash":"ca244dd14fc053e2fe4d9f50a0a12f5b7bc80072","modified":1738941319177},{"_id":"source/categories/index.md","hash":"d1c94d7237e5a4f992d43e0cc7769523d2972729","modified":1738949999948},{"_id":"source/_posts/9day.md","hash":"4de361bdbb601dbfa66d2968116f16d226231444","modified":1738944717944},{"_id":"source/about/index.md","hash":"33e032f104e3a92a966b599d39e0f5b91c1c836e","modified":1738949992048},{"_id":"source/_posts/STL.md","hash":"45369f5431c25a112df009a9b2ce988f4af92e96","modified":1738944934567},{"_id":"source/link/index.md","hash":"73cd4b4fccdcbd841389afc3b68916d54fc61227","modified":1738322179169},{"_id":"source/charts/index.md","hash":"2794786f9bbb3c1ffe0e4a31fa95bec9c8f47ddf","modified":1738946954065},{"_id":"source/_posts/哈希表.md","hash":"a842878ad0dbe35a38fb4265e8c6bd66ed8005fb","modified":1738653512573},{"_id":"source/messageboard/index.md","hash":"d804c6adcbc4c777d1626fbd31bf136b13d95a40","modified":1738132352547},{"_id":"source/statistics/index.md","hash":"e24d11fe628c6c3049a8f5ffaae8e90f80d1e753","modified":1737641167298},{"_id":"source/tags/index.md","hash":"9ec9406d5a1bc5b0b992f21eec62de4b5aea78b5","modified":1738135608861},{"_id":"themes/butterfly/README.md","hash":"f099cbbd6bf34ee3e55b609a7b3960cd634263d0","modified":1737543964043},{"_id":"themes/butterfly/_config.yml","hash":"2d62996528f786bd47d4157b330dab1ecdb23f14","modified":1737991461527},{"_id":"themes/butterfly/README_CN.md","hash":"324c8d65fff0107561cdb325743538ea0e7150f3","modified":1737543964122},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1737543963963},{"_id":"themes/butterfly/plugins.yml","hash":"952ae1fb19d366ef93e291692d36d2381f6cc398","modified":1737543964326},{"_id":"themes/butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1737543965285},{"_id":"themes/butterfly/layout/archive.pug","hash":"a8082c82f20b25c88cb30294ea7299af32e07b27","modified":1738948741045},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1737543964388},{"_id":"themes/butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1737543965348},{"_id":"themes/butterfly/layout/post.pug","hash":"5db49828a82622a7e4dddf395c6b88160958e5a6","modified":1738052268628},{"_id":"themes/butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1737543964782},{"_id":"themes/butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1737543964909},{"_id":"themes/butterfly/layout/page.pug","hash":"14d1a92b66d4616fd5ab0b1dd247c05af659aa24","modified":1738949668610},{"_id":"themes/butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1737543964970},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1737543965034},{"_id":"themes/butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1737543965520},{"_id":"themes/butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1737543964829},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1737543964656},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1737543964467},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1737543965096},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1737543964709},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1737543965662},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1737543964514},{"_id":"themes/butterfly/package.json","hash":"b0c9ec69583ca996004f33ec393bf10b4bd3c86c","modified":1737543964263},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1737543965159},{"_id":"themes/butterfly/source/css/index.styl","hash":"414a474e8e901ef85b6b5dfa9f3927e20c9c2ea3","modified":1738948825297},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1737543964588},{"_id":"themes/butterfly/source/css/transpancy.css","hash":"d2ef46dacf568faab40718b92f718a3663cbc427","modified":1739112781585},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1737543971227},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"edabdaffd4ee03b81a01da38f8b94659c47d5f5b","modified":1738052519065},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"0c085f0620967553b04c18672bc4912652cfe088","modified":1738048896753},{"_id":"themes/butterfly/source/css/var.styl","hash":"1d927577fb5eac0fff7b0ea386b20e70e411d4f1","modified":1738001636696},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"393d2720e0887a1a0e68206a6d37205549535dd4","modified":1737543965756},{"_id":"themes/butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1737543971305},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"7dbf86c92a81ed79dc9958005fe07094d5d34918","modified":1737543965866},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1737543971368},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"c588ea813c09bd12321e3e70bdbe1a21eb40f398","modified":1737543965914},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1737543971509},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1737543971447},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"7a1329d40caf93b80c5e7e90c01d3db6feb13728","modified":1737543971572},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1737543971698},{"_id":"themes/butterfly/source/js/countup.js","hash":"ddcbf0b3022b59b1f5c188a994b8d049b1230f74","modified":1738948499545},{"_id":"themes/butterfly/source/js/hexo_githubcalendar.js","hash":"e87bf9791ec6f5e8ea338b2f77f0980a2301fe17","modified":1738397973833},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1737543971636},{"_id":"themes/butterfly/source/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1737543976168},{"_id":"themes/butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1737543976309},{"_id":"themes/butterfly/source/js/reward.js","hash":"3165dd63d8efb8a050dece8a8b205cc249e3134c","modified":1739035544313},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1737543976239},{"_id":"themes/butterfly/source/img/2","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1737529859494},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"5a641907c0390f1b068b7cb3e2e141f4db43892f","modified":1737543965819},{"_id":"themes/butterfly/source/img/123.JPG","hash":"a05af6828774a231ee73dd504b941acf58d4ddb4","modified":1739029004277},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1737529859494},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1737543976038},{"_id":"themes/butterfly/source/img/README.md","hash":"6713c7cd13bfe3c99189d20732cce95687a256c0","modified":1738074015838},{"_id":"themes/butterfly/source/img/favicon.png","hash":"240b15a0b127f45126dcbf97e61781c424d526bc","modified":1737529859494},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1737529859494},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1737543975979},{"_id":"themes/butterfly/source/img/head.webp","hash":"aa2af246fc093099cfba509be2b516698c6bf5ab","modified":1738074015712},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"05da5331b442e9b4645b7d9584918b6e8128f086","modified":1737543971928},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1737543971996},{"_id":"themes/butterfly/scripts/helpers/charts.js","hash":"1e02ba7d98d39920b2e9e8f97ab7ef651da0b15a","modified":1738946482053},{"_id":"themes/butterfly/scripts/helpers/img.js","hash":"f49fb051af89df4e73eba27bec8decefaa540d84","modified":1737986122781},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1737543972154},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c207f1c02e2976fc0d125946fc1d98cf3d06b6f8","modified":1737543972233},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1737543972059},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4393a0e5ee97653496c0a1c273359005583a7eb7","modified":1737543971777},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"90f65e32a76f43fdd1ffae55775e300f6a3b1c02","modified":1737543971840},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1737543972468},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1737543972311},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1737543972532},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"be7c992cb1da26466d5ba676064c81a43338ca6a","modified":1737543972657},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1737543972595},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"32c6b81c5f668fc72a94de27f71f65edefd773be","modified":1737543972736},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1737543972374},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"1ce5fcce4d045a20f26821f0c773ce458fdf9769","modified":1737543972798},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1737543973051},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"448bd8982547616bf5d5e1ddc71816913bbb7d05","modified":1737543972930},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1737543973130},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"b3807dd492bafe9a148c76adf408da1c6fb47b6b","modified":1737543973255},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1737543973199},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1737543974634},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"73c96bffc08c2202407d506db377230f84c4f486","modified":1738080746108},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1737543973507},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1737543974674},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1737543973933},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1737543974044},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1737543972988},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1737543972862},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1737543973996},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"25edea914a5183fd20b1ef2c9439ccad75188ee4","modified":1738130939275},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1737543974201},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1737543974311},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1737543974359},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1737543974407},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1737995104374},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1737543974454},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1737543974737},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1737543974516},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1737543974847},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1737543974787},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1737543973555},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1737543975004},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1737543974894},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"90cc8fd812598e758a541566bd21d236d85ae55c","modified":1738323061423},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1737543974564},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1737543975366},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1737543975052},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1737543975319},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"559e7cacb6e6911a064637fee0288fdcf0082a4b","modified":1737543974249},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1737543973617},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1737543975099},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1737543975413},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1737543975523},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1737543975570},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1737543975665},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c97ec4a5225f2236377b2ca3b296031f64c72e44","modified":1737543965976},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1737543975617},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1737543975476},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1737543975712},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1737543975146},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1737543975759},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"dcfc63e62d3d58e581ad3ad77daa3fb03472d1ab","modified":1737543966039},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"111b1300efddf0743d8744822b3858a8dc311ed2","modified":1737543966149},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1737543975257},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1737543966196},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1737543975209},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"ad56f4bc914b6d6b5ca481dd95988043abb29914","modified":1737543966243},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1737543966306},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1737543975837},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1737543966400},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1737543966526},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1737543966353},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"dbc2643d8b01de535ac498badefd5152bcd9c2d7","modified":1737543966578},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1737543966747},{"_id":"themes/butterfly/layout/includes/page/about.pug","hash":"d350ae69ca9b2424a826efa3ad8acf59633f1d31","modified":1739035764263},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"cbe55f1c3c33828f0b3a8812829c19ee50399ce6","modified":1737543966463},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1737543966684},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"83f41e91371140a883c48f713591637e8c9acb39","modified":1738000100159},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1737543966779},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1737543967015},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1737543966621},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1737543967326},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1737543967375},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1737543967422},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1737543967046},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1737543967093},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1737543966889},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9f04f61fdd0a91874ad84b3963ae4e88bfb2b546","modified":1737543966086},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f2d2dbfc0f2e56f0329aca037a12dc282992ef35","modified":1738322761858},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"5f80bb21697ec6c27acc540649ddaea1646b87dc","modified":1738000161530},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1737543967215},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1737543967533},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1737543967706},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1737543967643},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fab72ff8595762928fe0b0130a34ee8e40d44bb4","modified":1738000127809},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1737543970613},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"0d257d38cb150b9b2696aa2d058e9d277cfdf3d7","modified":1737543967769},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"c67609f1c04c8b7b966f838f265feaf7ba9a2883","modified":1737543966952},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"5012e9cca9c1ce8c379d407f4ff426e297fd1ffe","modified":1737543970661},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1737543970567},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1737543970504},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1737543970771},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1737543970818},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1737543970865},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ff38e96f336a6c85ecb0ef015973980a11fc83f5","modified":1737543970925},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1737543970960},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1737543971007},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1737543971054},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e4eb905a53da498d5b036d4ab78a486a3cc77aa3","modified":1737543971117},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"3727d13b339134e037f30f5d7e9af9ec243f0ff1","modified":1737543971164},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1737543970723},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1737543976387},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1737543976466},{"_id":"themes/butterfly/source/css/_custom/about/about.css","hash":"a3c6cf2344ca4ae1ce319386caeed5dda232ade0","modified":1739107354469},{"_id":"themes/butterfly/source/css/_custom/about/hello-about.css","hash":"fcfd76203c9a9cbf9ae6cf9c8fad46cb03a14ace","modified":1738949023626},{"_id":"themes/butterfly/source/css/_custom/about/careers.css","hash":"a3c2d4b6aaf030772e9fc071be78ff42cc7a00a6","modified":1738948950484},{"_id":"themes/butterfly/source/css/_custom/about/genshinimpact.css","hash":"32506d09dbdb2f2b258b80a0f0b89152bf5b77ea","modified":1738948994056},{"_id":"themes/butterfly/source/css/_custom/about/site.css","hash":"9f157b7d3e3a62771e5ed977a2b28af01e423180","modified":1738949078140},{"_id":"themes/butterfly/source/css/_custom/about/skills.css","hash":"9dfaecf92f0050423ba1a07742e082f353f19751","modified":1738949052204},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1737543967250},{"_id":"themes/butterfly/source/css/_page/_flink_style/flexcard.styl","hash":"8fea19dd1002e17a97d0c67704db5ac1a547632f","modified":1738323189232},{"_id":"themes/butterfly/source/css/_page/_flink_style/butterfly.styl","hash":"be435134e4453a04ce3929a0c9c1da865df7c559","modified":1738323130345},{"_id":"themes/butterfly/source/css/_page/_flink_style/volantis.styl","hash":"d497a9c654b927e1579a8a8513573bafacc7150a","modified":1738323162492},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1737543973712},{"_id":"themes/butterfly/layout/includes/page/flink_style/butterfly.pug","hash":"4145a1dbd8d12151d49426b6995b94b6a0d26fbf","modified":1738322618935},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1737543973791},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1737543973822},{"_id":"themes/butterfly/layout/includes/page/flink_style/byer.pug","hash":"c1d670ac7965bd02806f203c21d15337dab7aa4e","modified":1738322830251},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1737543973869},{"_id":"themes/butterfly/layout/includes/page/flink_style/volantis.pug","hash":"e04b9ad7c4c9a631af08e0a01cd12889d7943934","modified":1738322705096},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1737543967926},{"_id":"themes/butterfly/layout/includes/page/flink_style/flexcard.pug","hash":"8d8c03bbdff01213c79cbfba73b29900ae634273","modified":1738323615679},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1737543967817},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"97e81321fe7991831bb5cd189402af477a0e5a73","modified":1737543967863},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5ba53d5c671c723754c2d0133016005b2af789a9","modified":1737543968350},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1737543967989},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1737543973681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1737543968021},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1737543968083},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1737543968131},{"_id":"themes/butterfly/source/css/_page/_flink_style/byer.styl","hash":"2e54cc4983d2c2b497e3d6716a5d98de0be91513","modified":1738323218211},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"5320f74b711aa2732ee0a506da08abef41c0c5ac","modified":1738001596444},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1737543968177},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2cf6ce7a703197f0d8991f3416cbc47b7250734a","modified":1737543968681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1737543968240},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1737543968287},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"817902fe7f3c42d6fca1253afd83583ec4b9f90c","modified":1737543968728},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"ce9f21e5d599733089a91d655ea980970b87456d","modified":1737543968570},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd0af44547211520c10953f3023e22a26025aaf9","modified":1737543968507},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"67b67c46734eb82141ee1c827b8a71fea0945b2c","modified":1737543968853},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1737543968461},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9b0df2082ac11ad85471ff70e79c03b58c916677","modified":1737543968790},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1737543968900},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"dc02a84f6e0ab3d86f410c6ba7cb6f7b277eb1a4","modified":1737543968413},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"566848e4f7b857af7cd01fc72952b49101955d0a","modified":1737543969073},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1737543968948},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"0dc016c759b3b90449b1076307c390fcba6052f6","modified":1737543969010},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"5c97558d4d9109b5f9aff5bef5665cfbe3938c50","modified":1738001648412},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"516dae8e5dad4ace61333cb4df8ae70a8a9acbec","modified":1737543969355},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b17416a1a76c58651757d9b80e4f6715de636342","modified":1737543969183},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"3fdb4d12fa7440466720b24d19b12b06f53d35e1","modified":1737543969120},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b771c0de03a70d4fc2d98bb3e2ebc069033ff5eb","modified":1737543969402},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"b99a94de9a6bda59d6977b3b693d0e369123d727","modified":1737543969292},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5fc8f74c6a04f0c219a52c9768c5f19119b80ef7","modified":1737543969521},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1737543969575},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9e1fd1f5703e133682dea92a0c91cf7058207868","modified":1737543969639},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"f40e18bdf470f76ff7063cf42016c58d75d06c24","modified":1737543969811},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1737543969465},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"366273efa0d6fc7386e4acafa32ea92d7efe4464","modified":1737543969686},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"2af8902b0e8c336633ce3ee444a44b23028bacee","modified":1737543969858},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"e7e05cc32322f381077624599adc2e64486310a8","modified":1737543969749},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"154ec9bcce19bc3a90771d8d55aff5ae14b5bee2","modified":1737543969969},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"39b620c7b2cf5f4527df547b1777fbcb7508a525","modified":1737543969921},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"fc1f9d0655a94bfc76e5542207d1991e5d24690a","modified":1737543970032},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"88aef4170336282bc988ab64c9b5ec8f5272a62c","modified":1737543970079},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1737543970346},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1737543970409},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e90902290515310480e376d6ea74c0be82fc03d8","modified":1737543970142},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1737543970457},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1737543970189},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1737543970237},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"52992436757b36ca1950efeb13144187224d7430","modified":1738000186715},{"_id":"themes/butterfly/source/img/3000.webp","hash":"acfeb8cbf20e84c4905b4c8ff8b99008eaeb80cd","modified":1738074015627},{"_id":"themes/butterfly/source/img/head.png","hash":"2d0727e5ad933da2988f42042dbbce90f03009dc","modified":1737983466483},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1737543975938},{"_id":"themes/butterfly/source/img/growen.webp","hash":"49a75da1ca636f29df993cb353c72f7ab375f816","modified":1738074015757},{"_id":"themes/butterfly/source/img/2.webp","hash":"92bcdd648f4e7a857acc3ff3aec7780633e661f1","modified":1737983490521},{"_id":"themes/butterfly/source/img/10year.webp","hash":"738fb38e54cc0c76f1739a3b5eea6e06ad769fc9","modified":1738074015882},{"_id":"themes/butterfly/source/img/head.gif","hash":"541c933efe8cd65c0b40065555e923657aea4da2","modified":1738074015679},{"_id":"themes/butterfly/source/img/1.webp","hash":"787daa565774f2a67ceb8084014919c1644d2ffd","modified":1737908546307},{"_id":"public/css/critical.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739112836290},{"_id":"public/search.xml","hash":"a7572df05f6a0f3d459ae15409eafb54a058f3c9","modified":1739112836290},{"_id":"public/post-sitemap.xml","hash":"941527667573aad2468029f8a02992a589e10a83","modified":1739112836290},{"_id":"public/page-sitemap.xml","hash":"30bc94573cd71296ce535b8f32add357fd450dfb","modified":1739112836290},{"_id":"public/category-sitemap.xml","hash":"1fdce6c542190bada649e026893e71720e94b0e7","modified":1739112836290},{"_id":"public/tag-sitemap.xml","hash":"7be84000a24b90ae67b4a3f8e575f08823e56145","modified":1739112836290},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1739112836290},{"_id":"public/sitemap.xml","hash":"022123276740e5ca9a3f4508f5290d0858f686cf","modified":1739112836290},{"_id":"public/link/index.html","hash":"230a5a204446266357baa508c5cd228c2cafc75f","modified":1739112836290},{"_id":"public/categories/index.html","hash":"80df860da715907c4f8c02537096b75b35545d65","modified":1739112836290},{"_id":"public/charts/index.html","hash":"c9f015e79a8ba5b33bdc3c377d813c8c24105719","modified":1739112836290},{"_id":"public/statistics/index.html","hash":"5d6705cd6140f2f5fbea9347d3bba008167191c2","modified":1739112836290},{"_id":"public/about/index.html","hash":"70c2897e7731167adf9a5d00d6e9a2878ba455c5","modified":1739112836290},{"_id":"public/messageboard/index.html","hash":"0a0b9b2964fc8e77e68d630b8a0dfd0baf034269","modified":1739112836290},{"_id":"public/tags/index.html","hash":"8bd157bfb21533a5b87f3d591eccb719fb99a12e","modified":1739112836290},{"_id":"public/2025/01/1day/index.html","hash":"dea713900e9dc98649e6c6c48743b69ff4fb64ac","modified":1739112836290},{"_id":"public/2025/01/2day/index.html","hash":"9bbd73128b203103d7fac62062997f4fdafce597","modified":1739112836290},{"_id":"public/2025/01/3day/index.html","hash":"4c8b3fc73183105e2205e10b287992cd00f1c0fa","modified":1739112836290},{"_id":"public/2025/01/4day/index.html","hash":"069813d1e1a1ba1a1758c108bf5e1f96d7762c77","modified":1739112836290},{"_id":"public/2025/02/哈希表/index.html","hash":"3c305037c48d9ac5e9e736c8254e43a15a49c06f","modified":1739112836290},{"_id":"public/2025/02/5day/index.html","hash":"2a1895dbe064cf863bc91a2c5fd20c3e6c0aa367","modified":1739112836290},{"_id":"public/2025/02/7day/index.html","hash":"6ca1eba1571b06a8c6cf39d926988767880c7746","modified":1739112836290},{"_id":"public/2025/02/6day/index.html","hash":"0f5dea2f2ed4b3ed00cc600ce952e3417dbc654f","modified":1739112836290},{"_id":"public/2025/02/8day/index.html","hash":"6ee3a6146034572a06aae7279533eef4aa9647f9","modified":1739112836290},{"_id":"public/archives/index.html","hash":"880b19837078473ed4c7a8e98af802440987b2be","modified":1739112836290},{"_id":"public/2025/02/STL/index.html","hash":"6bbfe9471565d94a3e0faeda8dd47039af18a547","modified":1739112836290},{"_id":"public/2025/02/9day/index.html","hash":"62b80549e7bf0a304c971b6ab8683579f5bb7e64","modified":1739112836290},{"_id":"public/archives/page/2/index.html","hash":"bda96c90e39f40c6bb334615ef139b3328b2ca4f","modified":1739112836290},{"_id":"public/archives/2025/index.html","hash":"0f8c0e1b5f2db6c79871a4b62ceb9af5cfabd281","modified":1739112836290},{"_id":"public/archives/2025/page/2/index.html","hash":"c9c34b6160e78be64e36f6c4d12e0f4706861c06","modified":1739112836290},{"_id":"public/archives/2025/01/index.html","hash":"0a79ffa09071c3c685b6e95349ff51cb418fe316","modified":1739112836290},{"_id":"public/archives/2025/02/index.html","hash":"e11569ffc4443cfefdec65213c967f726769d68f","modified":1739112836290},{"_id":"public/categories/数据结构与算法/page/2/index.html","hash":"f875e86c661bf2a210ecf04de2a8c05d43013105","modified":1739112836290},{"_id":"public/categories/数据结构与算法/index.html","hash":"904e1badb635de861cb74f1762aa36845656df3b","modified":1739112836290},{"_id":"public/categories/数据结构与算法/代码随想录/index.html","hash":"b85502905d3b3ae01f7de71c0c48c651ae2f4e5d","modified":1739112836290},{"_id":"public/categories/数据结构与算法/基础知识/index.html","hash":"397623171a8e4a773358245b753f0917965203fa","modified":1739112836290},{"_id":"public/page/2/index.html","hash":"78d75e5568755fd16c778a1772f3f875618a84d5","modified":1739112836290},{"_id":"public/tags/数据结构与算法/index.html","hash":"895febf819d41aeb4de6d73d7d0a19e9468c6ae7","modified":1739112836290},{"_id":"public/tags/二分查找/index.html","hash":"c787dc9c5cbf0be82124cb0f3bba2679c9a5271c","modified":1739112836290},{"_id":"public/index.html","hash":"9c40fe062b207331b93a0c3e6521db8f707b1569","modified":1739112836290},{"_id":"public/tags/双指针/index.html","hash":"23056c591e48f11591809cf226f585e3ebe59e8c","modified":1739112836290},{"_id":"public/tags/数组/index.html","hash":"e3ebcfe01c19e8e8cd7a8949186a6966d6da8e02","modified":1739112836290},{"_id":"public/tags/滑动窗口/index.html","hash":"5c9468ee380c8da939ae59acbdb88592d81bf247","modified":1739112836290},{"_id":"public/tags/矩阵规律/index.html","hash":"e7492f8f8dadcb087eedd00c4e19359b0fdc94c8","modified":1739112836290},{"_id":"public/tags/前缀和/index.html","hash":"876cef785d128664035640a7b3e51e682ab1930d","modified":1739112836290},{"_id":"public/tags/递归/index.html","hash":"6c0a56000759e4da8f491cc70d7f1f590eb55894","modified":1739112836290},{"_id":"public/tags/链表/index.html","hash":"05b8f0d7fdb1e2385b2a2aac164b907346221958","modified":1739112836290},{"_id":"public/tags/哈希表/index.html","hash":"998a0587b85f9bd188758542503f9c2d7e86dc13","modified":1739112836290},{"_id":"public/tags/查找/index.html","hash":"5a9273689539f70048a3028cc1a69608288e4f22","modified":1739112836290},{"_id":"public/tags/set/index.html","hash":"be9567ca4a431b3b5dee3947e682f85777a8e80b","modified":1739112836290},{"_id":"public/tags/map/index.html","hash":"dff8b2a4d601630e93fe9a1db07786017f8cc165","modified":1739112836290},{"_id":"public/tags/字符串/index.html","hash":"0d9bb1dd963dd4291fe75dac1d2b2627abf1e897","modified":1739112836290},{"_id":"public/tags/KMP/index.html","hash":"771484a9c581e1524d6c5aadee3aa11372d5e296","modified":1739112836290},{"_id":"public/tags/reverse/index.html","hash":"fbe59877f2a65e2e156deada3d2e406cb1759a1d","modified":1739112836290},{"_id":"public/tags/栈/index.html","hash":"882f91f57ee463c9cc4513997e366a2c1eb1bec7","modified":1739112836290},{"_id":"public/tags/队列/index.html","hash":"54b00f6b5415fba3b892be0c114036a373bae7f4","modified":1739112836290},{"_id":"public/tags/双端队列/index.html","hash":"68967c99994a06d994e70200f8c5657441d0cb2e","modified":1739112836290},{"_id":"public/tags/堆/index.html","hash":"02f121ee92acdfe69c80f201ec5440b4547f9317","modified":1739112836290},{"_id":"public/tags/queue/index.html","hash":"a2d8a40e39aef00f2bac14febdfbb123f26dec88","modified":1739112836290},{"_id":"public/tags/stack/index.html","hash":"d3b8b25ecf7ba36278185666e2184731625f1b38","modified":1739112836290},{"_id":"public/tags/deque/index.html","hash":"ce5d0f063caa90d8ecb4387b83dfa1a120f00fe4","modified":1739112836290},{"_id":"public/tags/STL/index.html","hash":"d2371c14fdd0ea2e1bd35caa5d3233dad2fb73d9","modified":1739112836290},{"_id":"public/img/2","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1739112836290},{"_id":"public/img/123.JPG","hash":"a05af6828774a231ee73dd504b941acf58d4ddb4","modified":1739112836290},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1739112836290},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1739112836290},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1739112836290},{"_id":"public/img/favicon.png","hash":"240b15a0b127f45126dcbf97e61781c424d526bc","modified":1739112836290},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1739112836290},{"_id":"public/img/head.webp","hash":"aa2af246fc093099cfba509be2b516698c6bf5ab","modified":1739112836290},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1739112836290},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1739112836290},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1739112836290},{"_id":"public/js/hexo_githubcalendar.js","hash":"5157234000b850eb8606cc9a13ae1e9652d8d5f3","modified":1739112836290},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739112836290},{"_id":"public/js/countup.js","hash":"89388b8b14405b13257da96356312a5f37f94841","modified":1739112836290},{"_id":"public/css/transpancy.css","hash":"3f8e574ca85111edb4f1925969c944b7a31a9f5d","modified":1739112836290},{"_id":"public/css/index.css","hash":"815c9a9f838ab7eaedfc33267cdb0ce5b8b6dabd","modified":1739112836290},{"_id":"public/js/reward.js","hash":"0d101b9b594b3ee39117dc423a5d17aef447302e","modified":1739112836290},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1739112836290},{"_id":"public/img/README.html","hash":"f208b494e369d5a3d3e5eb0731ed275bc63b57af","modified":1739112836290},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1739112836290},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1739112836290},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1739112836290},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1739112836290},{"_id":"public/img/3000.webp","hash":"acfeb8cbf20e84c4905b4c8ff8b99008eaeb80cd","modified":1739112836290},{"_id":"public/img/head.png","hash":"2d0727e5ad933da2988f42042dbbce90f03009dc","modified":1739112836290},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1739112836290},{"_id":"public/img/growen.webp","hash":"49a75da1ca636f29df993cb353c72f7ab375f816","modified":1739112836290},{"_id":"public/img/2.webp","hash":"92bcdd648f4e7a857acc3ff3aec7780633e661f1","modified":1739112836290},{"_id":"public/img/10year.webp","hash":"738fb38e54cc0c76f1739a3b5eea6e06ad769fc9","modified":1739112836290},{"_id":"public/img/head.gif","hash":"541c933efe8cd65c0b40065555e923657aea4da2","modified":1739112836290},{"_id":"public/img/1.webp","hash":"787daa565774f2a67ceb8084014919c1644d2ffd","modified":1739112836290}],"Category":[{"name":"数据结构与算法","_id":"cm6xqvquk0004a4wm47xpc69c"},{"name":"代码随想录","parent":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqut000ha4wmewa732zv"},{"name":"基础知识","parent":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvi001wa4wm5iq02zi8"}],"Data":[{"_id":"creativity","data":[{"class_name":"开启创造力","creativity_list":[{"name":"C++","color":"#fff","icon":"https://wpironman.oss-cn-qingdao.aliyuncs.com/20250208211930380.png"},{"name":"Python","color":"#fff","icon":"https://img02.anheyu.com/adminuploads/1/2022/09/25/63300647dea51.png"},{"name":"Java","color":"#fff","icon":"https://img02.anheyu.com/adminuploads/1/2022/09/25/633005bf0fd1e.jpg"},{"name":"Node","color":"#333","icon":"https://npm.elemecdn.com/anzhiyu-blog@2.1.1/img/svg/node-logo.svg"},{"name":"CSS3","color":"#2c51db","icon":"https://img02.anheyu.com/adminuploads/1/2022/09/25/633006cc55e07.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img02.anheyu.com/adminuploads/1/2022/09/25/633006eee047b.png"},{"name":"HTML","color":"#e9572b","icon":"https://img02.anheyu.com/adminuploads/1/2022/09/25/633006f9ab27d.png"},{"name":"Git","color":"#df5b40","icon":"https://wpironman.oss-cn-qingdao.aliyuncs.com/20250208212108189.png"}]}]},{"_id":"reward","data":[{"class_name":"赞赏","reward_list":[{"name":"WP","amount":10,"datatime":"2025-2-2"}]}]},{"_id":"link","data":[{"class_name":"高质量知识網站","link_list":[{"name":"CS自学指南","link":"https://csdiy.wiki/","avatar":"https://csdiy.wiki/images/title.png","descr":"CS学习知识整合站点"},{"name":"OI Wiki","link":"https://oi-wiki.org/","avatar":"https://wpironman.oss-cn-qingdao.aliyuncs.com/wordArt.webp","descr":"编程竞赛知识整合站点"},{"name":"代码随想录","link":"https://programmercarl.com/","avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20210614201246512.png","descr":"算法学习不走弯路"}]},{"class_name":"高质量娱乐網站","link_list":[{"name":"音范丝电影精选","link":"https://www.yinfans.me/","avatar":"https://s44.playwoool.com/wp-content/uploads/2017/04/LOGO_3.png","descr":"蓝光精选电影网站"}]},{"class_name":"思想家","class_desc":"知识与智慧并存的大佬","link_list":[{"name":"编程随想的博客","link":"https://program-think.blogspot.com/","avatar":"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj-Ji0zNb8cNLG_VJPHoUI2hhPeJUsfIi4a373J4HHbBSs_Dmaauis5DtEy2FzR-vO96ZyG5rgHogMaT1VCRkv2bG5bN4aovpzYupYXuPoJYPDoImYa1YlXF67pDeY-HEosJin-SPVXLJc/","descr":"控制风险的最好办法是深入思考，而不是投资组合！"}]},{"class_name":"博客开发","flink_style":"flexcard","link_list":[{"name":"butterfly魔改","link":"https://butterfly.zhheo.com/","avatar":"https://butterfly.zhheo.com/img/logo.webp","descr":"基于Butterfly的组件美化教程合集"},{"name":"Butterfly 主题文档","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"Butterfly 官方文档"},{"name":"安知鱼","link":"https://blog.anheyu.com/","avatar":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.4/img/avatar.jpg","descr":"生活明朗，万物可爱✨","siteshot":"https://npm.elemecdn.com/anzhiyu-theme-static@1.1.6/img/blog.anheyu.com.jpg"}]}]}],"Page":[{"title":"分类","type":"categories","date":"2025-01-22T11:22:25.000Z","_content":"\n","source":"categories/index.md","raw":"title: 分类\ntype: categories\ndate: 2025-01-22 19:22:25\n---\n\n","updated":"2025-02-07T17:39:59.948Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm6xqvqub0000a4wm79aock55","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"友情链接","type":"link","data":"2025-01-31T11:16:45.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ntype: 'link'\ndata: 2025-1-31 19:16:45\n---\n","date":"2025-01-31T11:16:19.169Z","updated":"2025-01-31T11:16:19.169Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm6xqvqui0002a4wmetxu0vhs","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"统计","date":"2025-01-24T03:08:47.000Z","type":"charts","comments":0,"aside":true,"_content":"\n<script src=\"https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js\"></script>\n\n<!-- 文章发布时间统计图 --> \n<div id=\"posts-chart\" data-start=\"2025-01\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章标签统计图 --> <!-- data-length=\"10\" 是显示的标签数量 -->\n<div id=\"tags-chart\" data-length=\"10\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章分类统计图 -->\n<div id=\"categories-chart\" data-parent=\"true\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n\n\n","source":"charts/index.md","raw":"---\ntitle: 统计\ndate: 2025-01-24 11:08:47\ntype: \"charts\"\ncomments: false\naside: true\n---\n\n<script src=\"https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js\"></script>\n\n<!-- 文章发布时间统计图 --> \n<div id=\"posts-chart\" data-start=\"2025-01\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章标签统计图 --> <!-- data-length=\"10\" 是显示的标签数量 -->\n<div id=\"tags-chart\" data-length=\"10\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章分类统计图 -->\n<div id=\"categories-chart\" data-parent=\"true\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n\n\n","updated":"2025-02-07T16:49:14.065Z","path":"charts/index.html","layout":"page","_id":"cm6xqvqum0006a4wmh7qz1bnb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script src=\"https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js\"></script>\n\n<!-- 文章发布时间统计图 --> \n<div id=\"posts-chart\" data-start=\"2025-01\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章标签统计图 --> <!-- data-length=\"10\" 是显示的标签数量 -->\n<div id=\"tags-chart\" data-length=\"10\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章分类统计图 -->\n<div id=\"categories-chart\" data-parent=\"true\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n\n\n","excerpt":"","more":"<script src=\"https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js\"></script>\n\n<!-- 文章发布时间统计图 --> \n<div id=\"posts-chart\" data-start=\"2025-01\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章标签统计图 --> <!-- data-length=\"10\" 是显示的标签数量 -->\n<div id=\"tags-chart\" data-length=\"10\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n<!-- 文章分类统计图 -->\n<div id=\"categories-chart\" data-parent=\"true\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"></div>\n\n\n"},{"title":"关于","date":"2025-01-23T12:20:04.000Z","aside":false,"top_img":false,"background":"#f8f9fe","comments":0,"type":"about","_content":"\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2025-01-23 20:20:04\naside: false\ntop_img: false\nbackground: \"#f8f9fe\"\ncomments: false\ntype: \"about\"\n---\n\n","updated":"2025-02-07T17:39:52.048Z","path":"about/index.html","layout":"page","_id":"cm6xqvqun0008a4wmdonr3f4b","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"statistics","date":"2025-01-23T14:06:07.000Z","_content":"","source":"statistics/index.md","raw":"---\ntitle: statistics\ndate: 2025-01-23 22:06:07\n---\n","updated":"2025-01-23T14:06:07.298Z","path":"statistics/index.html","comments":1,"layout":"page","_id":"cm6xqvqup0009a4wmd4xwgy96","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"messageboard","date":"2025-01-29T06:32:32.000Z","_content":"","source":"messageboard/index.md","raw":"---\ntitle: messageboard\ndate: 2025-01-29 14:32:32\n---\n","updated":"2025-01-29T06:32:32.547Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cm6xqvqur000ca4wmb4ubd9mz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"_content":"","source":"css/critical.css","raw":"","date":"2025-01-28T07:41:45.021Z","updated":"2025-01-28T07:41:45.021Z","path":"css/critical.css","layout":"false","title":"","comments":1,"_id":"cm6xqvqus000da4wmd1labf04","content":""},{"title":"标签","date":"2025-01-22T11:21:44.000Z","type":"tags","orderby":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-01-22 19:21:44\ntype: tags\norderby: \n---\n","updated":"2025-01-29T07:26:48.861Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm6xqvqut000ga4wm717mhs52","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""}],"Post":[{"title":"代码随想录--数组","date":"2025-01-22T16:00:00.000Z","updated":"2025-02-04T09:38:27.023Z","type":null,"comments":1,"description":"代码随想录--数组（上）","keywords":["算法","复试"],"top_img":null,"_content":"\n\n## 二分查找\n\n每次去除当前区间一半的元素，时间复杂度O(logn)，注意处理好区间。\n\n### 例题\n题目链接：[704. 二分查找](https://leetcode.cn/problems/binary-search/)\n\n题目描述：在严格递增的序列中找到给定的数，并返回其下标。\n#### 左闭右闭 [left,right]\n\n``` c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l=0,r=nums.size()-1;\n        while(l<=r)\n        {\n            int mid=(l+r)/2;\n            if(nums[mid]>target) r=mid-1;\n            else if(nums[mid]<target) l=mid+1;\n            else return mid;\n        }\n        return -1;\n    }\n};\n\n```\n\n#### 左闭右开 [left,right)\n\n``` c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l=0,r=nums.size()-1;\n        while(l<r) //当l=r时没有意义，所以改为l<r.\n        {\n            int mid=(l+r)/2;\n            if(nums[mid]>target) r=mid;\n            else if(nums[mid]<target) l=mid+1;\n            else return mid;\n        }\n        return -1;\n    }\n};\n\n```\n### 相关题目 \n\n[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n比较简单，处理一下返回值就可以。\n\n[34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/)\n需要进行两次操作，找到左右边界，较复杂，还需要多做做。\n\n[69. x 的平方根 ](https://leetcode.cn/problems/sqrtx/)\n我的思路是当(l-r)<=1,找到的l便是整数部分。\n\n[367. 有效的完全平方数](https://leetcode.cn/problems/valid-perfect-square/)\n题目还未做\n\n\n\n## 双指针\n\n一种重要的编程思想，非常高效。\n### 例题\n题目链接：https://leetcode.cn/problems/remove-element/\n\n题目描述：给定一个数组 nums 和一个值 val，原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n\n#### 左右指针法\n\n思路：从两头向中间移动指针，当左边==val，右边！=val时，交换两个元素，边界问题不太好处理，较麻烦。\n\n``` c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int l=0,r=nums.size()-1;\n        while(l<=r)\n        {\n            while(l<=r && nums[l]!=val) l++;\n            while(l<=r && nums[r]==val) r--;\n            if(l<r){ swap(nums[l],nums[r]);\n            l++;\n            r--;}\n        }\n        return r+1;\n    }\n};\n```\n\n#### 快慢指针法 \n\n思路：定义一个快指针，用于一直向前循环，定义一个慢指针，当快指针指到的元素！=val时，将这个元素加入到慢指针指向的位置。快指针不会慢于慢指针，所以慢指针元素的更改就是它最后输出的数组。\n``` c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int fast=0,slow=0,n=nums.size();\n        while(fast<n)\n        {\n            if(nums[fast]==val) fast++;\n            else nums[slow++]=nums[fast++];\n        }\n        return slow;\n    }\n};\n\n```\n\n### 相关题目\n\n26.删除有序数组中的重复项：https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/\n\n思路：快慢指针，题解中i为快指针，n为慢指针，当快慢指针指向的元素不相等时，更新慢指针，思路和例题中的差不多。\n\n``` c++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int n=0;\n        for(int i=0;i<nums.size();i++) if(nums[i]!=nums[n]) nums[++n]=nums[i];\n        return n+1;\n    }\n};\n```\n\n283.移动零：https://leetcode.cn/problems/move-zeroes/solutions/2821184/san-chong-jie-fa-duo-yu-yan-you-pei-tu-b-1d3s/\n\n思路：这题不太好想，前几天做过，这次看还是没思路。\n\n``` c++\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int n=0,tem;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(nums[i]!=0)\n            {\n                tem=nums[i];\n                nums[i]=0;\n                nums[n++]=tem;     \n            }\n        }\n    }\n};\n```\n\n977.有序数组的平方：https://leetcode.cn/problems/squares-of-a-sorted-array/\n\n这题印象比较深刻，前几天做的时候一直想不明白我的做法的问题，后来问了学长，才知道，我因为没有定义一个新数组，导致在原数组上操作导致的问题。直接定义int数组也不行，得用vector定义一个动态数组，没接触过vector也是不太会用，一直想着看看呢，也总是不想看。当时一直以为是超出int范围了。\n\n思路：左右指针法，两边的数的平方向中间是递减的，所以比较两端，大的那一个就是剩下元素中最大的那个。\n\n``` c++\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int l = 0, r = nums.size() - 1, pos = nums.size() - 1;\n        vector<int> result(nums.size());  // 创建 int 类型的结果数组\n        while (l <= r) {\n            int ll = nums[l] * nums[l];  \n            int rr = nums[r] * nums[r];  \n            if (ll >= rr) {\n                result[pos] = ll;\n                l++;\n            } else {\n                result[pos] = rr;\n                r--;\n            }\n            pos--;\n        }\n        return result;  // 返回结果数组\n    }\n};\n```\n","source":"_posts/1day.md","raw":"---\ntitle: 代码随想录--数组\ndate: 2025/1/23\ntags: [数据结构与算法,二分查找,双指针,数组]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ntype: \ncomments:\ndescription: 代码随想录--数组（上）\nkeywords: [算法,复试]\ntop_img: \n---\n\n\n## 二分查找\n\n每次去除当前区间一半的元素，时间复杂度O(logn)，注意处理好区间。\n\n### 例题\n题目链接：[704. 二分查找](https://leetcode.cn/problems/binary-search/)\n\n题目描述：在严格递增的序列中找到给定的数，并返回其下标。\n#### 左闭右闭 [left,right]\n\n``` c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l=0,r=nums.size()-1;\n        while(l<=r)\n        {\n            int mid=(l+r)/2;\n            if(nums[mid]>target) r=mid-1;\n            else if(nums[mid]<target) l=mid+1;\n            else return mid;\n        }\n        return -1;\n    }\n};\n\n```\n\n#### 左闭右开 [left,right)\n\n``` c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l=0,r=nums.size()-1;\n        while(l<r) //当l=r时没有意义，所以改为l<r.\n        {\n            int mid=(l+r)/2;\n            if(nums[mid]>target) r=mid;\n            else if(nums[mid]<target) l=mid+1;\n            else return mid;\n        }\n        return -1;\n    }\n};\n\n```\n### 相关题目 \n\n[35. 搜索插入位置](https://leetcode.cn/problems/search-insert-position/)\n比较简单，处理一下返回值就可以。\n\n[34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/)\n需要进行两次操作，找到左右边界，较复杂，还需要多做做。\n\n[69. x 的平方根 ](https://leetcode.cn/problems/sqrtx/)\n我的思路是当(l-r)<=1,找到的l便是整数部分。\n\n[367. 有效的完全平方数](https://leetcode.cn/problems/valid-perfect-square/)\n题目还未做\n\n\n\n## 双指针\n\n一种重要的编程思想，非常高效。\n### 例题\n题目链接：https://leetcode.cn/problems/remove-element/\n\n题目描述：给定一个数组 nums 和一个值 val，原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n\n#### 左右指针法\n\n思路：从两头向中间移动指针，当左边==val，右边！=val时，交换两个元素，边界问题不太好处理，较麻烦。\n\n``` c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int l=0,r=nums.size()-1;\n        while(l<=r)\n        {\n            while(l<=r && nums[l]!=val) l++;\n            while(l<=r && nums[r]==val) r--;\n            if(l<r){ swap(nums[l],nums[r]);\n            l++;\n            r--;}\n        }\n        return r+1;\n    }\n};\n```\n\n#### 快慢指针法 \n\n思路：定义一个快指针，用于一直向前循环，定义一个慢指针，当快指针指到的元素！=val时，将这个元素加入到慢指针指向的位置。快指针不会慢于慢指针，所以慢指针元素的更改就是它最后输出的数组。\n``` c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int fast=0,slow=0,n=nums.size();\n        while(fast<n)\n        {\n            if(nums[fast]==val) fast++;\n            else nums[slow++]=nums[fast++];\n        }\n        return slow;\n    }\n};\n\n```\n\n### 相关题目\n\n26.删除有序数组中的重复项：https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/\n\n思路：快慢指针，题解中i为快指针，n为慢指针，当快慢指针指向的元素不相等时，更新慢指针，思路和例题中的差不多。\n\n``` c++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int n=0;\n        for(int i=0;i<nums.size();i++) if(nums[i]!=nums[n]) nums[++n]=nums[i];\n        return n+1;\n    }\n};\n```\n\n283.移动零：https://leetcode.cn/problems/move-zeroes/solutions/2821184/san-chong-jie-fa-duo-yu-yan-you-pei-tu-b-1d3s/\n\n思路：这题不太好想，前几天做过，这次看还是没思路。\n\n``` c++\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int n=0,tem;\n        for(int i=0;i<nums.size();i++)\n        {\n            if(nums[i]!=0)\n            {\n                tem=nums[i];\n                nums[i]=0;\n                nums[n++]=tem;     \n            }\n        }\n    }\n};\n```\n\n977.有序数组的平方：https://leetcode.cn/problems/squares-of-a-sorted-array/\n\n这题印象比较深刻，前几天做的时候一直想不明白我的做法的问题，后来问了学长，才知道，我因为没有定义一个新数组，导致在原数组上操作导致的问题。直接定义int数组也不行，得用vector定义一个动态数组，没接触过vector也是不太会用，一直想着看看呢，也总是不想看。当时一直以为是超出int范围了。\n\n思路：左右指针法，两边的数的平方向中间是递减的，所以比较两端，大的那一个就是剩下元素中最大的那个。\n\n``` c++\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int l = 0, r = nums.size() - 1, pos = nums.size() - 1;\n        vector<int> result(nums.size());  // 创建 int 类型的结果数组\n        while (l <= r) {\n            int ll = nums[l] * nums[l];  \n            int rr = nums[r] * nums[r];  \n            if (ll >= rr) {\n                result[pos] = ll;\n                l++;\n            } else {\n                result[pos] = rr;\n                r--;\n            }\n            pos--;\n        }\n        return result;  // 返回结果数组\n    }\n};\n```\n","slug":"1day","published":1,"layout":"post","photos":[],"_id":"cm6xqvquf0001a4wm2xzcdcrn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>每次去除当前区间一半的元素，时间复杂度O(logn)，注意处理好区间。</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">704. 二分查找</a></p>\n<p>题目描述：在严格递增的序列中找到给定的数，并返回其下标。</p>\n<h4 id=\"左闭右闭-left-right\"><a href=\"#左闭右闭-left-right\" class=\"headerlink\" title=\"左闭右闭 [left,right]\"></a>左闭右闭 [left,right]</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;target) r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid]&lt;target) l=mid<span class=\"number\">+1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"左闭右开-left-right\"><a href=\"#左闭右开-left-right\" class=\"headerlink\" title=\"左闭右开 [left,right)\"></a>左闭右开 [left,right)</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r) <span class=\"comment\">//当l=r时没有意义，所以改为l&lt;r.</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;target) r=mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid]&lt;target) l=mid<span class=\"number\">+1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a><br>比较简单，处理一下返回值就可以。</p>\n<p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a><br>需要进行两次操作，找到左右边界，较复杂，还需要多做做。</p>\n<p><a href=\"https://leetcode.cn/problems/sqrtx/\">69. x 的平方根 </a><br>我的思路是当(l-r)&lt;&#x3D;1,找到的l便是整数部分。</p>\n<p><a href=\"https://leetcode.cn/problems/valid-perfect-square/\">367. 有效的完全平方数</a><br>题目还未做</p>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p>一种重要的编程思想，非常高效。</p>\n<h3 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">https://leetcode.cn/problems/remove-element/</a></p>\n<p>题目描述：给定一个数组 nums 和一个值 val，原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<h4 id=\"左右指针法\"><a href=\"#左右指针法\" class=\"headerlink\" title=\"左右指针法\"></a>左右指针法</h4><p>思路：从两头向中间移动指针，当左边&#x3D;&#x3D;val，右边！&#x3D;val时，交换两个元素，边界问题不太好处理，较麻烦。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;=r &amp;&amp; nums[l]!=val) l++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;=r &amp;&amp; nums[r]==val) r--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l&lt;r)&#123; <span class=\"built_in\">swap</span>(nums[l],nums[r]);</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">            r--;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r<span class=\"number\">+1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快慢指针法\"><a href=\"#快慢指针法\" class=\"headerlink\" title=\"快慢指针法\"></a>快慢指针法</h4><p>思路：定义一个快指针，用于一直向前循环，定义一个慢指针，当快指针指到的元素！&#x3D;val时，将这个元素加入到慢指针指向的位置。快指针不会慢于慢指针，所以慢指针元素的更改就是它最后输出的数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> fast=<span class=\"number\">0</span>,slow=<span class=\"number\">0</span>,n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast&lt;n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[fast]==val) fast++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> nums[slow++]=nums[fast++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关题目-1\"><a href=\"#相关题目-1\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p>26.删除有序数组中的重复项：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/\">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/</a></p>\n<p>思路：快慢指针，题解中i为快指针，n为慢指针，当快慢指针指向的元素不相等时，更新慢指针，思路和例题中的差不多。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++) <span class=\"keyword\">if</span>(nums[i]!=nums[n]) nums[++n]=nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n<span class=\"number\">+1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>283.移动零：<a href=\"https://leetcode.cn/problems/move-zeroes/solutions/2821184/san-chong-jie-fa-duo-yu-yan-you-pei-tu-b-1d3s/\">https://leetcode.cn/problems/move-zeroes/solutions/2821184/san-chong-jie-fa-duo-yu-yan-you-pei-tu-b-1d3s/</a></p>\n<p>思路：这题不太好想，前几天做过，这次看还是没思路。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=<span class=\"number\">0</span>,tem;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tem=nums[i];</span><br><span class=\"line\">                nums[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                nums[n++]=tem;     </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>977.有序数组的平方：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p>\n<p>这题印象比较深刻，前几天做的时候一直想不明白我的做法的问题，后来问了学长，才知道，我因为没有定义一个新数组，导致在原数组上操作导致的问题。直接定义int数组也不行，得用vector定义一个动态数组，没接触过vector也是不太会用，一直想着看看呢，也总是不想看。当时一直以为是超出int范围了。</p>\n<p>思路：左右指针法，两边的数的平方向中间是递减的，所以比较两端，大的那一个就是剩下元素中最大的那个。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortedSquares</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, pos = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(nums.size())</span></span>;  <span class=\"comment\">// 创建 int 类型的结果数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ll = nums[l] * nums[l];  </span><br><span class=\"line\">            <span class=\"type\">int</span> rr = nums[r] * nums[r];  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ll &gt;= rr) &#123;</span><br><span class=\"line\">                result[pos] = ll;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result[pos] = rr;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pos--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回结果数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</div>","excerpt":"","more":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>每次去除当前区间一半的元素，时间复杂度O(logn)，注意处理好区间。</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/binary-search/\">704. 二分查找</a></p>\n<p>题目描述：在严格递增的序列中找到给定的数，并返回其下标。</p>\n<h4 id=\"左闭右闭-left-right\"><a href=\"#左闭右闭-left-right\" class=\"headerlink\" title=\"左闭右闭 [left,right]\"></a>左闭右闭 [left,right]</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;target) r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid]&lt;target) l=mid<span class=\"number\">+1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"左闭右开-left-right\"><a href=\"#左闭右开-left-right\" class=\"headerlink\" title=\"左闭右开 [left,right)\"></a>左闭右开 [left,right)</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r) <span class=\"comment\">//当l=r时没有意义，所以改为l&lt;r.</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;target) r=mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid]&lt;target) l=mid<span class=\"number\">+1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a><br>比较简单，处理一下返回值就可以。</p>\n<p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a><br>需要进行两次操作，找到左右边界，较复杂，还需要多做做。</p>\n<p><a href=\"https://leetcode.cn/problems/sqrtx/\">69. x 的平方根 </a><br>我的思路是当(l-r)&lt;&#x3D;1,找到的l便是整数部分。</p>\n<p><a href=\"https://leetcode.cn/problems/valid-perfect-square/\">367. 有效的完全平方数</a><br>题目还未做</p>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p>一种重要的编程思想，非常高效。</p>\n<h3 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-element/\">https://leetcode.cn/problems/remove-element/</a></p>\n<p>题目描述：给定一个数组 nums 和一个值 val，原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<h4 id=\"左右指针法\"><a href=\"#左右指针法\" class=\"headerlink\" title=\"左右指针法\"></a>左右指针法</h4><p>思路：从两头向中间移动指针，当左边&#x3D;&#x3D;val，右边！&#x3D;val时，交换两个元素，边界问题不太好处理，较麻烦。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;=r &amp;&amp; nums[l]!=val) l++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;=r &amp;&amp; nums[r]==val) r--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l&lt;r)&#123; <span class=\"built_in\">swap</span>(nums[l],nums[r]);</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">            r--;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r<span class=\"number\">+1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快慢指针法\"><a href=\"#快慢指针法\" class=\"headerlink\" title=\"快慢指针法\"></a>快慢指针法</h4><p>思路：定义一个快指针，用于一直向前循环，定义一个慢指针，当快指针指到的元素！&#x3D;val时，将这个元素加入到慢指针指向的位置。快指针不会慢于慢指针，所以慢指针元素的更改就是它最后输出的数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> fast=<span class=\"number\">0</span>,slow=<span class=\"number\">0</span>,n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast&lt;n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[fast]==val) fast++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> nums[slow++]=nums[fast++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关题目-1\"><a href=\"#相关题目-1\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p>26.删除有序数组中的重复项：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/\">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/</a></p>\n<p>思路：快慢指针，题解中i为快指针，n为慢指针，当快慢指针指向的元素不相等时，更新慢指针，思路和例题中的差不多。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++) <span class=\"keyword\">if</span>(nums[i]!=nums[n]) nums[++n]=nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n<span class=\"number\">+1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>283.移动零：<a href=\"https://leetcode.cn/problems/move-zeroes/solutions/2821184/san-chong-jie-fa-duo-yu-yan-you-pei-tu-b-1d3s/\">https://leetcode.cn/problems/move-zeroes/solutions/2821184/san-chong-jie-fa-duo-yu-yan-you-pei-tu-b-1d3s/</a></p>\n<p>思路：这题不太好想，前几天做过，这次看还是没思路。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=<span class=\"number\">0</span>,tem;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tem=nums[i];</span><br><span class=\"line\">                nums[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                nums[n++]=tem;     </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>977.有序数组的平方：<a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p>\n<p>这题印象比较深刻，前几天做的时候一直想不明白我的做法的问题，后来问了学长，才知道，我因为没有定义一个新数组，导致在原数组上操作导致的问题。直接定义int数组也不行，得用vector定义一个动态数组，没接触过vector也是不太会用，一直想着看看呢，也总是不想看。当时一直以为是超出int范围了。</p>\n<p>思路：左右指针法，两边的数的平方向中间是递减的，所以比较两端，大的那一个就是剩下元素中最大的那个。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortedSquares</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, pos = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(nums.size())</span></span>;  <span class=\"comment\">// 创建 int 类型的结果数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ll = nums[l] * nums[l];  </span><br><span class=\"line\">            <span class=\"type\">int</span> rr = nums[r] * nums[r];  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ll &gt;= rr) &#123;</span><br><span class=\"line\">                result[pos] = ll;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result[pos] = rr;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pos--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回结果数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"代码随想录--数组","date":"2025-01-23T16:00:00.000Z","updated":"2025-02-04T09:38:09.152Z","description":"代码随想录--数组（下）","keywords":["算法","复试"],"top_img":null,"_content":"\n## 滑动窗口\n\n​\t刚开始不太好想到滑动窗口这种方法，即使想到了也并没有办法证明滑动窗口方法的正确性，现在我也不会证明。只是会用，前几天做过一次，这是第二次做，记住了这个方法之后也是没有什么障碍。\n\n### 例题\n\n题目链接：[209. 长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n\n题目描述：找出数组中满足其总和大于等于 `target` 的长度最小的子数组，并返回其长度**。**如果不存在符合条件的子数组，返回 `0` 。\n\n``` c++\nclass Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n      int n=nums.size();\n      int sum=0,m=100010,j=0;\n      for(int i=0;i<n;i++)\n      {\n        sum=sum+nums[i];\n        while(sum>=target){\n            m=min(m,i-j+1);\n            sum-=nums[j++];\n        }\n      }\n      if(m==100010) return 0;\n      return m;\n    }\n};\n```\n\n\n\n### 相关题目 \n\n[904. 水果成篮](https://leetcode.cn/problems/fruit-into-baskets/)\n\n题目描述：找一个最长连续子数组，满足子数组中至多有两种数字。返回子数组的长度。\n\n这题题目描述很抽象，没看懂啥意思，去评论区的解释。\n\n[76. 最小覆盖子串](https://leetcode.cn/problems/minimum-window-substring/)\n\n不会做，没思路，目前水平不够，直接跳。\n\n\n\n## 矩阵规律\n\n题目链接：[59. 螺旋矩阵 II](https://leetcode.cn/problems/spiral-matrix-ii/)\n\n题目描述：给定一个正整数 `n` ，生成一个包含 `1` 到 `n2` 所有元素，且元素按顺时针顺序螺旋排列的 `n x n` 正方形矩阵 `matrix` 。\n### 例题\n\n#### 贪吃蛇输出\n\n题目思路：直接按顺序输出，定义上下左右四个边界，从左到右输出上边界加一，从上到下输出右边界减一，从右向左输出下边界减一，从下到上输出左边界加一，依次输出就可以，因为上边界加一，从上到下就少输出一个，右边界减一，从右到左输出就少输出一个。从下向上输出时，下边界减一，上边界加一，正好按顺序输出，完美！\n\n``` c++\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> res(n, vector<int>(n, 0));\n        int l=0,r=n-1,t=0,b=n-1,count=1;\n        while(count<=(n*n))\n        {\n            for(int i=l;i<=r;i++)\n            {\n                res[t][i]=count;\n                count++;\n            }\n            t++;\n            for(int j=t;j<=b;j++)\n            {\n                res[j][r]=count;\n                count++;\n            }\n            r--;\n            for(int j=r;j>=l;j--)\n            {\n                res[b][j]=count;\n                count++;\n            }\n            b--;\n            for(int j=b;j>=t;j--)\n            {\n                res[j][l]=count;\n                count++;\n            }\n            l++;\n        }\n        return res;\n    }\n};\n```\n\n#### 循环不变量原则\n\n思路：每条边按左闭右开的输出，每圈输出四次，每次输出边长减一个，这里直接贴一下代码随想录的代码。\n\n``` c++\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> res(n, vector<int>(n, 0)); // 使用vector定义一个二维数组\n        int startx = 0, starty = 0; // 定义每循环一个圈的起始位置\n        int loop = n / 2; \n        // 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理\n        int mid = n / 2; \n        // 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)\n        int count = 1; // 用来给矩阵中每一个空格赋值\n        int offset = 1; // 需要控制每一条边遍历的长度，每次循环右边界收缩一位\n        int i,j;\n        while (loop --) {\n            i = startx;\n            j = starty;\n        // 下面开始的四个for就是模拟转了一圈\n        // 模拟填充上行从左到右(左闭右开)\n            for (j; j < n - offset; j++) res[i][j] = count++;\n        // 模拟填充右列从上到下(左闭右开)\n            for (i; i < n - offset; i++) res[i][j] = count++;\n        // 模拟填充下行从右到左(左闭右开)\n            for (; j > starty; j--) res[i][j] = count++;\n        // 模拟填充左列从下到上(左闭右开)\n            for (; i > startx; i--) res[i][j] = count++;\n        // 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)\n            startx++;\n            starty++;\n        // offset 控制每一圈里每一条边遍历的长度\n            offset += 1;\n        }\n        // 如果n为奇数的话，需要单独给矩阵最中间的位置赋值\n        if (n % 2) res[mid][mid] = count;\n        return res;\n    }\n};\n```\n\n### 相关题目\n\n[54. 螺旋矩阵](https://leetcode.cn/problems/spiral-matrix/)\n\n进阶了一下，今天没时间了改天再做，这两天光建blog了。\n\n[LCR 146. 螺旋遍历二维数组](https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/)\n\n这题虽然是简单题，但是做起来比例题难，这题边界问题比较棘手。\n\n```c++\nclass Solution {\npublic:\n    vector<int> spiralArray(vector<vector<int>>& array) {\n        if (array.empty() || array[0].empty()) {\n            return {}; // 返回空 vector\n        }\n        int t=0,l=0,r=array[0].size() -1,b=array.size()-1,n=array[0].size()*array.size();\n        vector<int> ans(n);\n        int j=0;\n        while(t <= b && l <= r){\n            for(int i=l;i<=r;i++) ans[j++]=array[t][i];\n            t++;\n            for(int i=t;i<=b;i++) ans[j++]=array[i][r];\n            r--;\n            if (t <= b) { // 确保没有重复遍历\n                for (int i = r; i >= l; i--) {\n                    ans[j++] = array[b][i];\n                }\n                b--;\n            }\n            if (l <= r) { // 确保没有重复遍历\n                for (int i = b; i >= t; i--) {\n                    ans[j++] = array[i][l];\n                }\n                l++;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n## 前缀和\n\n**前缀和 在涉及计算区间和的问题时非常有用**！\n\n刚开始使用的暴力解法，一直不行，知道看了题解才知道，故意卡暴力解。然后自己也想不出什么好方法，就问的chatgpt，这种方法刚开始我还以为时间复杂度差不多呢。\n\n### 例题\n\n题目链接：[区间和](https://kamacoder.com/problempage.php?pid=1070/)\n\n题目描述：给定一个整数数组 Array，请计算该数组在每个指定区间内元素的总和。 \n\n``` \n#include <cstdio>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int a[n];\n\n    // 读取数组元素\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &a[i]);\n    }\n\n    // 计算前缀和数组\n    int prefixSum[n + 1];  // prefixSum[0] = 0\n    prefixSum[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        prefixSum[i] = prefixSum[i - 1] + a[i - 1];\n    }\n\n    // 处理区间查询\n    int l, r;\n    while (scanf(\"%d %d\", &l, &r) != EOF) {\n        // 使用前缀和快速计算区间 [l, r] 的和\n        printf(\"%d\\n\", prefixSum[r + 1] - prefixSum[l]);\n    }\n\n    return 0;\n}\n\n```\n\n\n\n### 相关题目 \n\n[开发商购买土地](https://kamacoder.com/problempage.php?pid=1044/)\n\n看起来挺难的，没看懂题目意思，明天再研究。\n\n","source":"_posts/2day.md","raw":"---\ntitle: 代码随想录--数组\ndate: 2025/1/24\ntags: [数据结构与算法,数组,滑动窗口,矩阵规律,前缀和]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--数组（下）\nkeywords: [算法,复试]\ntop_img:\n---\n\n## 滑动窗口\n\n​\t刚开始不太好想到滑动窗口这种方法，即使想到了也并没有办法证明滑动窗口方法的正确性，现在我也不会证明。只是会用，前几天做过一次，这是第二次做，记住了这个方法之后也是没有什么障碍。\n\n### 例题\n\n题目链接：[209. 长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n\n题目描述：找出数组中满足其总和大于等于 `target` 的长度最小的子数组，并返回其长度**。**如果不存在符合条件的子数组，返回 `0` 。\n\n``` c++\nclass Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n      int n=nums.size();\n      int sum=0,m=100010,j=0;\n      for(int i=0;i<n;i++)\n      {\n        sum=sum+nums[i];\n        while(sum>=target){\n            m=min(m,i-j+1);\n            sum-=nums[j++];\n        }\n      }\n      if(m==100010) return 0;\n      return m;\n    }\n};\n```\n\n\n\n### 相关题目 \n\n[904. 水果成篮](https://leetcode.cn/problems/fruit-into-baskets/)\n\n题目描述：找一个最长连续子数组，满足子数组中至多有两种数字。返回子数组的长度。\n\n这题题目描述很抽象，没看懂啥意思，去评论区的解释。\n\n[76. 最小覆盖子串](https://leetcode.cn/problems/minimum-window-substring/)\n\n不会做，没思路，目前水平不够，直接跳。\n\n\n\n## 矩阵规律\n\n题目链接：[59. 螺旋矩阵 II](https://leetcode.cn/problems/spiral-matrix-ii/)\n\n题目描述：给定一个正整数 `n` ，生成一个包含 `1` 到 `n2` 所有元素，且元素按顺时针顺序螺旋排列的 `n x n` 正方形矩阵 `matrix` 。\n### 例题\n\n#### 贪吃蛇输出\n\n题目思路：直接按顺序输出，定义上下左右四个边界，从左到右输出上边界加一，从上到下输出右边界减一，从右向左输出下边界减一，从下到上输出左边界加一，依次输出就可以，因为上边界加一，从上到下就少输出一个，右边界减一，从右到左输出就少输出一个。从下向上输出时，下边界减一，上边界加一，正好按顺序输出，完美！\n\n``` c++\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> res(n, vector<int>(n, 0));\n        int l=0,r=n-1,t=0,b=n-1,count=1;\n        while(count<=(n*n))\n        {\n            for(int i=l;i<=r;i++)\n            {\n                res[t][i]=count;\n                count++;\n            }\n            t++;\n            for(int j=t;j<=b;j++)\n            {\n                res[j][r]=count;\n                count++;\n            }\n            r--;\n            for(int j=r;j>=l;j--)\n            {\n                res[b][j]=count;\n                count++;\n            }\n            b--;\n            for(int j=b;j>=t;j--)\n            {\n                res[j][l]=count;\n                count++;\n            }\n            l++;\n        }\n        return res;\n    }\n};\n```\n\n#### 循环不变量原则\n\n思路：每条边按左闭右开的输出，每圈输出四次，每次输出边长减一个，这里直接贴一下代码随想录的代码。\n\n``` c++\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        vector<vector<int>> res(n, vector<int>(n, 0)); // 使用vector定义一个二维数组\n        int startx = 0, starty = 0; // 定义每循环一个圈的起始位置\n        int loop = n / 2; \n        // 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理\n        int mid = n / 2; \n        // 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)\n        int count = 1; // 用来给矩阵中每一个空格赋值\n        int offset = 1; // 需要控制每一条边遍历的长度，每次循环右边界收缩一位\n        int i,j;\n        while (loop --) {\n            i = startx;\n            j = starty;\n        // 下面开始的四个for就是模拟转了一圈\n        // 模拟填充上行从左到右(左闭右开)\n            for (j; j < n - offset; j++) res[i][j] = count++;\n        // 模拟填充右列从上到下(左闭右开)\n            for (i; i < n - offset; i++) res[i][j] = count++;\n        // 模拟填充下行从右到左(左闭右开)\n            for (; j > starty; j--) res[i][j] = count++;\n        // 模拟填充左列从下到上(左闭右开)\n            for (; i > startx; i--) res[i][j] = count++;\n        // 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)\n            startx++;\n            starty++;\n        // offset 控制每一圈里每一条边遍历的长度\n            offset += 1;\n        }\n        // 如果n为奇数的话，需要单独给矩阵最中间的位置赋值\n        if (n % 2) res[mid][mid] = count;\n        return res;\n    }\n};\n```\n\n### 相关题目\n\n[54. 螺旋矩阵](https://leetcode.cn/problems/spiral-matrix/)\n\n进阶了一下，今天没时间了改天再做，这两天光建blog了。\n\n[LCR 146. 螺旋遍历二维数组](https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/)\n\n这题虽然是简单题，但是做起来比例题难，这题边界问题比较棘手。\n\n```c++\nclass Solution {\npublic:\n    vector<int> spiralArray(vector<vector<int>>& array) {\n        if (array.empty() || array[0].empty()) {\n            return {}; // 返回空 vector\n        }\n        int t=0,l=0,r=array[0].size() -1,b=array.size()-1,n=array[0].size()*array.size();\n        vector<int> ans(n);\n        int j=0;\n        while(t <= b && l <= r){\n            for(int i=l;i<=r;i++) ans[j++]=array[t][i];\n            t++;\n            for(int i=t;i<=b;i++) ans[j++]=array[i][r];\n            r--;\n            if (t <= b) { // 确保没有重复遍历\n                for (int i = r; i >= l; i--) {\n                    ans[j++] = array[b][i];\n                }\n                b--;\n            }\n            if (l <= r) { // 确保没有重复遍历\n                for (int i = b; i >= t; i--) {\n                    ans[j++] = array[i][l];\n                }\n                l++;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n## 前缀和\n\n**前缀和 在涉及计算区间和的问题时非常有用**！\n\n刚开始使用的暴力解法，一直不行，知道看了题解才知道，故意卡暴力解。然后自己也想不出什么好方法，就问的chatgpt，这种方法刚开始我还以为时间复杂度差不多呢。\n\n### 例题\n\n题目链接：[区间和](https://kamacoder.com/problempage.php?pid=1070/)\n\n题目描述：给定一个整数数组 Array，请计算该数组在每个指定区间内元素的总和。 \n\n``` \n#include <cstdio>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int a[n];\n\n    // 读取数组元素\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &a[i]);\n    }\n\n    // 计算前缀和数组\n    int prefixSum[n + 1];  // prefixSum[0] = 0\n    prefixSum[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        prefixSum[i] = prefixSum[i - 1] + a[i - 1];\n    }\n\n    // 处理区间查询\n    int l, r;\n    while (scanf(\"%d %d\", &l, &r) != EOF) {\n        // 使用前缀和快速计算区间 [l, r] 的和\n        printf(\"%d\\n\", prefixSum[r + 1] - prefixSum[l]);\n    }\n\n    return 0;\n}\n\n```\n\n\n\n### 相关题目 \n\n[开发商购买土地](https://kamacoder.com/problempage.php?pid=1044/)\n\n看起来挺难的，没看懂题目意思，明天再研究。\n\n","slug":"2day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqui0003a4wmcjln12gd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h2><p>​\t刚开始不太好想到滑动窗口这种方法，即使想到了也并没有办法证明滑动窗口方法的正确性，现在我也不会证明。只是会用，前几天做过一次，这是第二次做，记住了这个方法之后也是没有什么障碍。</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></p>\n<p>题目描述：找出数组中满足其总和大于等于 <code>target</code> 的长度最小的子数组，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">      <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,m=<span class=\"number\">100010</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        sum=sum+nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sum&gt;=target)&#123;</span><br><span class=\"line\">            m=<span class=\"built_in\">min</span>(m,i-j<span class=\"number\">+1</span>);</span><br><span class=\"line\">            sum-=nums[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(m==<span class=\"number\">100010</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://leetcode.cn/problems/fruit-into-baskets/\">904. 水果成篮</a></p>\n<p>题目描述：找一个最长连续子数组，满足子数组中至多有两种数字。返回子数组的长度。</p>\n<p>这题题目描述很抽象，没看懂啥意思，去评论区的解释。</p>\n<p><a href=\"https://leetcode.cn/problems/minimum-window-substring/\">76. 最小覆盖子串</a></p>\n<p>不会做，没思路，目前水平不够，直接跳。</p>\n<h2 id=\"矩阵规律\"><a href=\"#矩阵规律\" class=\"headerlink\" title=\"矩阵规律\"></a>矩阵规律</h2><p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">59. 螺旋矩阵 II</a></p>\n<p>题目描述：给定一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>\n<h3 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h3><h4 id=\"贪吃蛇输出\"><a href=\"#贪吃蛇输出\" class=\"headerlink\" title=\"贪吃蛇输出\"></a>贪吃蛇输出</h4><p>题目思路：直接按顺序输出，定义上下左右四个边界，从左到右输出上边界加一，从上到下输出右边界减一，从右向左输出下边界减一，从下到上输出左边界加一，依次输出就可以，因为上边界加一，从上到下就少输出一个，右边界减一，从右到左输出就少输出一个。从下向上输出时，下边界减一，上边界加一，正好按顺序输出，完美！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">generateMatrix</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">res</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=n<span class=\"number\">-1</span>,t=<span class=\"number\">0</span>,b=n<span class=\"number\">-1</span>,count=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(count&lt;=(n*n))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[t][i]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=t;j&lt;=b;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[j][r]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=r;j&gt;=l;j--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[b][j]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            b--;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=b;j&gt;=t;j--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[j][l]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环不变量原则\"><a href=\"#循环不变量原则\" class=\"headerlink\" title=\"循环不变量原则\"></a>循环不变量原则</h4><p>思路：每条边按左闭右开的输出，每圈输出四次，每次输出边长减一个，这里直接贴一下代码随想录的代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">generateMatrix</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">res</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, <span class=\"number\">0</span>)); <span class=\"comment\">// 使用vector定义一个二维数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span> startx = <span class=\"number\">0</span>, starty = <span class=\"number\">0</span>; <span class=\"comment\">// 定义每循环一个圈的起始位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> loop = n / <span class=\"number\">2</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span></span><br><span class=\"line\">        <span class=\"type\">int</span> mid = n / <span class=\"number\">2</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> count = <span class=\"number\">1</span>; <span class=\"comment\">// 用来给矩阵中每一个空格赋值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> offset = <span class=\"number\">1</span>; <span class=\"comment\">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></span><br><span class=\"line\">        <span class=\"type\">int</span> i,j;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loop --) &#123;</span><br><span class=\"line\">            i = startx;</span><br><span class=\"line\">            j = starty;</span><br><span class=\"line\">        <span class=\"comment\">// 下面开始的四个for就是模拟转了一圈</span></span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充上行从左到右(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j; j &lt; n - offset; j++) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充右列从上到下(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i; i &lt; n - offset; i++) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充下行从右到左(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt; starty; j--) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充左列从下到上(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; i &gt; startx; i--) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span></span><br><span class=\"line\">            startx++;</span><br><span class=\"line\">            starty++;</span><br><span class=\"line\">        <span class=\"comment\">// offset 控制每一圈里每一条边遍历的长度</span></span><br><span class=\"line\">            offset += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) res[mid][mid] = count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关题目-1\"><a href=\"#相关题目-1\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://leetcode.cn/problems/spiral-matrix/\">54. 螺旋矩阵</a></p>\n<p>进阶了一下，今天没时间了改天再做，这两天光建blog了。</p>\n<p><a href=\"https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/\">LCR 146. 螺旋遍历二维数组</a></p>\n<p>这题虽然是简单题，但是做起来比例题难，这题边界问题比较棘手。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">spiralArray</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array.<span class=\"built_in\">empty</span>() || array[<span class=\"number\">0</span>].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;&#125;; <span class=\"comment\">// 返回空 vector</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">0</span>,l=<span class=\"number\">0</span>,r=array[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() <span class=\"number\">-1</span>,b=array.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>,n=array[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>()*array.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t &lt;= b &amp;&amp; l &lt;= r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;i++) ans[j++]=array[t][i];</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t;i&lt;=b;i++) ans[j++]=array[i][r];</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t &lt;= b) &#123; <span class=\"comment\">// 确保没有重复遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = r; i &gt;= l; i--) &#123;</span><br><span class=\"line\">                    ans[j++] = array[b][i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                b--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &lt;= r) &#123; <span class=\"comment\">// 确保没有重复遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = b; i &gt;= t; i--) &#123;</span><br><span class=\"line\">                    ans[j++] = array[i][l];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><p><strong>前缀和 在涉及计算区间和的问题时非常有用</strong>！</p>\n<p>刚开始使用的暴力解法，一直不行，知道看了题解才知道，故意卡暴力解。然后自己也想不出什么好方法，就问的chatgpt，这种方法刚开始我还以为时间复杂度差不多呢。</p>\n<h3 id=\"例题-2\"><a href=\"#例题-2\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://kamacoder.com/problempage.php?pid=1070/\">区间和</a></p>\n<p>题目描述：给定一个整数数组 Array，请计算该数组在每个指定区间内元素的总和。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class=\"line\">    int a[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 读取数组元素</span><br><span class=\"line\">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 计算前缀和数组</span><br><span class=\"line\">    int prefixSum[n + 1];  // prefixSum[0] = 0</span><br><span class=\"line\">    prefixSum[0] = 0;</span><br><span class=\"line\">    for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        prefixSum[i] = prefixSum[i - 1] + a[i - 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 处理区间查询</span><br><span class=\"line\">    int l, r;</span><br><span class=\"line\">    while (scanf(&quot;%d %d&quot;, &amp;l, &amp;r) != EOF) &#123;</span><br><span class=\"line\">        // 使用前缀和快速计算区间 [l, r] 的和</span><br><span class=\"line\">        printf(&quot;%d\\n&quot;, prefixSum[r + 1] - prefixSum[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"相关题目-2\"><a href=\"#相关题目-2\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://kamacoder.com/problempage.php?pid=1044/\">开发商购买土地</a></p>\n<p>看起来挺难的，没看懂题目意思，明天再研究。</p>\n</div>","excerpt":"","more":"<h2 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h2><p>​\t刚开始不太好想到滑动窗口这种方法，即使想到了也并没有办法证明滑动窗口方法的正确性，现在我也不会证明。只是会用，前几天做过一次，这是第二次做，记住了这个方法之后也是没有什么障碍。</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></p>\n<p>题目描述：找出数组中满足其总和大于等于 <code>target</code> 的长度最小的子数组，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">      <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,m=<span class=\"number\">100010</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        sum=sum+nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sum&gt;=target)&#123;</span><br><span class=\"line\">            m=<span class=\"built_in\">min</span>(m,i-j<span class=\"number\">+1</span>);</span><br><span class=\"line\">            sum-=nums[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(m==<span class=\"number\">100010</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://leetcode.cn/problems/fruit-into-baskets/\">904. 水果成篮</a></p>\n<p>题目描述：找一个最长连续子数组，满足子数组中至多有两种数字。返回子数组的长度。</p>\n<p>这题题目描述很抽象，没看懂啥意思，去评论区的解释。</p>\n<p><a href=\"https://leetcode.cn/problems/minimum-window-substring/\">76. 最小覆盖子串</a></p>\n<p>不会做，没思路，目前水平不够，直接跳。</p>\n<h2 id=\"矩阵规律\"><a href=\"#矩阵规律\" class=\"headerlink\" title=\"矩阵规律\"></a>矩阵规律</h2><p>题目链接：<a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\">59. 螺旋矩阵 II</a></p>\n<p>题目描述：给定一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>\n<h3 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h3><h4 id=\"贪吃蛇输出\"><a href=\"#贪吃蛇输出\" class=\"headerlink\" title=\"贪吃蛇输出\"></a>贪吃蛇输出</h4><p>题目思路：直接按顺序输出，定义上下左右四个边界，从左到右输出上边界加一，从上到下输出右边界减一，从右向左输出下边界减一，从下到上输出左边界加一，依次输出就可以，因为上边界加一，从上到下就少输出一个，右边界减一，从右到左输出就少输出一个。从下向上输出时，下边界减一，上边界加一，正好按顺序输出，完美！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">generateMatrix</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">res</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=n<span class=\"number\">-1</span>,t=<span class=\"number\">0</span>,b=n<span class=\"number\">-1</span>,count=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(count&lt;=(n*n))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[t][i]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=t;j&lt;=b;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[j][r]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=r;j&gt;=l;j--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[b][j]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            b--;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=b;j&gt;=t;j--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[j][l]=count;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环不变量原则\"><a href=\"#循环不变量原则\" class=\"headerlink\" title=\"循环不变量原则\"></a>循环不变量原则</h4><p>思路：每条边按左闭右开的输出，每圈输出四次，每次输出边长减一个，这里直接贴一下代码随想录的代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">generateMatrix</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">res</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, <span class=\"number\">0</span>)); <span class=\"comment\">// 使用vector定义一个二维数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span> startx = <span class=\"number\">0</span>, starty = <span class=\"number\">0</span>; <span class=\"comment\">// 定义每循环一个圈的起始位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> loop = n / <span class=\"number\">2</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span></span><br><span class=\"line\">        <span class=\"type\">int</span> mid = n / <span class=\"number\">2</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> count = <span class=\"number\">1</span>; <span class=\"comment\">// 用来给矩阵中每一个空格赋值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> offset = <span class=\"number\">1</span>; <span class=\"comment\">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></span><br><span class=\"line\">        <span class=\"type\">int</span> i,j;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loop --) &#123;</span><br><span class=\"line\">            i = startx;</span><br><span class=\"line\">            j = starty;</span><br><span class=\"line\">        <span class=\"comment\">// 下面开始的四个for就是模拟转了一圈</span></span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充上行从左到右(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j; j &lt; n - offset; j++) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充右列从上到下(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i; i &lt; n - offset; i++) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充下行从右到左(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt; starty; j--) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟填充左列从下到上(左闭右开)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; i &gt; startx; i--) res[i][j] = count++;</span><br><span class=\"line\">        <span class=\"comment\">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span></span><br><span class=\"line\">            startx++;</span><br><span class=\"line\">            starty++;</span><br><span class=\"line\">        <span class=\"comment\">// offset 控制每一圈里每一条边遍历的长度</span></span><br><span class=\"line\">            offset += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) res[mid][mid] = count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关题目-1\"><a href=\"#相关题目-1\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://leetcode.cn/problems/spiral-matrix/\">54. 螺旋矩阵</a></p>\n<p>进阶了一下，今天没时间了改天再做，这两天光建blog了。</p>\n<p><a href=\"https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/\">LCR 146. 螺旋遍历二维数组</a></p>\n<p>这题虽然是简单题，但是做起来比例题难，这题边界问题比较棘手。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">spiralArray</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array.<span class=\"built_in\">empty</span>() || array[<span class=\"number\">0</span>].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;&#125;; <span class=\"comment\">// 返回空 vector</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">0</span>,l=<span class=\"number\">0</span>,r=array[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() <span class=\"number\">-1</span>,b=array.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>,n=array[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>()*array.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t &lt;= b &amp;&amp; l &lt;= r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;i++) ans[j++]=array[t][i];</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t;i&lt;=b;i++) ans[j++]=array[i][r];</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t &lt;= b) &#123; <span class=\"comment\">// 确保没有重复遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = r; i &gt;= l; i--) &#123;</span><br><span class=\"line\">                    ans[j++] = array[b][i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                b--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &lt;= r) &#123; <span class=\"comment\">// 确保没有重复遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = b; i &gt;= t; i--) &#123;</span><br><span class=\"line\">                    ans[j++] = array[i][l];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><p><strong>前缀和 在涉及计算区间和的问题时非常有用</strong>！</p>\n<p>刚开始使用的暴力解法，一直不行，知道看了题解才知道，故意卡暴力解。然后自己也想不出什么好方法，就问的chatgpt，这种方法刚开始我还以为时间复杂度差不多呢。</p>\n<h3 id=\"例题-2\"><a href=\"#例题-2\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>题目链接：<a href=\"https://kamacoder.com/problempage.php?pid=1070/\">区间和</a></p>\n<p>题目描述：给定一个整数数组 Array，请计算该数组在每个指定区间内元素的总和。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class=\"line\">    int a[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 读取数组元素</span><br><span class=\"line\">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 计算前缀和数组</span><br><span class=\"line\">    int prefixSum[n + 1];  // prefixSum[0] = 0</span><br><span class=\"line\">    prefixSum[0] = 0;</span><br><span class=\"line\">    for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        prefixSum[i] = prefixSum[i - 1] + a[i - 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 处理区间查询</span><br><span class=\"line\">    int l, r;</span><br><span class=\"line\">    while (scanf(&quot;%d %d&quot;, &amp;l, &amp;r) != EOF) &#123;</span><br><span class=\"line\">        // 使用前缀和快速计算区间 [l, r] 的和</span><br><span class=\"line\">        printf(&quot;%d\\n&quot;, prefixSum[r + 1] - prefixSum[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"相关题目-2\"><a href=\"#相关题目-2\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><p><a href=\"https://kamacoder.com/problempage.php?pid=1044/\">开发商购买土地</a></p>\n<p>看起来挺难的，没看懂题目意思，明天再研究。</p>\n"},{"title":"代码随想录--链表","date":"2025-01-24T16:00:00.000Z","updated":"2025-02-04T09:38:40.403Z","description":"代码随想录--链表（上）","_content":"\n\n## 链表基础\n\n​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。\n\n### 移除链表元素\n\n题目链接：[203. 移除链表元素](https://leetcode.cn/problems/remove-linked-list-elements/)\n\n题目描述：一个链表的头节点 `head` 和一个整数 `val` ，删除链表中所有满足 `Node.val == val` 的节点，并返回新的头节点 。\n\n#### 虚拟头节点\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：如果直接处理链表的话，需要考虑头节点，但是加入虚拟头节点就可以按照统一的方式去处理。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        ListNode* dummy=new ListNode(0);\n        ListNode* pre=dummy;\n        pre->next=head;\n        while(head)\n        {\n            if(head->val==val)\n            {\n                pre->next=head->next;\n                ListNode* tem=head;\n                head=head->next;\n                delete tem;\n            }\n            else\n            {\n                pre=head;\n                head=head->next;\n            }\n        }\n        return dummy->next;\n    }\n};\n```\n\n#### 直接操作\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        // 删除头结点\n        while (head != NULL && head->val == val) { // 注意这里不是if\n            ListNode* tmp = head;\n            head = head->next;\n            delete tmp;\n        }\n        // 删除非头结点\n        ListNode* cur = head;\n        while (cur != NULL && cur->next!= NULL) {\n            if (cur->next->val == val) {\n                ListNode* tmp = cur->next;\n                cur->next = cur->next->next;\n                delete tmp;\n            } else {\n                cur = cur->next;\n            }\n        }\n        return head;\n    }\n};\n```\n\n#### 递归解法\n\n时间复杂度：O(n)     空间复杂度：O(n)\n\n题目思路：首先检查头节点的值是否为 val，如果是则移除头节点，答案即为在头节点的后续节点上递归的结果；如果头节点的值不为 val，则答案为头节点与在头节点的后续节点上递归得到的新链表拼接的结果。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        // 基础情况：空链表\n        if (head == nullptr) {\n            return nullptr;\n        }\n        // 递归处理\n        if (head->val == val) {\n            ListNode* newHead = removeElements(head->next, val);\n            delete head;\n            return newHead;\n        } else {\n            head->next = removeElements(head->next, val);\n            return head;\n        }\n    }\n};\n```\n\n### 反转链表\n\n题目链接：[206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/)\n\n题目描述：反转单链表，并返回反转后的链表。\n\n#### 双指针法\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：定义cur和pre指针，pre初始化为NULL，cur指向head，然后反转链表，cur->next指向pre，按逻辑移动。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* tem;\n        ListNode* cur=head;\n        ListNode* pre=NULL;\n        while(cur)\n        {\n            tem=cur->next;\n            cur->next=pre;\n            pre=cur;\n            cur=tem;\n        }\n        return pre;\n    }\n};\n```\n\n#### 递归法\n\n思路和双指针差不多，明天研究一下。\n\n时间复杂度：O(n)     空间复杂度：O(n)\n\n```c++\nclass Solution {\npublic:\n    ListNode* reverse(ListNode* pre,ListNode* cur){\n        if(cur == NULL) return pre;\n        ListNode* temp = cur->next;\n        cur->next = pre;\n        // 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步\n        // pre = cur;\n        // cur = temp;\n        return reverse(cur,temp);\n    }\n    ListNode* reverseList(ListNode* head) {\n        // 和双指针法初始化是一样的逻辑\n        // ListNode* cur = head;\n        // ListNode* pre = NULL;\n        return reverse(NULL, head);\n    }\n\n};\n```\n\n\n\n### 设计链表\n\n题目链接：[707. 设计链表](https://leetcode.cn/problems/design-linked-list/)\n\n题目描述：获取第index个节点的值，添加头节点，添加尾节点，在第 index 个节点之前添加值为 val 的节点，删除链表中的第 index 个节点。\n\n#### 虚拟头节点\n\n``` c++\nclass MyLinkedList {\nprivate:\n    struct LinkedNode {          // 先定义 LinkedNode 结构体\n        int val;\n        LinkedNode* next;\n        LinkedNode(int val) : val(val), next(nullptr) {}\n    };\n    LinkedNode* dummyhead;       // 现在可以使用 LinkedNode 类型\n    int size;\n    \npublic:\n    MyLinkedList() {\n        dummyhead=new LinkedNode(0);\n        size=0;\n    }   \n    int get(int index) {\n        if(index>(size-1) || index<0){\n            return -1;\n        }\n        LinkedNode* cur=dummyhead->next;\n        while(index--){\n            cur=cur->next;\n        }\n        return cur->val;\n    }  \n    void addAtHead(int val) {\n        LinkedNode* newNode = new LinkedNode(val);\n        newNode->next=dummyhead->next;\n        dummyhead->next=newNode;\n        size++;\n    } \n    void addAtTail(int val) {\n        LinkedNode* newNode=new LinkedNode(val);\n        LinkedNode* cur=dummyhead;\n        while(cur->next != NULL)\n        {\n            cur=cur->next;\n        }\n        cur->next=newNode;\n        size++;\n    }   \n    void addAtIndex(int index, int val) {\n        if(index>size) return;\n        if(index<0) index=0;\n        LinkedNode* newNode=new LinkedNode(val);\n        LinkedNode* cur=dummyhead;\n        while(index--){\n            cur=cur->next;\n        }\n        newNode->next=cur->next;\n        cur->next=newNode;\n        size++;\n    }\n    void deleteAtIndex(int index) {\n        if(index>(size-1) || index<0){\n            return;\n        }\n        LinkedNode* cur=dummyhead;\n        while(index--)\n        {\n            cur=cur->next;\n        }\n        LinkedNode* tem=cur->next;\n        cur->next=cur->next->next;\n        delete tem;\n        size--;\n    }\n};\n```\n\n#### 虚拟头节点（双链表）\n\n还未看，直接copy的\n\n``` c++\n//采用循环虚拟结点的双链表实现\nclass MyLinkedList {\npublic:\n    // 定义双向链表节点结构体\n    struct DList {\n        int elem; // 节点存储的元素\n        DList *next; // 指向下一个节点的指针\n        DList *prev; // 指向上一个节点的指针\n        // 构造函数，创建一个值为elem的新节点\n        DList(int elem) : elem(elem), next(nullptr), prev(nullptr) {};\n    };\n\n    // 构造函数，初始化链表\n    MyLinkedList() {\n        sentinelNode = new DList(0); // 创建哨兵节点，不存储有效数据\n        sentinelNode->next = sentinelNode; // 哨兵节点的下一个节点指向自身，形成循环\n        sentinelNode->prev = sentinelNode; // 哨兵节点的上一个节点指向自身，形成循环\n        size = 0; // 初始化链表大小为0\n    }\n\n    // 获取链表中第index个节点的值\n    int get(int index) {\n        if (index > (size - 1) || index < 0) { // 检查索引是否超出范围\n            return -1; // 如果超出范围，返回-1\n        }\n        int num;\n        int mid = size >> 1; // 计算链表中部位置\n        DList *curNode = sentinelNode; // 从哨兵节点开始\n        if (index < mid) { // 如果索引小于中部位置，从前往后遍历\n            for (int i = 0; i < index + 1; i++) {\n                curNode = curNode->next; // 移动到目标节点\n            }\n        } else { // 如果索引大于等于中部位置，从后往前遍历\n            for (int i = 0; i < size - index; i++) {\n                curNode = curNode->prev; // 移动到目标节点\n            }\n        }\n        num = curNode->elem; // 获取目标节点的值\n        return num; // 返回节点的值\n    }\n\n    // 在链表头部添加节点\n    void addAtHead(int val) {\n        DList *newNode = new DList(val); // 创建新节点\n        DList *next = sentinelNode->next; // 获取当前头节点的下一个节点\n        newNode->prev = sentinelNode; // 新节点的上一个节点指向哨兵节点\n        newNode->next = next; // 新节点的下一个节点指向原来的头节点\n        size++; // 链表大小加1\n        sentinelNode->next = newNode; // 哨兵节点的下一个节点指向新节点\n        next->prev = newNode; // 原来的头节点的上一个节点指向新节点\n    }\n\n    // 在链表尾部添加节点\n    void addAtTail(int val) {\n        DList *newNode = new DList(val); // 创建新节点\n        DList *prev = sentinelNode->prev; // 获取当前尾节点的上一个节点\n        newNode->next = sentinelNode; // 新节点的下一个节点指向哨兵节点\n        newNode->prev = prev; // 新节点的上一个节点指向原来的尾节点\n        size++; // 链表大小加1\n        sentinelNode->prev = newNode; // 哨兵节点的上一个节点指向新节点\n        prev->next = newNode; // 原来的尾节点的下一个节点指向新节点\n    }\n\n    // 在链表中的第index个节点之前添加值为val的节点\n    void addAtIndex(int index, int val) {\n        if (index > size) { // 检查索引是否超出范围\n            return; // 如果超出范围，直接返回\n        }\n        if (index <= 0) { // 如果索引为0或负数，在头部添加节点\n            addAtHead(val);\n            return;\n        }\n        int num;\n        int mid = size >> 1; // 计算链表中部位置\n        DList *curNode = sentinelNode; // 从哨兵节点开始\n        if (index < mid) { // 如果索引小于中部位置，从前往后遍历\n            for (int i = 0; i < index; i++) {\n                curNode = curNode->next; // 移动到目标位置的前一个节点\n            }\n            DList *temp = curNode->next; // 获取目标位置的节点\n            DList *newNode = new DList(val); // 创建新节点\n            curNode->next = newNode; // 在目标位置前添加新节点\n            temp->prev = newNode; // 目标位置的节点的前一个节点指向新节点\n            newNode->next = temp; // 新节点的下一个节点指向目标位置的结点\n            newNode->prev = curNode; // 新节点的上一个节点指向当前节点\n        } else { // 如果索引大于等于中部位置，从后往前遍历\n            for (int i = 0; i < size - index; i++) {\n                curNode = curNode->prev; // 移动到目标位置的后一个节点\n            }\n            DList *temp = curNode->prev; // 获取目标位置的节点\n            DList *newNode = new DList(val); // 创建新节点\n            curNode->prev = newNode; // 在目标位置后添加新节点\n            temp->next = newNode; // 目标位置的节点的下一个节点指向新节点\n            newNode->prev = temp; // 新节点的上一个节点指向目标位置的节点\n            newNode->next = curNode; // 新节点的下一个节点指向当前节点\n        }\n        size++; // 链表大小加1\n    }\n\n    // 删除链表中的第index个节点\n    void deleteAtIndex(int index) {\n        if (index > (size - 1) || index < 0) { // 检查索引是否超出范围\n            return; // 如果超出范围，直接返回\n        }\n        int num;\n        int mid = size >> 1; // 计算链表中部位置\n        DList *curNode = sentinelNode; // 从哨兵节点开始\n        if (index < mid) { // 如果索引小于中部位置，从前往后遍历\n            for (int i = 0; i < index; i++) {\n                curNode = curNode->next; // 移动到目标位置的前一个节点\n            }\n            DList *next = curNode->next->next; // 获取目标位置的下一个节点\n            curNode->next = next; // 删除目标位置的节点\n            next->prev = curNode; // 目标位置的下一个节点的前一个节点指向当前节点\n        } else { // 如果索引大于等于中部位置，从后往前遍历\n            for (int i = 0; i < size - index - 1; i++) {\n                curNode = curNode->prev; // 移动到目标位置的后一个节点\n            }\n            DList *prev = curNode->prev->prev; // 获取目标位置的下一个节点\n            curNode->prev = prev; // 删除目标位置的节点\n            prev->next = curNode; // 目标位置的下一个节点的下一个节点指向当前节点\n        }\n        size--; // 链表大小减1\n    }\n\nprivate:\n    int size; // 链表的大小\n    DList *sentinelNode; // 哨兵节点的指针\n};\n```\n\n","source":"_posts/3day.md","raw":"---\ntitle: 代码随想录--链表\ndate: 2025/1/25\ntags: [数据结构与算法,递归,双指针,链表]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--链表（上）\n---\n\n\n## 链表基础\n\n​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。\n\n### 移除链表元素\n\n题目链接：[203. 移除链表元素](https://leetcode.cn/problems/remove-linked-list-elements/)\n\n题目描述：一个链表的头节点 `head` 和一个整数 `val` ，删除链表中所有满足 `Node.val == val` 的节点，并返回新的头节点 。\n\n#### 虚拟头节点\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：如果直接处理链表的话，需要考虑头节点，但是加入虚拟头节点就可以按照统一的方式去处理。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        ListNode* dummy=new ListNode(0);\n        ListNode* pre=dummy;\n        pre->next=head;\n        while(head)\n        {\n            if(head->val==val)\n            {\n                pre->next=head->next;\n                ListNode* tem=head;\n                head=head->next;\n                delete tem;\n            }\n            else\n            {\n                pre=head;\n                head=head->next;\n            }\n        }\n        return dummy->next;\n    }\n};\n```\n\n#### 直接操作\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        // 删除头结点\n        while (head != NULL && head->val == val) { // 注意这里不是if\n            ListNode* tmp = head;\n            head = head->next;\n            delete tmp;\n        }\n        // 删除非头结点\n        ListNode* cur = head;\n        while (cur != NULL && cur->next!= NULL) {\n            if (cur->next->val == val) {\n                ListNode* tmp = cur->next;\n                cur->next = cur->next->next;\n                delete tmp;\n            } else {\n                cur = cur->next;\n            }\n        }\n        return head;\n    }\n};\n```\n\n#### 递归解法\n\n时间复杂度：O(n)     空间复杂度：O(n)\n\n题目思路：首先检查头节点的值是否为 val，如果是则移除头节点，答案即为在头节点的后续节点上递归的结果；如果头节点的值不为 val，则答案为头节点与在头节点的后续节点上递归得到的新链表拼接的结果。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        // 基础情况：空链表\n        if (head == nullptr) {\n            return nullptr;\n        }\n        // 递归处理\n        if (head->val == val) {\n            ListNode* newHead = removeElements(head->next, val);\n            delete head;\n            return newHead;\n        } else {\n            head->next = removeElements(head->next, val);\n            return head;\n        }\n    }\n};\n```\n\n### 反转链表\n\n题目链接：[206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/)\n\n题目描述：反转单链表，并返回反转后的链表。\n\n#### 双指针法\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：定义cur和pre指针，pre初始化为NULL，cur指向head，然后反转链表，cur->next指向pre，按逻辑移动。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* tem;\n        ListNode* cur=head;\n        ListNode* pre=NULL;\n        while(cur)\n        {\n            tem=cur->next;\n            cur->next=pre;\n            pre=cur;\n            cur=tem;\n        }\n        return pre;\n    }\n};\n```\n\n#### 递归法\n\n思路和双指针差不多，明天研究一下。\n\n时间复杂度：O(n)     空间复杂度：O(n)\n\n```c++\nclass Solution {\npublic:\n    ListNode* reverse(ListNode* pre,ListNode* cur){\n        if(cur == NULL) return pre;\n        ListNode* temp = cur->next;\n        cur->next = pre;\n        // 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步\n        // pre = cur;\n        // cur = temp;\n        return reverse(cur,temp);\n    }\n    ListNode* reverseList(ListNode* head) {\n        // 和双指针法初始化是一样的逻辑\n        // ListNode* cur = head;\n        // ListNode* pre = NULL;\n        return reverse(NULL, head);\n    }\n\n};\n```\n\n\n\n### 设计链表\n\n题目链接：[707. 设计链表](https://leetcode.cn/problems/design-linked-list/)\n\n题目描述：获取第index个节点的值，添加头节点，添加尾节点，在第 index 个节点之前添加值为 val 的节点，删除链表中的第 index 个节点。\n\n#### 虚拟头节点\n\n``` c++\nclass MyLinkedList {\nprivate:\n    struct LinkedNode {          // 先定义 LinkedNode 结构体\n        int val;\n        LinkedNode* next;\n        LinkedNode(int val) : val(val), next(nullptr) {}\n    };\n    LinkedNode* dummyhead;       // 现在可以使用 LinkedNode 类型\n    int size;\n    \npublic:\n    MyLinkedList() {\n        dummyhead=new LinkedNode(0);\n        size=0;\n    }   \n    int get(int index) {\n        if(index>(size-1) || index<0){\n            return -1;\n        }\n        LinkedNode* cur=dummyhead->next;\n        while(index--){\n            cur=cur->next;\n        }\n        return cur->val;\n    }  \n    void addAtHead(int val) {\n        LinkedNode* newNode = new LinkedNode(val);\n        newNode->next=dummyhead->next;\n        dummyhead->next=newNode;\n        size++;\n    } \n    void addAtTail(int val) {\n        LinkedNode* newNode=new LinkedNode(val);\n        LinkedNode* cur=dummyhead;\n        while(cur->next != NULL)\n        {\n            cur=cur->next;\n        }\n        cur->next=newNode;\n        size++;\n    }   \n    void addAtIndex(int index, int val) {\n        if(index>size) return;\n        if(index<0) index=0;\n        LinkedNode* newNode=new LinkedNode(val);\n        LinkedNode* cur=dummyhead;\n        while(index--){\n            cur=cur->next;\n        }\n        newNode->next=cur->next;\n        cur->next=newNode;\n        size++;\n    }\n    void deleteAtIndex(int index) {\n        if(index>(size-1) || index<0){\n            return;\n        }\n        LinkedNode* cur=dummyhead;\n        while(index--)\n        {\n            cur=cur->next;\n        }\n        LinkedNode* tem=cur->next;\n        cur->next=cur->next->next;\n        delete tem;\n        size--;\n    }\n};\n```\n\n#### 虚拟头节点（双链表）\n\n还未看，直接copy的\n\n``` c++\n//采用循环虚拟结点的双链表实现\nclass MyLinkedList {\npublic:\n    // 定义双向链表节点结构体\n    struct DList {\n        int elem; // 节点存储的元素\n        DList *next; // 指向下一个节点的指针\n        DList *prev; // 指向上一个节点的指针\n        // 构造函数，创建一个值为elem的新节点\n        DList(int elem) : elem(elem), next(nullptr), prev(nullptr) {};\n    };\n\n    // 构造函数，初始化链表\n    MyLinkedList() {\n        sentinelNode = new DList(0); // 创建哨兵节点，不存储有效数据\n        sentinelNode->next = sentinelNode; // 哨兵节点的下一个节点指向自身，形成循环\n        sentinelNode->prev = sentinelNode; // 哨兵节点的上一个节点指向自身，形成循环\n        size = 0; // 初始化链表大小为0\n    }\n\n    // 获取链表中第index个节点的值\n    int get(int index) {\n        if (index > (size - 1) || index < 0) { // 检查索引是否超出范围\n            return -1; // 如果超出范围，返回-1\n        }\n        int num;\n        int mid = size >> 1; // 计算链表中部位置\n        DList *curNode = sentinelNode; // 从哨兵节点开始\n        if (index < mid) { // 如果索引小于中部位置，从前往后遍历\n            for (int i = 0; i < index + 1; i++) {\n                curNode = curNode->next; // 移动到目标节点\n            }\n        } else { // 如果索引大于等于中部位置，从后往前遍历\n            for (int i = 0; i < size - index; i++) {\n                curNode = curNode->prev; // 移动到目标节点\n            }\n        }\n        num = curNode->elem; // 获取目标节点的值\n        return num; // 返回节点的值\n    }\n\n    // 在链表头部添加节点\n    void addAtHead(int val) {\n        DList *newNode = new DList(val); // 创建新节点\n        DList *next = sentinelNode->next; // 获取当前头节点的下一个节点\n        newNode->prev = sentinelNode; // 新节点的上一个节点指向哨兵节点\n        newNode->next = next; // 新节点的下一个节点指向原来的头节点\n        size++; // 链表大小加1\n        sentinelNode->next = newNode; // 哨兵节点的下一个节点指向新节点\n        next->prev = newNode; // 原来的头节点的上一个节点指向新节点\n    }\n\n    // 在链表尾部添加节点\n    void addAtTail(int val) {\n        DList *newNode = new DList(val); // 创建新节点\n        DList *prev = sentinelNode->prev; // 获取当前尾节点的上一个节点\n        newNode->next = sentinelNode; // 新节点的下一个节点指向哨兵节点\n        newNode->prev = prev; // 新节点的上一个节点指向原来的尾节点\n        size++; // 链表大小加1\n        sentinelNode->prev = newNode; // 哨兵节点的上一个节点指向新节点\n        prev->next = newNode; // 原来的尾节点的下一个节点指向新节点\n    }\n\n    // 在链表中的第index个节点之前添加值为val的节点\n    void addAtIndex(int index, int val) {\n        if (index > size) { // 检查索引是否超出范围\n            return; // 如果超出范围，直接返回\n        }\n        if (index <= 0) { // 如果索引为0或负数，在头部添加节点\n            addAtHead(val);\n            return;\n        }\n        int num;\n        int mid = size >> 1; // 计算链表中部位置\n        DList *curNode = sentinelNode; // 从哨兵节点开始\n        if (index < mid) { // 如果索引小于中部位置，从前往后遍历\n            for (int i = 0; i < index; i++) {\n                curNode = curNode->next; // 移动到目标位置的前一个节点\n            }\n            DList *temp = curNode->next; // 获取目标位置的节点\n            DList *newNode = new DList(val); // 创建新节点\n            curNode->next = newNode; // 在目标位置前添加新节点\n            temp->prev = newNode; // 目标位置的节点的前一个节点指向新节点\n            newNode->next = temp; // 新节点的下一个节点指向目标位置的结点\n            newNode->prev = curNode; // 新节点的上一个节点指向当前节点\n        } else { // 如果索引大于等于中部位置，从后往前遍历\n            for (int i = 0; i < size - index; i++) {\n                curNode = curNode->prev; // 移动到目标位置的后一个节点\n            }\n            DList *temp = curNode->prev; // 获取目标位置的节点\n            DList *newNode = new DList(val); // 创建新节点\n            curNode->prev = newNode; // 在目标位置后添加新节点\n            temp->next = newNode; // 目标位置的节点的下一个节点指向新节点\n            newNode->prev = temp; // 新节点的上一个节点指向目标位置的节点\n            newNode->next = curNode; // 新节点的下一个节点指向当前节点\n        }\n        size++; // 链表大小加1\n    }\n\n    // 删除链表中的第index个节点\n    void deleteAtIndex(int index) {\n        if (index > (size - 1) || index < 0) { // 检查索引是否超出范围\n            return; // 如果超出范围，直接返回\n        }\n        int num;\n        int mid = size >> 1; // 计算链表中部位置\n        DList *curNode = sentinelNode; // 从哨兵节点开始\n        if (index < mid) { // 如果索引小于中部位置，从前往后遍历\n            for (int i = 0; i < index; i++) {\n                curNode = curNode->next; // 移动到目标位置的前一个节点\n            }\n            DList *next = curNode->next->next; // 获取目标位置的下一个节点\n            curNode->next = next; // 删除目标位置的节点\n            next->prev = curNode; // 目标位置的下一个节点的前一个节点指向当前节点\n        } else { // 如果索引大于等于中部位置，从后往前遍历\n            for (int i = 0; i < size - index - 1; i++) {\n                curNode = curNode->prev; // 移动到目标位置的后一个节点\n            }\n            DList *prev = curNode->prev->prev; // 获取目标位置的下一个节点\n            curNode->prev = prev; // 删除目标位置的节点\n            prev->next = curNode; // 目标位置的下一个节点的下一个节点指向当前节点\n        }\n        size--; // 链表大小减1\n    }\n\nprivate:\n    int size; // 链表的大小\n    DList *sentinelNode; // 哨兵节点的指针\n};\n```\n\n","slug":"3day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqum0007a4wmh8vw3vs0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"链表基础\"><a href=\"#链表基础\" class=\"headerlink\" title=\"链表基础\"></a>链表基础</h2><p>​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。</p>\n<h3 id=\"移除链表元素\"><a href=\"#移除链表元素\" class=\"headerlink\" title=\"移除链表元素\"></a>移除链表元素</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">203. 移除链表元素</a></p>\n<p>题目描述：一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回新的头节点 。</p>\n<h4 id=\"虚拟头节点\"><a href=\"#虚拟头节点\" class=\"headerlink\" title=\"虚拟头节点\"></a>虚拟头节点</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：如果直接处理链表的话，需要考虑头节点，但是加入虚拟头节点就可以按照统一的方式去处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeElements</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode* pre=dummy;</span><br><span class=\"line\">        pre-&gt;next=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head-&gt;val==val)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre-&gt;next=head-&gt;next;</span><br><span class=\"line\">                ListNode* tem=head;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> tem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre=head;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"直接操作\"><a href=\"#直接操作\" class=\"headerlink\" title=\"直接操作\"></a>直接操作</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeElements</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head != <span class=\"literal\">NULL</span> &amp;&amp; head-&gt;val == val) &#123; <span class=\"comment\">// 注意这里不是if</span></span><br><span class=\"line\">            ListNode* tmp = head;</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除非头结点</span></span><br><span class=\"line\">        ListNode* cur = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"literal\">NULL</span> &amp;&amp; cur-&gt;next!= <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur-&gt;next-&gt;val == val) &#123;</span><br><span class=\"line\">                ListNode* tmp = cur-&gt;next;</span><br><span class=\"line\">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> tmp;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur = cur-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"递归解法\"><a href=\"#递归解法\" class=\"headerlink\" title=\"递归解法\"></a>递归解法</h4><p>时间复杂度：O(n)     空间复杂度：O(n)</p>\n<p>题目思路：首先检查头节点的值是否为 val，如果是则移除头节点，答案即为在头节点的后续节点上递归的结果；如果头节点的值不为 val，则答案为头节点与在头节点的后续节点上递归得到的新链表拼接的结果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeElements</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基础情况：空链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head-&gt;val == val) &#123;</span><br><span class=\"line\">            ListNode* newHead = <span class=\"built_in\">removeElements</span>(head-&gt;next, val);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> head;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head-&gt;next = <span class=\"built_in\">removeElements</span>(head-&gt;next, val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">206. 反转链表</a></p>\n<p>题目描述：反转单链表，并返回反转后的链表。</p>\n<h4 id=\"双指针法\"><a href=\"#双指针法\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：定义cur和pre指针，pre初始化为NULL，cur指向head，然后反转链表，cur-&gt;next指向pre，按逻辑移动。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* tem;</span><br><span class=\"line\">        ListNode* cur=head;</span><br><span class=\"line\">        ListNode* pre=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tem=cur-&gt;next;</span><br><span class=\"line\">            cur-&gt;next=pre;</span><br><span class=\"line\">            pre=cur;</span><br><span class=\"line\">            cur=tem;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h4><p>思路和双指针差不多，明天研究一下。</p>\n<p>时间复杂度：O(n)     空间复杂度：O(n)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverse</span><span class=\"params\">(ListNode* pre,ListNode* cur)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">        ListNode* temp = cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next = pre;</span><br><span class=\"line\">        <span class=\"comment\">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></span><br><span class=\"line\">        <span class=\"comment\">// pre = cur;</span></span><br><span class=\"line\">        <span class=\"comment\">// cur = temp;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">reverse</span>(cur,temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 和双指针法初始化是一样的逻辑</span></span><br><span class=\"line\">        <span class=\"comment\">// ListNode* cur = head;</span></span><br><span class=\"line\">        <span class=\"comment\">// ListNode* pre = NULL;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">reverse</span>(<span class=\"literal\">NULL</span>, head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设计链表\"><a href=\"#设计链表\" class=\"headerlink\" title=\"设计链表\"></a>设计链表</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/design-linked-list/\">707. 设计链表</a></p>\n<p>题目描述：获取第index个节点的值，添加头节点，添加尾节点，在第 index 个节点之前添加值为 val 的节点，删除链表中的第 index 个节点。</p>\n<h4 id=\"虚拟头节点-1\"><a href=\"#虚拟头节点-1\" class=\"headerlink\" title=\"虚拟头节点\"></a>虚拟头节点</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedNode</span> &#123;          <span class=\"comment\">// 先定义 LinkedNode 结构体</span></span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        LinkedNode* next;</span><br><span class=\"line\">        <span class=\"built_in\">LinkedNode</span>(<span class=\"type\">int</span> val) : <span class=\"built_in\">val</span>(val), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    LinkedNode* dummyhead;       <span class=\"comment\">// 现在可以使用 LinkedNode 类型</span></span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyLinkedList</span>() &#123;</span><br><span class=\"line\">        dummyhead=<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        size=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;(size<span class=\"number\">-1</span>) || index&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LinkedNode* cur=dummyhead-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)&#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur-&gt;val;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode* newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        newNode-&gt;next=dummyhead-&gt;next;</span><br><span class=\"line\">        dummyhead-&gt;next=newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode* newNode=<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        LinkedNode* cur=dummyhead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur-&gt;next=newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>) index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        LinkedNode* newNode=<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        LinkedNode* cur=dummyhead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)&#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode-&gt;next=cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next=newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;(size<span class=\"number\">-1</span>) || index&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LinkedNode* cur=dummyhead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LinkedNode* tem=cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> tem;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"虚拟头节点（双链表）\"><a href=\"#虚拟头节点（双链表）\" class=\"headerlink\" title=\"虚拟头节点（双链表）\"></a>虚拟头节点（双链表）</h4><p>还未看，直接copy的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//采用循环虚拟结点的双链表实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 定义双向链表节点结构体</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DList</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> elem; <span class=\"comment\">// 节点存储的元素</span></span><br><span class=\"line\">        DList *next; <span class=\"comment\">// 指向下一个节点的指针</span></span><br><span class=\"line\">        DList *prev; <span class=\"comment\">// 指向上一个节点的指针</span></span><br><span class=\"line\">        <span class=\"comment\">// 构造函数，创建一个值为elem的新节点</span></span><br><span class=\"line\">        <span class=\"built_in\">DList</span>(<span class=\"type\">int</span> elem) : <span class=\"built_in\">elem</span>(elem), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">prev</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数，初始化链表</span></span><br><span class=\"line\">    <span class=\"built_in\">MyLinkedList</span>() &#123;</span><br><span class=\"line\">        sentinelNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 创建哨兵节点，不存储有效数据</span></span><br><span class=\"line\">        sentinelNode-&gt;next = sentinelNode; <span class=\"comment\">// 哨兵节点的下一个节点指向自身，形成循环</span></span><br><span class=\"line\">        sentinelNode-&gt;prev = sentinelNode; <span class=\"comment\">// 哨兵节点的上一个节点指向自身，形成循环</span></span><br><span class=\"line\">        size = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化链表大小为0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取链表中第index个节点的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; (size - <span class=\"number\">1</span>) || index &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 检查索引是否超出范围</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 如果超出范围，返回-1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = size &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 计算链表中部位置</span></span><br><span class=\"line\">        DList *curNode = sentinelNode; <span class=\"comment\">// 从哨兵节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; mid) &#123; <span class=\"comment\">// 如果索引小于中部位置，从前往后遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; index + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;next; <span class=\"comment\">// 移动到目标节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果索引大于等于中部位置，从后往前遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;prev; <span class=\"comment\">// 移动到目标节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = curNode-&gt;elem; <span class=\"comment\">// 获取目标节点的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> num; <span class=\"comment\">// 返回节点的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在链表头部添加节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">        DList *next = sentinelNode-&gt;next; <span class=\"comment\">// 获取当前头节点的下一个节点</span></span><br><span class=\"line\">        newNode-&gt;prev = sentinelNode; <span class=\"comment\">// 新节点的上一个节点指向哨兵节点</span></span><br><span class=\"line\">        newNode-&gt;next = next; <span class=\"comment\">// 新节点的下一个节点指向原来的头节点</span></span><br><span class=\"line\">        size++; <span class=\"comment\">// 链表大小加1</span></span><br><span class=\"line\">        sentinelNode-&gt;next = newNode; <span class=\"comment\">// 哨兵节点的下一个节点指向新节点</span></span><br><span class=\"line\">        next-&gt;prev = newNode; <span class=\"comment\">// 原来的头节点的上一个节点指向新节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在链表尾部添加节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">        DList *prev = sentinelNode-&gt;prev; <span class=\"comment\">// 获取当前尾节点的上一个节点</span></span><br><span class=\"line\">        newNode-&gt;next = sentinelNode; <span class=\"comment\">// 新节点的下一个节点指向哨兵节点</span></span><br><span class=\"line\">        newNode-&gt;prev = prev; <span class=\"comment\">// 新节点的上一个节点指向原来的尾节点</span></span><br><span class=\"line\">        size++; <span class=\"comment\">// 链表大小加1</span></span><br><span class=\"line\">        sentinelNode-&gt;prev = newNode; <span class=\"comment\">// 哨兵节点的上一个节点指向新节点</span></span><br><span class=\"line\">        prev-&gt;next = newNode; <span class=\"comment\">// 原来的尾节点的下一个节点指向新节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在链表中的第index个节点之前添加值为val的节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size) &#123; <span class=\"comment\">// 检查索引是否超出范围</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果超出范围，直接返回</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果索引为0或负数，在头部添加节点</span></span><br><span class=\"line\">            <span class=\"built_in\">addAtHead</span>(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = size &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 计算链表中部位置</span></span><br><span class=\"line\">        DList *curNode = sentinelNode; <span class=\"comment\">// 从哨兵节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; mid) &#123; <span class=\"comment\">// 如果索引小于中部位置，从前往后遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;next; <span class=\"comment\">// 移动到目标位置的前一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *temp = curNode-&gt;next; <span class=\"comment\">// 获取目标位置的节点</span></span><br><span class=\"line\">            DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">            curNode-&gt;next = newNode; <span class=\"comment\">// 在目标位置前添加新节点</span></span><br><span class=\"line\">            temp-&gt;prev = newNode; <span class=\"comment\">// 目标位置的节点的前一个节点指向新节点</span></span><br><span class=\"line\">            newNode-&gt;next = temp; <span class=\"comment\">// 新节点的下一个节点指向目标位置的结点</span></span><br><span class=\"line\">            newNode-&gt;prev = curNode; <span class=\"comment\">// 新节点的上一个节点指向当前节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果索引大于等于中部位置，从后往前遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;prev; <span class=\"comment\">// 移动到目标位置的后一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *temp = curNode-&gt;prev; <span class=\"comment\">// 获取目标位置的节点</span></span><br><span class=\"line\">            DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">            curNode-&gt;prev = newNode; <span class=\"comment\">// 在目标位置后添加新节点</span></span><br><span class=\"line\">            temp-&gt;next = newNode; <span class=\"comment\">// 目标位置的节点的下一个节点指向新节点</span></span><br><span class=\"line\">            newNode-&gt;prev = temp; <span class=\"comment\">// 新节点的上一个节点指向目标位置的节点</span></span><br><span class=\"line\">            newNode-&gt;next = curNode; <span class=\"comment\">// 新节点的下一个节点指向当前节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size++; <span class=\"comment\">// 链表大小加1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除链表中的第index个节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; (size - <span class=\"number\">1</span>) || index &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 检查索引是否超出范围</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果超出范围，直接返回</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = size &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 计算链表中部位置</span></span><br><span class=\"line\">        DList *curNode = sentinelNode; <span class=\"comment\">// 从哨兵节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; mid) &#123; <span class=\"comment\">// 如果索引小于中部位置，从前往后遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;next; <span class=\"comment\">// 移动到目标位置的前一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *next = curNode-&gt;next-&gt;next; <span class=\"comment\">// 获取目标位置的下一个节点</span></span><br><span class=\"line\">            curNode-&gt;next = next; <span class=\"comment\">// 删除目标位置的节点</span></span><br><span class=\"line\">            next-&gt;prev = curNode; <span class=\"comment\">// 目标位置的下一个节点的前一个节点指向当前节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果索引大于等于中部位置，从后往前遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - index - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;prev; <span class=\"comment\">// 移动到目标位置的后一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *prev = curNode-&gt;prev-&gt;prev; <span class=\"comment\">// 获取目标位置的下一个节点</span></span><br><span class=\"line\">            curNode-&gt;prev = prev; <span class=\"comment\">// 删除目标位置的节点</span></span><br><span class=\"line\">            prev-&gt;next = curNode; <span class=\"comment\">// 目标位置的下一个节点的下一个节点指向当前节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size--; <span class=\"comment\">// 链表大小减1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> size; <span class=\"comment\">// 链表的大小</span></span><br><span class=\"line\">    DList *sentinelNode; <span class=\"comment\">// 哨兵节点的指针</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</div>","excerpt":"","more":"<h2 id=\"链表基础\"><a href=\"#链表基础\" class=\"headerlink\" title=\"链表基础\"></a>链表基础</h2><p>​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。</p>\n<h3 id=\"移除链表元素\"><a href=\"#移除链表元素\" class=\"headerlink\" title=\"移除链表元素\"></a>移除链表元素</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">203. 移除链表元素</a></p>\n<p>题目描述：一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回新的头节点 。</p>\n<h4 id=\"虚拟头节点\"><a href=\"#虚拟头节点\" class=\"headerlink\" title=\"虚拟头节点\"></a>虚拟头节点</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：如果直接处理链表的话，需要考虑头节点，但是加入虚拟头节点就可以按照统一的方式去处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeElements</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode* pre=dummy;</span><br><span class=\"line\">        pre-&gt;next=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head-&gt;val==val)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre-&gt;next=head-&gt;next;</span><br><span class=\"line\">                ListNode* tem=head;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> tem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre=head;</span><br><span class=\"line\">                head=head-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"直接操作\"><a href=\"#直接操作\" class=\"headerlink\" title=\"直接操作\"></a>直接操作</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeElements</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head != <span class=\"literal\">NULL</span> &amp;&amp; head-&gt;val == val) &#123; <span class=\"comment\">// 注意这里不是if</span></span><br><span class=\"line\">            ListNode* tmp = head;</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除非头结点</span></span><br><span class=\"line\">        ListNode* cur = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"literal\">NULL</span> &amp;&amp; cur-&gt;next!= <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur-&gt;next-&gt;val == val) &#123;</span><br><span class=\"line\">                ListNode* tmp = cur-&gt;next;</span><br><span class=\"line\">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> tmp;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur = cur-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"递归解法\"><a href=\"#递归解法\" class=\"headerlink\" title=\"递归解法\"></a>递归解法</h4><p>时间复杂度：O(n)     空间复杂度：O(n)</p>\n<p>题目思路：首先检查头节点的值是否为 val，如果是则移除头节点，答案即为在头节点的后续节点上递归的结果；如果头节点的值不为 val，则答案为头节点与在头节点的后续节点上递归得到的新链表拼接的结果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeElements</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基础情况：空链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head-&gt;val == val) &#123;</span><br><span class=\"line\">            ListNode* newHead = <span class=\"built_in\">removeElements</span>(head-&gt;next, val);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> head;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head-&gt;next = <span class=\"built_in\">removeElements</span>(head-&gt;next, val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">206. 反转链表</a></p>\n<p>题目描述：反转单链表，并返回反转后的链表。</p>\n<h4 id=\"双指针法\"><a href=\"#双指针法\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：定义cur和pre指针，pre初始化为NULL，cur指向head，然后反转链表，cur-&gt;next指向pre，按逻辑移动。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* tem;</span><br><span class=\"line\">        ListNode* cur=head;</span><br><span class=\"line\">        ListNode* pre=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tem=cur-&gt;next;</span><br><span class=\"line\">            cur-&gt;next=pre;</span><br><span class=\"line\">            pre=cur;</span><br><span class=\"line\">            cur=tem;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"递归法\"><a href=\"#递归法\" class=\"headerlink\" title=\"递归法\"></a>递归法</h4><p>思路和双指针差不多，明天研究一下。</p>\n<p>时间复杂度：O(n)     空间复杂度：O(n)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverse</span><span class=\"params\">(ListNode* pre,ListNode* cur)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">        ListNode* temp = cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next = pre;</span><br><span class=\"line\">        <span class=\"comment\">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></span><br><span class=\"line\">        <span class=\"comment\">// pre = cur;</span></span><br><span class=\"line\">        <span class=\"comment\">// cur = temp;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">reverse</span>(cur,temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 和双指针法初始化是一样的逻辑</span></span><br><span class=\"line\">        <span class=\"comment\">// ListNode* cur = head;</span></span><br><span class=\"line\">        <span class=\"comment\">// ListNode* pre = NULL;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">reverse</span>(<span class=\"literal\">NULL</span>, head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设计链表\"><a href=\"#设计链表\" class=\"headerlink\" title=\"设计链表\"></a>设计链表</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/design-linked-list/\">707. 设计链表</a></p>\n<p>题目描述：获取第index个节点的值，添加头节点，添加尾节点，在第 index 个节点之前添加值为 val 的节点，删除链表中的第 index 个节点。</p>\n<h4 id=\"虚拟头节点-1\"><a href=\"#虚拟头节点-1\" class=\"headerlink\" title=\"虚拟头节点\"></a>虚拟头节点</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedNode</span> &#123;          <span class=\"comment\">// 先定义 LinkedNode 结构体</span></span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        LinkedNode* next;</span><br><span class=\"line\">        <span class=\"built_in\">LinkedNode</span>(<span class=\"type\">int</span> val) : <span class=\"built_in\">val</span>(val), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    LinkedNode* dummyhead;       <span class=\"comment\">// 现在可以使用 LinkedNode 类型</span></span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyLinkedList</span>() &#123;</span><br><span class=\"line\">        dummyhead=<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        size=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;(size<span class=\"number\">-1</span>) || index&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LinkedNode* cur=dummyhead-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)&#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur-&gt;val;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode* newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        newNode-&gt;next=dummyhead-&gt;next;</span><br><span class=\"line\">        dummyhead-&gt;next=newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode* newNode=<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        LinkedNode* cur=dummyhead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur-&gt;next=newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>) index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        LinkedNode* newNode=<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        LinkedNode* cur=dummyhead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)&#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode-&gt;next=cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next=newNode;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&gt;(size<span class=\"number\">-1</span>) || index&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LinkedNode* cur=dummyhead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LinkedNode* tem=cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> tem;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"虚拟头节点（双链表）\"><a href=\"#虚拟头节点（双链表）\" class=\"headerlink\" title=\"虚拟头节点（双链表）\"></a>虚拟头节点（双链表）</h4><p>还未看，直接copy的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//采用循环虚拟结点的双链表实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 定义双向链表节点结构体</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DList</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> elem; <span class=\"comment\">// 节点存储的元素</span></span><br><span class=\"line\">        DList *next; <span class=\"comment\">// 指向下一个节点的指针</span></span><br><span class=\"line\">        DList *prev; <span class=\"comment\">// 指向上一个节点的指针</span></span><br><span class=\"line\">        <span class=\"comment\">// 构造函数，创建一个值为elem的新节点</span></span><br><span class=\"line\">        <span class=\"built_in\">DList</span>(<span class=\"type\">int</span> elem) : <span class=\"built_in\">elem</span>(elem), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">prev</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数，初始化链表</span></span><br><span class=\"line\">    <span class=\"built_in\">MyLinkedList</span>() &#123;</span><br><span class=\"line\">        sentinelNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 创建哨兵节点，不存储有效数据</span></span><br><span class=\"line\">        sentinelNode-&gt;next = sentinelNode; <span class=\"comment\">// 哨兵节点的下一个节点指向自身，形成循环</span></span><br><span class=\"line\">        sentinelNode-&gt;prev = sentinelNode; <span class=\"comment\">// 哨兵节点的上一个节点指向自身，形成循环</span></span><br><span class=\"line\">        size = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化链表大小为0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取链表中第index个节点的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; (size - <span class=\"number\">1</span>) || index &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 检查索引是否超出范围</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 如果超出范围，返回-1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = size &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 计算链表中部位置</span></span><br><span class=\"line\">        DList *curNode = sentinelNode; <span class=\"comment\">// 从哨兵节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; mid) &#123; <span class=\"comment\">// 如果索引小于中部位置，从前往后遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; index + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;next; <span class=\"comment\">// 移动到目标节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果索引大于等于中部位置，从后往前遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;prev; <span class=\"comment\">// 移动到目标节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num = curNode-&gt;elem; <span class=\"comment\">// 获取目标节点的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> num; <span class=\"comment\">// 返回节点的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在链表头部添加节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">        DList *next = sentinelNode-&gt;next; <span class=\"comment\">// 获取当前头节点的下一个节点</span></span><br><span class=\"line\">        newNode-&gt;prev = sentinelNode; <span class=\"comment\">// 新节点的上一个节点指向哨兵节点</span></span><br><span class=\"line\">        newNode-&gt;next = next; <span class=\"comment\">// 新节点的下一个节点指向原来的头节点</span></span><br><span class=\"line\">        size++; <span class=\"comment\">// 链表大小加1</span></span><br><span class=\"line\">        sentinelNode-&gt;next = newNode; <span class=\"comment\">// 哨兵节点的下一个节点指向新节点</span></span><br><span class=\"line\">        next-&gt;prev = newNode; <span class=\"comment\">// 原来的头节点的上一个节点指向新节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在链表尾部添加节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">        DList *prev = sentinelNode-&gt;prev; <span class=\"comment\">// 获取当前尾节点的上一个节点</span></span><br><span class=\"line\">        newNode-&gt;next = sentinelNode; <span class=\"comment\">// 新节点的下一个节点指向哨兵节点</span></span><br><span class=\"line\">        newNode-&gt;prev = prev; <span class=\"comment\">// 新节点的上一个节点指向原来的尾节点</span></span><br><span class=\"line\">        size++; <span class=\"comment\">// 链表大小加1</span></span><br><span class=\"line\">        sentinelNode-&gt;prev = newNode; <span class=\"comment\">// 哨兵节点的上一个节点指向新节点</span></span><br><span class=\"line\">        prev-&gt;next = newNode; <span class=\"comment\">// 原来的尾节点的下一个节点指向新节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在链表中的第index个节点之前添加值为val的节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size) &#123; <span class=\"comment\">// 检查索引是否超出范围</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果超出范围，直接返回</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果索引为0或负数，在头部添加节点</span></span><br><span class=\"line\">            <span class=\"built_in\">addAtHead</span>(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = size &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 计算链表中部位置</span></span><br><span class=\"line\">        DList *curNode = sentinelNode; <span class=\"comment\">// 从哨兵节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; mid) &#123; <span class=\"comment\">// 如果索引小于中部位置，从前往后遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;next; <span class=\"comment\">// 移动到目标位置的前一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *temp = curNode-&gt;next; <span class=\"comment\">// 获取目标位置的节点</span></span><br><span class=\"line\">            DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">            curNode-&gt;next = newNode; <span class=\"comment\">// 在目标位置前添加新节点</span></span><br><span class=\"line\">            temp-&gt;prev = newNode; <span class=\"comment\">// 目标位置的节点的前一个节点指向新节点</span></span><br><span class=\"line\">            newNode-&gt;next = temp; <span class=\"comment\">// 新节点的下一个节点指向目标位置的结点</span></span><br><span class=\"line\">            newNode-&gt;prev = curNode; <span class=\"comment\">// 新节点的上一个节点指向当前节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果索引大于等于中部位置，从后往前遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;prev; <span class=\"comment\">// 移动到目标位置的后一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *temp = curNode-&gt;prev; <span class=\"comment\">// 获取目标位置的节点</span></span><br><span class=\"line\">            DList *newNode = <span class=\"keyword\">new</span> <span class=\"built_in\">DList</span>(val); <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">            curNode-&gt;prev = newNode; <span class=\"comment\">// 在目标位置后添加新节点</span></span><br><span class=\"line\">            temp-&gt;next = newNode; <span class=\"comment\">// 目标位置的节点的下一个节点指向新节点</span></span><br><span class=\"line\">            newNode-&gt;prev = temp; <span class=\"comment\">// 新节点的上一个节点指向目标位置的节点</span></span><br><span class=\"line\">            newNode-&gt;next = curNode; <span class=\"comment\">// 新节点的下一个节点指向当前节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size++; <span class=\"comment\">// 链表大小加1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除链表中的第index个节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; (size - <span class=\"number\">1</span>) || index &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 检查索引是否超出范围</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果超出范围，直接返回</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = size &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 计算链表中部位置</span></span><br><span class=\"line\">        DList *curNode = sentinelNode; <span class=\"comment\">// 从哨兵节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; mid) &#123; <span class=\"comment\">// 如果索引小于中部位置，从前往后遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;next; <span class=\"comment\">// 移动到目标位置的前一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *next = curNode-&gt;next-&gt;next; <span class=\"comment\">// 获取目标位置的下一个节点</span></span><br><span class=\"line\">            curNode-&gt;next = next; <span class=\"comment\">// 删除目标位置的节点</span></span><br><span class=\"line\">            next-&gt;prev = curNode; <span class=\"comment\">// 目标位置的下一个节点的前一个节点指向当前节点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果索引大于等于中部位置，从后往前遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - index - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                curNode = curNode-&gt;prev; <span class=\"comment\">// 移动到目标位置的后一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DList *prev = curNode-&gt;prev-&gt;prev; <span class=\"comment\">// 获取目标位置的下一个节点</span></span><br><span class=\"line\">            curNode-&gt;prev = prev; <span class=\"comment\">// 删除目标位置的节点</span></span><br><span class=\"line\">            prev-&gt;next = curNode; <span class=\"comment\">// 目标位置的下一个节点的下一个节点指向当前节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size--; <span class=\"comment\">// 链表大小减1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> size; <span class=\"comment\">// 链表的大小</span></span><br><span class=\"line\">    DList *sentinelNode; <span class=\"comment\">// 哨兵节点的指针</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录--哈希表","date":"2025-02-03T06:10:17.000Z","updated":"2025-02-04T09:37:39.674Z","description":"代码随想录--哈希表（上）","_content":"\n## 哈希表\n\n​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值**「key-value」**而直接进行访问的**数据结构**。\n\n### 有效的字母异位词\n\n题目链接：[242. 有效的字母异位词](https://leetcode.cn/problems/remove-linked-list-elements/)\n\n题目描述：给定两个字符串 `s` 和 `t` ，编写一个函数来判断 `t` 是否是 `s` 的 字母异位词。\n\n题目思路：创建一个哈希表，表长为26，哈希函数采用直接定址法，都不用处理冲突，还是比较简单的。直接排序，看是否两个数组相等应该也可以吧。\n\n``` c++\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        int n=s.size(),m=t.size(),q[26]={0};\n        if(m!=n) return false;\n        for(int i=0;i<n;i++) q[s[i]-'a']++;\n        for(int i=0;i<m;i++) q[t[i]-'a']--;\n        for(int i=0;i<26;i++) if(q[i]!=0) return false;\n        return true;\n    }\n};\n```\n\n\n\n### 两个数组的交集\n\n题目链接：[349. 两个数组的交集](https://leetcode.cn/problems/intersection-of-two-arrays/)\n\n题目描述：给定两个数组 `nums1` 和 `nums2` ，返回它们的交集。输出结果中的每个元素一定是 **唯一** 的。\n\n我的思路：感觉自己写的这个代码和屎一样，又臭又长，一点也不优雅。首先循环nums1数组，将出现的元素在s[]的位置变为1，然后再遍历第二个数组，如果出现和第一个数组相同的元素，则t[]对应位置变为1，再将这些位置存到一个新数组中，记录数组长度，然后构建一个正好长度的新数组，返回这个数组。\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        int n=nums1.size(),m=nums2.size();\n        int s[1001]={0},t[1001]={-1},num=0,u=1001;\n        for(int i=0;i<n;i++) s[nums1[i]]=1;\n        for(int i=0;i<m;i++) if(s[nums2[i]]==1) t[nums2[i]]=1;\n        vector<int> r(u);\n        for(int i=0;i<1001;i++)\n        {\n            if(t[i]>0){r[num]=i;\n            num++;\n            }\n        }\n        vector<int> v(num);\n        for(int i=0;i<num;i++) v[i]=r[i];\n        return v;\n    }\n};\n```\n\n代码随想录题解：太高级了，看都看不懂，特意搜了一下这几个函数的用法。\n\n​\t使用 `unordered_set<int> result` 来存储交集，这样可以自动去重，只保留一个 `nums2` 中与 `nums1` 相同的元素。\n\n**`set1.find(num)`**：\n\n- `find` 是 `unordered_set` 提供的一个成员函数，用于查找一个元素。如果元素存在，它会返回指向该元素的迭代器；如果元素不存在，它会返回指向 **`set1.end()`** 的迭代器。\n\n**`set1.end()`**：\n\n- `set1.end()` 返回的是一个指向 `set1` 容器最后一个元素之后的位置的迭代器。它并不是容器中的一个有效元素，表示容器的末尾。\n\n**`set1.find(num) != set1.end()`**：\n\n- 如果 `find(num)` 返回的迭代器与 `set1.end()` 不同，说明 **`num`** 存在于 `set1` 中。\n- 如果 `find(num)` 返回的迭代器等于 `set1.end()`，说明 **`num`** 不存在于 `set1` 中。\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> result_set; \n        unordered_set<int> nums_set(nums1.begin(), nums1.end());\n        for (int num : nums2) {\n            if (nums_set.find(num) != nums_set.end()) {\n                result_set.insert(num);\n            }\n        }\n        return vector<int>(result_set.begin(), result_set.end());\n    }\n};\n```\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> result_set; \n        int hash[1005] = {0}; \n        for (int num : nums1) { \n            hash[num] = 1;\n        }\n        for (int num : nums2) { \n            if (hash[num] == 1) {\n                result_set.insert(num);\n            }\n        }\n        return vector<int>(result_set.begin(), result_set.end());\n    }\n};\n\n```\n\n### 快乐数\n\n题目链接：[202. 快乐数](https://leetcode.cn/problems/happy-number/)\n\n我的思路：我就随便试一下，就直接过了，因为不知道停止条件，所以直接设了个100次，性能还很高。\n\n```c++\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        for(int j=0;j<100;j++)\n        {\n            int num=0,t;\n            while(n>0)\n            {t=n%10;\n            n=n/10;\n            num=num+t*t;\n            }\n            n=num;\n            if(n==1) return true;\n        }\n        return false;\n    }\n};\n```\n\n代码随想录：题目中说了会 **无限循环**，那么也就是说**求和的过程中，sum会重复出现，这对解题很重要！**\n\n```c++\nclass Solution {\npublic:\n    // 取数值各个位上的单数之和\n    int getSum(int n) {\n        int sum = 0;\n        while (n) {\n            sum += (n % 10) * (n % 10);\n            n /= 10;\n        }\n        return sum;\n    }\n    bool isHappy(int n) {\n        unordered_set<int> set;\n        while(1) {\n            int sum = getSum(n);\n            if (sum == 1) {\n                return true;\n            }\n            // 如果这个sum曾经出现过，说明已经陷入了无限循环了，立刻return false\n            if (set.find(sum) != set.end()) {\n                return false;\n            } else {\n                set.insert(sum);\n            }\n            n = sum;\n        }\n    }\n};\n\n```\n\n### 两数之和\n\n题目链接：[1. 两数之和](https://leetcode.cn/problems/two-sum/)\n\n暴力解法：我直接先用暴力解写了一下,比较简单。\n\n```c++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) { \n        int n=nums.size();\n        for(int i=0;i<n;i++)\n        {\n            for(int j=i+1;j<n;j++)\n            {\n                if((nums[i]+nums[j])==target) \n                {\n                    return {i,j};\n                }\n            }\n        }\n        return {};\n    }\n};\n```\n\n哈希解法：思路还是挺好想的，但是代码不太会实现，不太熟练，自己写了一半，发现很多操作不会表达。直接贴一份代码随想录的代码。\n\n- 数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。\n- set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。\n\n​\t此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value再保存数值所在的下标。\n\nmap中的存储结构为 {key：数据元素，value：数组元素对应的下标}。\n\n`auto` 是 **C++11** 引入的 **类型自动推导（Type Inference）** 关键字，编译器会根据变量的 **初始化值** 自动推导出其数据类型，而无需手动声明类型。\n\n```c++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        std::unordered_map <int,int> map;\n        for(int i = 0; i < nums.size(); i++) {\n            // 遍历当前元素，并在map中寻找是否有匹配的key\n            auto iter = map.find(target - nums[i]); \n            if(iter != map.end()) {\n                return {iter->second, i};\n            }\n            // 如果没找到匹配对，就把访问过的元素和下标加入到map中\n            map.insert(pair<int, int>(nums[i], i)); \n        }\n        return {};\n    }\n};\n\n```\n\n","source":"_posts/5day.md","raw":"---\ntitle: 代码随想录--哈希表\ndate: 2025-02-03 14:10:17\ntags: [数据结构与算法,哈希表,查找,set,map]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--哈希表（上）\n---\n\n## 哈希表\n\n​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值**「key-value」**而直接进行访问的**数据结构**。\n\n### 有效的字母异位词\n\n题目链接：[242. 有效的字母异位词](https://leetcode.cn/problems/remove-linked-list-elements/)\n\n题目描述：给定两个字符串 `s` 和 `t` ，编写一个函数来判断 `t` 是否是 `s` 的 字母异位词。\n\n题目思路：创建一个哈希表，表长为26，哈希函数采用直接定址法，都不用处理冲突，还是比较简单的。直接排序，看是否两个数组相等应该也可以吧。\n\n``` c++\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        int n=s.size(),m=t.size(),q[26]={0};\n        if(m!=n) return false;\n        for(int i=0;i<n;i++) q[s[i]-'a']++;\n        for(int i=0;i<m;i++) q[t[i]-'a']--;\n        for(int i=0;i<26;i++) if(q[i]!=0) return false;\n        return true;\n    }\n};\n```\n\n\n\n### 两个数组的交集\n\n题目链接：[349. 两个数组的交集](https://leetcode.cn/problems/intersection-of-two-arrays/)\n\n题目描述：给定两个数组 `nums1` 和 `nums2` ，返回它们的交集。输出结果中的每个元素一定是 **唯一** 的。\n\n我的思路：感觉自己写的这个代码和屎一样，又臭又长，一点也不优雅。首先循环nums1数组，将出现的元素在s[]的位置变为1，然后再遍历第二个数组，如果出现和第一个数组相同的元素，则t[]对应位置变为1，再将这些位置存到一个新数组中，记录数组长度，然后构建一个正好长度的新数组，返回这个数组。\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        int n=nums1.size(),m=nums2.size();\n        int s[1001]={0},t[1001]={-1},num=0,u=1001;\n        for(int i=0;i<n;i++) s[nums1[i]]=1;\n        for(int i=0;i<m;i++) if(s[nums2[i]]==1) t[nums2[i]]=1;\n        vector<int> r(u);\n        for(int i=0;i<1001;i++)\n        {\n            if(t[i]>0){r[num]=i;\n            num++;\n            }\n        }\n        vector<int> v(num);\n        for(int i=0;i<num;i++) v[i]=r[i];\n        return v;\n    }\n};\n```\n\n代码随想录题解：太高级了，看都看不懂，特意搜了一下这几个函数的用法。\n\n​\t使用 `unordered_set<int> result` 来存储交集，这样可以自动去重，只保留一个 `nums2` 中与 `nums1` 相同的元素。\n\n**`set1.find(num)`**：\n\n- `find` 是 `unordered_set` 提供的一个成员函数，用于查找一个元素。如果元素存在，它会返回指向该元素的迭代器；如果元素不存在，它会返回指向 **`set1.end()`** 的迭代器。\n\n**`set1.end()`**：\n\n- `set1.end()` 返回的是一个指向 `set1` 容器最后一个元素之后的位置的迭代器。它并不是容器中的一个有效元素，表示容器的末尾。\n\n**`set1.find(num) != set1.end()`**：\n\n- 如果 `find(num)` 返回的迭代器与 `set1.end()` 不同，说明 **`num`** 存在于 `set1` 中。\n- 如果 `find(num)` 返回的迭代器等于 `set1.end()`，说明 **`num`** 不存在于 `set1` 中。\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> result_set; \n        unordered_set<int> nums_set(nums1.begin(), nums1.end());\n        for (int num : nums2) {\n            if (nums_set.find(num) != nums_set.end()) {\n                result_set.insert(num);\n            }\n        }\n        return vector<int>(result_set.begin(), result_set.end());\n    }\n};\n```\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> result_set; \n        int hash[1005] = {0}; \n        for (int num : nums1) { \n            hash[num] = 1;\n        }\n        for (int num : nums2) { \n            if (hash[num] == 1) {\n                result_set.insert(num);\n            }\n        }\n        return vector<int>(result_set.begin(), result_set.end());\n    }\n};\n\n```\n\n### 快乐数\n\n题目链接：[202. 快乐数](https://leetcode.cn/problems/happy-number/)\n\n我的思路：我就随便试一下，就直接过了，因为不知道停止条件，所以直接设了个100次，性能还很高。\n\n```c++\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        for(int j=0;j<100;j++)\n        {\n            int num=0,t;\n            while(n>0)\n            {t=n%10;\n            n=n/10;\n            num=num+t*t;\n            }\n            n=num;\n            if(n==1) return true;\n        }\n        return false;\n    }\n};\n```\n\n代码随想录：题目中说了会 **无限循环**，那么也就是说**求和的过程中，sum会重复出现，这对解题很重要！**\n\n```c++\nclass Solution {\npublic:\n    // 取数值各个位上的单数之和\n    int getSum(int n) {\n        int sum = 0;\n        while (n) {\n            sum += (n % 10) * (n % 10);\n            n /= 10;\n        }\n        return sum;\n    }\n    bool isHappy(int n) {\n        unordered_set<int> set;\n        while(1) {\n            int sum = getSum(n);\n            if (sum == 1) {\n                return true;\n            }\n            // 如果这个sum曾经出现过，说明已经陷入了无限循环了，立刻return false\n            if (set.find(sum) != set.end()) {\n                return false;\n            } else {\n                set.insert(sum);\n            }\n            n = sum;\n        }\n    }\n};\n\n```\n\n### 两数之和\n\n题目链接：[1. 两数之和](https://leetcode.cn/problems/two-sum/)\n\n暴力解法：我直接先用暴力解写了一下,比较简单。\n\n```c++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) { \n        int n=nums.size();\n        for(int i=0;i<n;i++)\n        {\n            for(int j=i+1;j<n;j++)\n            {\n                if((nums[i]+nums[j])==target) \n                {\n                    return {i,j};\n                }\n            }\n        }\n        return {};\n    }\n};\n```\n\n哈希解法：思路还是挺好想的，但是代码不太会实现，不太熟练，自己写了一半，发现很多操作不会表达。直接贴一份代码随想录的代码。\n\n- 数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。\n- set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。\n\n​\t此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value再保存数值所在的下标。\n\nmap中的存储结构为 {key：数据元素，value：数组元素对应的下标}。\n\n`auto` 是 **C++11** 引入的 **类型自动推导（Type Inference）** 关键字，编译器会根据变量的 **初始化值** 自动推导出其数据类型，而无需手动声明类型。\n\n```c++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        std::unordered_map <int,int> map;\n        for(int i = 0; i < nums.size(); i++) {\n            // 遍历当前元素，并在map中寻找是否有匹配的key\n            auto iter = map.find(target - nums[i]); \n            if(iter != map.end()) {\n                return {iter->second, i};\n            }\n            // 如果没找到匹配对，就把访问过的元素和下标加入到map中\n            map.insert(pair<int, int>(nums[i], i)); \n        }\n        return {};\n    }\n};\n\n```\n\n","slug":"5day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvb001da4wmc2gv03dd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值<strong>「key-value」</strong>而直接进行访问的<strong>数据结构</strong>。</p>\n<h3 id=\"有效的字母异位词\"><a href=\"#有效的字母异位词\" class=\"headerlink\" title=\"有效的字母异位词\"></a>有效的字母异位词</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">242. 有效的字母异位词</a></p>\n<p>题目描述：给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的 字母异位词。</p>\n<p>题目思路：创建一个哈希表，表长为26，哈希函数采用直接定址法，都不用处理冲突，还是比较简单的。直接排序，看是否两个数组相等应该也可以吧。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isAnagram</span><span class=\"params\">(string s, string t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=s.<span class=\"built_in\">size</span>(),m=t.<span class=\"built_in\">size</span>(),q[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m!=n) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) q[s[i]-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) q[t[i]-<span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++) <span class=\"keyword\">if</span>(q[i]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"两个数组的交集\"><a href=\"#两个数组的交集\" class=\"headerlink\" title=\"两个数组的交集\"></a>两个数组的交集</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">349. 两个数组的交集</a></p>\n<p>题目描述：给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集。输出结果中的每个元素一定是 <strong>唯一</strong> 的。</p>\n<p>我的思路：感觉自己写的这个代码和屎一样，又臭又长，一点也不优雅。首先循环nums1数组，将出现的元素在s[]的位置变为1，然后再遍历第二个数组，如果出现和第一个数组相同的元素，则t[]对应位置变为1，再将这些位置存到一个新数组中，记录数组长度，然后构建一个正好长度的新数组，返回这个数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersection</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>(),m=nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> s[<span class=\"number\">1001</span>]=&#123;<span class=\"number\">0</span>&#125;,t[<span class=\"number\">1001</span>]=&#123;<span class=\"number\">-1</span>&#125;,num=<span class=\"number\">0</span>,u=<span class=\"number\">1001</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) s[nums1[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) <span class=\"keyword\">if</span>(s[nums2[i]]==<span class=\"number\">1</span>) t[nums2[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">r</span><span class=\"params\">(u)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1001</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i]&gt;<span class=\"number\">0</span>)&#123;r[num]=i;</span><br><span class=\"line\">            num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(num)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++) v[i]=r[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码随想录题解：太高级了，看都看不懂，特意搜了一下这几个函数的用法。</p>\n<p>​\t使用 <code>unordered_set&lt;int&gt; result</code> 来存储交集，这样可以自动去重，只保留一个 <code>nums2</code> 中与 <code>nums1</code> 相同的元素。</p>\n<p>**<code>set1.find(num)</code>**：</p>\n<ul>\n<li><code>find</code> 是 <code>unordered_set</code> 提供的一个成员函数，用于查找一个元素。如果元素存在，它会返回指向该元素的迭代器；如果元素不存在，它会返回指向 <strong><code>set1.end()</code></strong> 的迭代器。</li>\n</ul>\n<p>**<code>set1.end()</code>**：</p>\n<ul>\n<li><code>set1.end()</code> 返回的是一个指向 <code>set1</code> 容器最后一个元素之后的位置的迭代器。它并不是容器中的一个有效元素，表示容器的末尾。</li>\n</ul>\n<p>**<code>set1.find(num) != set1.end()</code>**：</p>\n<ul>\n<li>如果 <code>find(num)</code> 返回的迭代器与 <code>set1.end()</code> 不同，说明 <strong><code>num</code></strong> 存在于 <code>set1</code> 中。</li>\n<li>如果 <code>find(num)</code> 返回的迭代器等于 <code>set1.end()</code>，说明 <strong><code>num</code></strong> 不存在于 <code>set1</code> 中。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersection</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; result_set; </span><br><span class=\"line\">        <span class=\"function\">unordered_set&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nums_set</span><span class=\"params\">(nums<span class=\"number\">1.</span>begin(), nums<span class=\"number\">1.</span>end())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums_set.<span class=\"built_in\">find</span>(num) != nums_set.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                result_set.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(result_set.<span class=\"built_in\">begin</span>(), result_set.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersection</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; result_set; </span><br><span class=\"line\">        <span class=\"type\">int</span> hash[<span class=\"number\">1005</span>] = &#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums1) &#123; </span><br><span class=\"line\">            hash[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums2) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hash[num] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                result_set.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(result_set.<span class=\"built_in\">begin</span>(), result_set.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快乐数\"><a href=\"#快乐数\" class=\"headerlink\" title=\"快乐数\"></a>快乐数</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/happy-number/\">202. 快乐数</a></p>\n<p>我的思路：我就随便试一下，就直接过了，因为不知道停止条件，所以直接设了个100次，性能还很高。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">100</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> num=<span class=\"number\">0</span>,t;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;t=n%<span class=\"number\">10</span>;</span><br><span class=\"line\">            n=n/<span class=\"number\">10</span>;</span><br><span class=\"line\">            num=num+t*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n=num;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码随想录：题目中说了会 <strong>无限循环</strong>，那么也就是说<strong>求和的过程中，sum会重复出现，这对解题很重要！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 取数值各个位上的单数之和</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">            sum += (n % <span class=\"number\">10</span>) * (n % <span class=\"number\">10</span>);</span><br><span class=\"line\">            n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; set;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"built_in\">getSum</span>(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果这个sum曾经出现过，说明已经陷入了无限循环了，立刻return false</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set.<span class=\"built_in\">find</span>(sum) != set.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set.<span class=\"built_in\">insert</span>(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n = sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两数之和\"><a href=\"#两数之和\" class=\"headerlink\" title=\"两数之和\"></a>两数之和</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/two-sum/\">1. 两数之和</a></p>\n<p>暴力解法：我直接先用暴力解写了一下,比较简单。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;n;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((nums[i]+nums[j])==target) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;i,j&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>哈希解法：思路还是挺好想的，但是代码不太会实现，不太熟练，自己写了一半，发现很多操作不会表达。直接贴一份代码随想录的代码。</p>\n<ul>\n<li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li>\n<li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li>\n</ul>\n<p>​\t此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value再保存数值所在的下标。</p>\n<p>map中的存储结构为 {key：数据元素，value：数组元素对应的下标}。</p>\n<p><code>auto</code> 是 <strong>C++11</strong> 引入的 <strong>类型自动推导（Type Inference）</strong> 关键字，编译器会根据变量的 <strong>初始化值</strong> 自动推导出其数据类型，而无需手动声明类型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        std::unordered_map &lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; map;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> iter = map.<span class=\"built_in\">find</span>(target - nums[i]); </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(iter != map.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;iter-&gt;second, i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class=\"line\">            map.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(nums[i], i)); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</div>","excerpt":"","more":"<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值<strong>「key-value」</strong>而直接进行访问的<strong>数据结构</strong>。</p>\n<h3 id=\"有效的字母异位词\"><a href=\"#有效的字母异位词\" class=\"headerlink\" title=\"有效的字母异位词\"></a>有效的字母异位词</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">242. 有效的字母异位词</a></p>\n<p>题目描述：给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的 字母异位词。</p>\n<p>题目思路：创建一个哈希表，表长为26，哈希函数采用直接定址法，都不用处理冲突，还是比较简单的。直接排序，看是否两个数组相等应该也可以吧。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isAnagram</span><span class=\"params\">(string s, string t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=s.<span class=\"built_in\">size</span>(),m=t.<span class=\"built_in\">size</span>(),q[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m!=n) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) q[s[i]-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) q[t[i]-<span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++) <span class=\"keyword\">if</span>(q[i]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"两个数组的交集\"><a href=\"#两个数组的交集\" class=\"headerlink\" title=\"两个数组的交集\"></a>两个数组的交集</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-arrays/\">349. 两个数组的交集</a></p>\n<p>题目描述：给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集。输出结果中的每个元素一定是 <strong>唯一</strong> 的。</p>\n<p>我的思路：感觉自己写的这个代码和屎一样，又臭又长，一点也不优雅。首先循环nums1数组，将出现的元素在s[]的位置变为1，然后再遍历第二个数组，如果出现和第一个数组相同的元素，则t[]对应位置变为1，再将这些位置存到一个新数组中，记录数组长度，然后构建一个正好长度的新数组，返回这个数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersection</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>(),m=nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> s[<span class=\"number\">1001</span>]=&#123;<span class=\"number\">0</span>&#125;,t[<span class=\"number\">1001</span>]=&#123;<span class=\"number\">-1</span>&#125;,num=<span class=\"number\">0</span>,u=<span class=\"number\">1001</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) s[nums1[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) <span class=\"keyword\">if</span>(s[nums2[i]]==<span class=\"number\">1</span>) t[nums2[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">r</span><span class=\"params\">(u)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1001</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i]&gt;<span class=\"number\">0</span>)&#123;r[num]=i;</span><br><span class=\"line\">            num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(num)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++) v[i]=r[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码随想录题解：太高级了，看都看不懂，特意搜了一下这几个函数的用法。</p>\n<p>​\t使用 <code>unordered_set&lt;int&gt; result</code> 来存储交集，这样可以自动去重，只保留一个 <code>nums2</code> 中与 <code>nums1</code> 相同的元素。</p>\n<p>**<code>set1.find(num)</code>**：</p>\n<ul>\n<li><code>find</code> 是 <code>unordered_set</code> 提供的一个成员函数，用于查找一个元素。如果元素存在，它会返回指向该元素的迭代器；如果元素不存在，它会返回指向 <strong><code>set1.end()</code></strong> 的迭代器。</li>\n</ul>\n<p>**<code>set1.end()</code>**：</p>\n<ul>\n<li><code>set1.end()</code> 返回的是一个指向 <code>set1</code> 容器最后一个元素之后的位置的迭代器。它并不是容器中的一个有效元素，表示容器的末尾。</li>\n</ul>\n<p>**<code>set1.find(num) != set1.end()</code>**：</p>\n<ul>\n<li>如果 <code>find(num)</code> 返回的迭代器与 <code>set1.end()</code> 不同，说明 <strong><code>num</code></strong> 存在于 <code>set1</code> 中。</li>\n<li>如果 <code>find(num)</code> 返回的迭代器等于 <code>set1.end()</code>，说明 <strong><code>num</code></strong> 不存在于 <code>set1</code> 中。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersection</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; result_set; </span><br><span class=\"line\">        <span class=\"function\">unordered_set&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nums_set</span><span class=\"params\">(nums<span class=\"number\">1.</span>begin(), nums<span class=\"number\">1.</span>end())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums_set.<span class=\"built_in\">find</span>(num) != nums_set.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                result_set.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(result_set.<span class=\"built_in\">begin</span>(), result_set.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">intersection</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; result_set; </span><br><span class=\"line\">        <span class=\"type\">int</span> hash[<span class=\"number\">1005</span>] = &#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums1) &#123; </span><br><span class=\"line\">            hash[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums2) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hash[num] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                result_set.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(result_set.<span class=\"built_in\">begin</span>(), result_set.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快乐数\"><a href=\"#快乐数\" class=\"headerlink\" title=\"快乐数\"></a>快乐数</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/happy-number/\">202. 快乐数</a></p>\n<p>我的思路：我就随便试一下，就直接过了，因为不知道停止条件，所以直接设了个100次，性能还很高。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">100</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> num=<span class=\"number\">0</span>,t;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;t=n%<span class=\"number\">10</span>;</span><br><span class=\"line\">            n=n/<span class=\"number\">10</span>;</span><br><span class=\"line\">            num=num+t*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n=num;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码随想录：题目中说了会 <strong>无限循环</strong>，那么也就是说<strong>求和的过程中，sum会重复出现，这对解题很重要！</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 取数值各个位上的单数之和</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">            sum += (n % <span class=\"number\">10</span>) * (n % <span class=\"number\">10</span>);</span><br><span class=\"line\">            n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; set;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"built_in\">getSum</span>(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果这个sum曾经出现过，说明已经陷入了无限循环了，立刻return false</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set.<span class=\"built_in\">find</span>(sum) != set.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set.<span class=\"built_in\">insert</span>(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n = sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两数之和\"><a href=\"#两数之和\" class=\"headerlink\" title=\"两数之和\"></a>两数之和</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/two-sum/\">1. 两数之和</a></p>\n<p>暴力解法：我直接先用暴力解写了一下,比较简单。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;n;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((nums[i]+nums[j])==target) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;i,j&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>哈希解法：思路还是挺好想的，但是代码不太会实现，不太熟练，自己写了一半，发现很多操作不会表达。直接贴一份代码随想录的代码。</p>\n<ul>\n<li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li>\n<li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li>\n</ul>\n<p>​\t此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value再保存数值所在的下标。</p>\n<p>map中的存储结构为 {key：数据元素，value：数组元素对应的下标}。</p>\n<p><code>auto</code> 是 <strong>C++11</strong> 引入的 <strong>类型自动推导（Type Inference）</strong> 关键字，编译器会根据变量的 <strong>初始化值</strong> 自动推导出其数据类型，而无需手动声明类型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        std::unordered_map &lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; map;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> iter = map.<span class=\"built_in\">find</span>(target - nums[i]); </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(iter != map.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;iter-&gt;second, i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class=\"line\">            map.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(nums[i], i)); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录--哈希表","date":"2025-02-04T06:10:17.000Z","updated":"2025-02-04T09:48:15.729Z","description":"代码随想录--哈希表（下）","_content":"\n## 哈希表\n\n​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值**「key-value」**而直接进行访问的**数据结构**。[总结](https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html#%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80)\n\n### 四数相加Ⅱ\n\n题目链接：[454. 四数相加 II](https://leetcode.cn/problems/4sum-ii/)\n\n题目思路：我刚开始的思路是for四次，但是算了一下，可能有点超时，然后就直接看题解了。将四个数组两两分成一组进行处理，时间复杂度就是O(n*n)。\n\n1. 首先定义 一个unordered_map，key放a和b两数之和，value 放a和b两数之和出现的次数。\n2. 遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。\n3. 定义int变量count，用来统计 a+b+c+d = 0 出现的次数。\n4. 再遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。\n5. 最后返回统计值 count 就可以了\n\n```c++\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        unordered_map<int,int> umap;\n        for(int a : nums1) for(int b:nums2) umap[a+b]++;\n        int count=0;\n        for(int c:nums3) for(int d:nums4) if(umap.find(0-(c+d))!=umap.end()) count+=umap[0-(c+d)];\n        return count;\n    }\n};\n```\n\n### 救赎金\n\n题目链接：[383. 赎金信](https://leetcode.cn/problems/ransom-note/)\n\n题目思路：秒了，这和 [242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/) 几乎差不多。\n\n```c++\nclass Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        int n=magazine.size(),m=ransomNote.size();\n        int j[26]={0};\n        for(int i=0;i<n;i++) j[magazine[i]-'a']++;\n        for(int i=0;i<m;i++) j[ransomNote[i]-'a']--;\n        for(int i=0;i<26;i++) if(j[i]<0) return false; \n        return true;\n    }\n};\n```\n\n### 三数之和\n\n题目链接：[15. 三数之和](https://leetcode.cn/problems/3sum/)\n\n题目思路1：感觉这题最不好处理的地方就是去重。三次循环，意料之中的超时了，当锻炼一下代码熟练度了。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> result;\n        sort(nums.begin(),nums.end());\n        for(int i=0;i<nums.size();i++)\n        {\n            for(int j=i+1;j<nums.size();j++)\n            {\n                for(int k=j+1;k<nums.size();k++)\n                {\n                    if((nums[i]+nums[j]+nums[k])==0) \n                    result.push_back({nums[i], nums[j], nums[k]});\n                }\n            }\n        }\n        set<vector<int>> unique_nums(result.begin(), result.end());\n        vector<vector<int>> result_vector(unique_nums.begin(), unique_nums.end());\n        return result_vector;\n    }\n};\n```\n\n题目思路2：改了一下上一种方法，用哈希表进行处理。虽然可以通过，但是还是很慢。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> result;\n        sort(nums.begin(),nums.end());\n        for(int i=0;i<nums.size();i++)\n        {\n            if (nums[i] > 0) break;\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            unordered_set<int> set;\n            for(int j=i+1;j<nums.size();j++)\n            {\n                int target = 0 - (nums[i] + nums[j]);\n                if (set.find(target) != set.end()) {\n                    result.push_back({nums[i], target, nums[j]});   \n                    set.erase(target);\n                }\n                else {\n                    set.insert(nums[j]);\n                }\n            }\n        }\n        set<vector<int>> unique_nums(result.begin(), result.end());\n        vector<vector<int>> result_vector(unique_nums.begin(), unique_nums.end());\n        return result_vector;\n    }\n};\n```\n\n双指针：代码随想录的那个代码，感觉很多地方可以优化，所以就去找了一个优化完的代码。首先先将数组排序，我们只需要输出加和等于0的元素就可以，不用管次序。排序之后就可以从两端开始操作了，先创造一个大循环，用来固定住第一个数，然后再用双指针取操作另外两个数。\n\n优化一：当最小的三个数的和大于0时，就可以直接退出循环了。\n\n优化二：当最大的两个数加最小的那个数，还是小于0，就可以向前移动到再大的数了。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        ranges::sort(nums);\n        vector<vector<int>> ans;\n        int n = nums.size();\n        for (int i = 0; i < n - 2; i++) {\n            int x = nums[i];\n            if (i && x == nums[i - 1]) continue; // 跳过重复数字\n            if (x + nums[i + 1] + nums[i + 2] > 0) break; // 优化一\n            if (x + nums[n - 2] + nums[n - 1] < 0) continue; // 优化二\n            int j = i + 1, k = n - 1;\n            while (j < k) {\n                int s = x + nums[j] + nums[k];\n                if (s > 0) {\n                    k--;\n                } else if (s < 0) {\n                    j++;\n                } else { // 三数之和为 0\n                    ans.push_back({x, nums[j], nums[k]});\n                    for (j++; j < k && nums[j] == nums[j - 1]; j++); // 跳过重复数字\n                    for (k--; k > j && nums[k] == nums[k + 1]; k--); // 跳过重复数字\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n```\n\n### 四数之和\n\n题目链接：[18. 四数之和](https://leetcode.cn/problems/4sum/)\n\n我的思路：做了半个小时，好几个小问题，思路和上一题一样，用同样的方法，只不过多了一层循环，需要多判断一下重复条件，那几个相加超范围不太会如何处理，chatgpt让它给的方案。看了一下代码随想录的思路，差不多，它加了两行剪枝代码，但是它的代码性能有点慢，加了也不如我的这个性能高，我也在代码中加上了那两行剪枝代码。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        int n=nums.size();\n        sort(nums.begin(),nums.end());\n        vector<vector<int>> ans;\n        for(int i=0;i<n-3;i++)\n            if(i>0 && nums[i]==nums[i-1]) continue;\n            if (nums[i] > target && nums[i] >= 0) break; // \n            for(int j=i+1;j<n-2;j++)\n            {\n                if(j>i+1 && nums[j]==nums[j-1]) continue;\n                if(nums[i]+nums[j] > target && nums[i]+nums[j] >= 0) break; //\n                int c=j+1,d=n-1;\n                if((long long)nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;\n                if((long long)nums[i]+nums[j]+nums[n-1]+nums[n-2]<target) continue;\n                while(c<d){\n                    long long sum=(long long)nums[i]+nums[j]+nums[c]+nums[d];\n                    if(sum>target) d--;\n                    else if(sum<target) c++;\n                    else{\n                        ans.push_back(vector<int> {nums[i],nums[j],nums[c],nums[d]});\n                        while(c<d && nums[c]==nums[c+1]) c++;\n                        while(c<d && nums[d]==nums[d-1]) d--;\n                        c++;\n                        d--;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n\n\n","source":"_posts/6day.md","raw":"---\ntitle: 代码随想录--哈希表\ndate: 2025-02-04 14:10:17\ntags: [数据结构与算法,哈希表,map,双指针]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--哈希表（下）\n---\n\n## 哈希表\n\n​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值**「key-value」**而直接进行访问的**数据结构**。[总结](https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html#%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80)\n\n### 四数相加Ⅱ\n\n题目链接：[454. 四数相加 II](https://leetcode.cn/problems/4sum-ii/)\n\n题目思路：我刚开始的思路是for四次，但是算了一下，可能有点超时，然后就直接看题解了。将四个数组两两分成一组进行处理，时间复杂度就是O(n*n)。\n\n1. 首先定义 一个unordered_map，key放a和b两数之和，value 放a和b两数之和出现的次数。\n2. 遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。\n3. 定义int变量count，用来统计 a+b+c+d = 0 出现的次数。\n4. 再遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。\n5. 最后返回统计值 count 就可以了\n\n```c++\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        unordered_map<int,int> umap;\n        for(int a : nums1) for(int b:nums2) umap[a+b]++;\n        int count=0;\n        for(int c:nums3) for(int d:nums4) if(umap.find(0-(c+d))!=umap.end()) count+=umap[0-(c+d)];\n        return count;\n    }\n};\n```\n\n### 救赎金\n\n题目链接：[383. 赎金信](https://leetcode.cn/problems/ransom-note/)\n\n题目思路：秒了，这和 [242. 有效的字母异位词](https://leetcode.cn/problems/valid-anagram/) 几乎差不多。\n\n```c++\nclass Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        int n=magazine.size(),m=ransomNote.size();\n        int j[26]={0};\n        for(int i=0;i<n;i++) j[magazine[i]-'a']++;\n        for(int i=0;i<m;i++) j[ransomNote[i]-'a']--;\n        for(int i=0;i<26;i++) if(j[i]<0) return false; \n        return true;\n    }\n};\n```\n\n### 三数之和\n\n题目链接：[15. 三数之和](https://leetcode.cn/problems/3sum/)\n\n题目思路1：感觉这题最不好处理的地方就是去重。三次循环，意料之中的超时了，当锻炼一下代码熟练度了。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> result;\n        sort(nums.begin(),nums.end());\n        for(int i=0;i<nums.size();i++)\n        {\n            for(int j=i+1;j<nums.size();j++)\n            {\n                for(int k=j+1;k<nums.size();k++)\n                {\n                    if((nums[i]+nums[j]+nums[k])==0) \n                    result.push_back({nums[i], nums[j], nums[k]});\n                }\n            }\n        }\n        set<vector<int>> unique_nums(result.begin(), result.end());\n        vector<vector<int>> result_vector(unique_nums.begin(), unique_nums.end());\n        return result_vector;\n    }\n};\n```\n\n题目思路2：改了一下上一种方法，用哈希表进行处理。虽然可以通过，但是还是很慢。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> result;\n        sort(nums.begin(),nums.end());\n        for(int i=0;i<nums.size();i++)\n        {\n            if (nums[i] > 0) break;\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            unordered_set<int> set;\n            for(int j=i+1;j<nums.size();j++)\n            {\n                int target = 0 - (nums[i] + nums[j]);\n                if (set.find(target) != set.end()) {\n                    result.push_back({nums[i], target, nums[j]});   \n                    set.erase(target);\n                }\n                else {\n                    set.insert(nums[j]);\n                }\n            }\n        }\n        set<vector<int>> unique_nums(result.begin(), result.end());\n        vector<vector<int>> result_vector(unique_nums.begin(), unique_nums.end());\n        return result_vector;\n    }\n};\n```\n\n双指针：代码随想录的那个代码，感觉很多地方可以优化，所以就去找了一个优化完的代码。首先先将数组排序，我们只需要输出加和等于0的元素就可以，不用管次序。排序之后就可以从两端开始操作了，先创造一个大循环，用来固定住第一个数，然后再用双指针取操作另外两个数。\n\n优化一：当最小的三个数的和大于0时，就可以直接退出循环了。\n\n优化二：当最大的两个数加最小的那个数，还是小于0，就可以向前移动到再大的数了。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        ranges::sort(nums);\n        vector<vector<int>> ans;\n        int n = nums.size();\n        for (int i = 0; i < n - 2; i++) {\n            int x = nums[i];\n            if (i && x == nums[i - 1]) continue; // 跳过重复数字\n            if (x + nums[i + 1] + nums[i + 2] > 0) break; // 优化一\n            if (x + nums[n - 2] + nums[n - 1] < 0) continue; // 优化二\n            int j = i + 1, k = n - 1;\n            while (j < k) {\n                int s = x + nums[j] + nums[k];\n                if (s > 0) {\n                    k--;\n                } else if (s < 0) {\n                    j++;\n                } else { // 三数之和为 0\n                    ans.push_back({x, nums[j], nums[k]});\n                    for (j++; j < k && nums[j] == nums[j - 1]; j++); // 跳过重复数字\n                    for (k--; k > j && nums[k] == nums[k + 1]; k--); // 跳过重复数字\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n```\n\n### 四数之和\n\n题目链接：[18. 四数之和](https://leetcode.cn/problems/4sum/)\n\n我的思路：做了半个小时，好几个小问题，思路和上一题一样，用同样的方法，只不过多了一层循环，需要多判断一下重复条件，那几个相加超范围不太会如何处理，chatgpt让它给的方案。看了一下代码随想录的思路，差不多，它加了两行剪枝代码，但是它的代码性能有点慢，加了也不如我的这个性能高，我也在代码中加上了那两行剪枝代码。\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        int n=nums.size();\n        sort(nums.begin(),nums.end());\n        vector<vector<int>> ans;\n        for(int i=0;i<n-3;i++)\n            if(i>0 && nums[i]==nums[i-1]) continue;\n            if (nums[i] > target && nums[i] >= 0) break; // \n            for(int j=i+1;j<n-2;j++)\n            {\n                if(j>i+1 && nums[j]==nums[j-1]) continue;\n                if(nums[i]+nums[j] > target && nums[i]+nums[j] >= 0) break; //\n                int c=j+1,d=n-1;\n                if((long long)nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;\n                if((long long)nums[i]+nums[j]+nums[n-1]+nums[n-2]<target) continue;\n                while(c<d){\n                    long long sum=(long long)nums[i]+nums[j]+nums[c]+nums[d];\n                    if(sum>target) d--;\n                    else if(sum<target) c++;\n                    else{\n                        ans.push_back(vector<int> {nums[i],nums[j],nums[c],nums[d]});\n                        while(c<d && nums[c]==nums[c+1]) c++;\n                        while(c<d && nums[d]==nums[d-1]) d--;\n                        c++;\n                        d--;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n\n\n","slug":"6day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvc001ea4wm7q62gj5w","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值<strong>「key-value」</strong>而直接进行访问的<strong>数据结构</strong>。<a href=\"https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html#%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\">总结</a></p>\n<h3 id=\"四数相加Ⅱ\"><a href=\"#四数相加Ⅱ\" class=\"headerlink\" title=\"四数相加Ⅱ\"></a>四数相加Ⅱ</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/4sum-ii/\">454. 四数相加 II</a></p>\n<p>题目思路：我刚开始的思路是for四次，但是算了一下，可能有点超时，然后就直接看题解了。将四个数组两两分成一组进行处理，时间复杂度就是O(n*n)。</p>\n<ol>\n<li>首先定义 一个unordered_map，key放a和b两数之和，value 放a和b两数之和出现的次数。</li>\n<li>遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。</li>\n<li>定义int变量count，用来统计 a+b+c+d &#x3D; 0 出现的次数。</li>\n<li>再遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。</li>\n<li>最后返回统计值 count 就可以了</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fourSumCount</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums3, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; umap;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> a : nums1) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> b:nums2) umap[a+b]++;</span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> c:nums3) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d:nums4) <span class=\"keyword\">if</span>(umap.<span class=\"built_in\">find</span>(<span class=\"number\">0</span>-(c+d))!=umap.<span class=\"built_in\">end</span>()) count+=umap[<span class=\"number\">0</span>-(c+d)];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"救赎金\"><a href=\"#救赎金\" class=\"headerlink\" title=\"救赎金\"></a>救赎金</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/ransom-note/\">383. 赎金信</a></p>\n<p>题目思路：秒了，这和 <a href=\"https://leetcode.cn/problems/valid-anagram/\">242. 有效的字母异位词</a> 几乎差不多。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">canConstruct</span><span class=\"params\">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=magazine.<span class=\"built_in\">size</span>(),m=ransomNote.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> j[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) j[magazine[i]-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) j[ransomNote[i]-<span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++) <span class=\"keyword\">if</span>(j[i]&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三数之和\"><a href=\"#三数之和\" class=\"headerlink\" title=\"三数之和\"></a>三数之和</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/3sum/\">15. 三数之和</a></p>\n<p>题目思路1：感觉这题最不好处理的地方就是去重。三次循环，意料之中的超时了，当锻炼一下代码熟练度了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;nums.<span class=\"built_in\">size</span>();j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j<span class=\"number\">+1</span>;k&lt;nums.<span class=\"built_in\">size</span>();k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((nums[i]+nums[j]+nums[k])==<span class=\"number\">0</span>) </span><br><span class=\"line\">                    result.<span class=\"built_in\">push_back</span>(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">unique_nums</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">result_vector</span>(unique_nums.<span class=\"built_in\">begin</span>(), unique_nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_vector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>题目思路2：改了一下上一种方法，用哈希表进行处理。虽然可以通过，但是还是很慢。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            unordered_set&lt;<span class=\"type\">int</span>&gt; set;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;nums.<span class=\"built_in\">size</span>();j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> target = <span class=\"number\">0</span> - (nums[i] + nums[j]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.<span class=\"built_in\">find</span>(target) != set.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    result.<span class=\"built_in\">push_back</span>(&#123;nums[i], target, nums[j]&#125;);   </span><br><span class=\"line\">                    set.<span class=\"built_in\">erase</span>(target);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    set.<span class=\"built_in\">insert</span>(nums[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">unique_nums</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">result_vector</span>(unique_nums.<span class=\"built_in\">begin</span>(), unique_nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_vector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>双指针：代码随想录的那个代码，感觉很多地方可以优化，所以就去找了一个优化完的代码。首先先将数组排序，我们只需要输出加和等于0的元素就可以，不用管次序。排序之后就可以从两端开始操作了，先创造一个大循环，用来固定住第一个数，然后再用双指针取操作另外两个数。</p>\n<p>优化一：当最小的三个数的和大于0时，就可以直接退出循环了。</p>\n<p>优化二：当最大的两个数加最小的那个数，还是小于0，就可以向前移动到再大的数了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        ranges::<span class=\"built_in\">sort</span>(nums);</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &amp;&amp; x == nums[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 跳过重复数字</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x + nums[i + <span class=\"number\">1</span>] + nums[i + <span class=\"number\">2</span>] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">// 优化一</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x + nums[n - <span class=\"number\">2</span>] + nums[n - <span class=\"number\">1</span>] &lt; <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 优化二</span></span><br><span class=\"line\">            <span class=\"type\">int</span> j = i + <span class=\"number\">1</span>, k = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; k) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> s = x + nums[j] + nums[k];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    k--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 三数之和为 0</span></span><br><span class=\"line\">                    ans.<span class=\"built_in\">push_back</span>(&#123;x, nums[j], nums[k]&#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (j++; j &lt; k &amp;&amp; nums[j] == nums[j - <span class=\"number\">1</span>]; j++); <span class=\"comment\">// 跳过重复数字</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (k--; k &gt; j &amp;&amp; nums[k] == nums[k + <span class=\"number\">1</span>]; k--); <span class=\"comment\">// 跳过重复数字</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四数之和\"><a href=\"#四数之和\" class=\"headerlink\" title=\"四数之和\"></a>四数之和</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/4sum/\">18. 四数之和</a></p>\n<p>我的思路：做了半个小时，好几个小问题，思路和上一题一样，用同样的方法，只不过多了一层循环，需要多判断一下重复条件，那几个相加超范围不太会如何处理，chatgpt让它给的方案。看了一下代码随想录的思路，差不多，它加了两行剪枝代码，但是它的代码性能有点慢，加了也不如我的这个性能高，我也在代码中加上了那两行剪枝代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">fourSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-3</span>;i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; target &amp;&amp; nums[i] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">// </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;n<span class=\"number\">-2</span>;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;i<span class=\"number\">+1</span> &amp;&amp; nums[j]==nums[j<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i]+nums[j] &gt; target &amp;&amp; nums[i]+nums[j] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"type\">int</span> c=j<span class=\"number\">+1</span>,d=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"type\">long</span> <span class=\"type\">long</span>)nums[i]+nums[j]+nums[j<span class=\"number\">+1</span>]+nums[j<span class=\"number\">+2</span>]&gt;target) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"type\">long</span> <span class=\"type\">long</span>)nums[i]+nums[j]+nums[n<span class=\"number\">-1</span>]+nums[n<span class=\"number\">-2</span>]&lt;target) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(c&lt;d)&#123;</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"type\">long</span> sum=(<span class=\"type\">long</span> <span class=\"type\">long</span>)nums[i]+nums[j]+nums[c]+nums[d];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(sum&gt;target) d--;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum&lt;target) c++;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        ans.<span class=\"built_in\">push_back</span>(vector&lt;<span class=\"type\">int</span>&gt; &#123;nums[i],nums[j],nums[c],nums[d]&#125;);</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(c&lt;d &amp;&amp; nums[c]==nums[c<span class=\"number\">+1</span>]) c++;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(c&lt;d &amp;&amp; nums[d]==nums[d<span class=\"number\">-1</span>]) d--;</span><br><span class=\"line\">                        c++;</span><br><span class=\"line\">                        d--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</div>","excerpt":"","more":"<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>​\t查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。一种以关键码的值<strong>「key-value」</strong>而直接进行访问的<strong>数据结构</strong>。<a href=\"https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html#%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\">总结</a></p>\n<h3 id=\"四数相加Ⅱ\"><a href=\"#四数相加Ⅱ\" class=\"headerlink\" title=\"四数相加Ⅱ\"></a>四数相加Ⅱ</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/4sum-ii/\">454. 四数相加 II</a></p>\n<p>题目思路：我刚开始的思路是for四次，但是算了一下，可能有点超时，然后就直接看题解了。将四个数组两两分成一组进行处理，时间复杂度就是O(n*n)。</p>\n<ol>\n<li>首先定义 一个unordered_map，key放a和b两数之和，value 放a和b两数之和出现的次数。</li>\n<li>遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。</li>\n<li>定义int变量count，用来统计 a+b+c+d &#x3D; 0 出现的次数。</li>\n<li>再遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。</li>\n<li>最后返回统计值 count 就可以了</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fourSumCount</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums3, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; umap;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> a : nums1) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> b:nums2) umap[a+b]++;</span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> c:nums3) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d:nums4) <span class=\"keyword\">if</span>(umap.<span class=\"built_in\">find</span>(<span class=\"number\">0</span>-(c+d))!=umap.<span class=\"built_in\">end</span>()) count+=umap[<span class=\"number\">0</span>-(c+d)];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"救赎金\"><a href=\"#救赎金\" class=\"headerlink\" title=\"救赎金\"></a>救赎金</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/ransom-note/\">383. 赎金信</a></p>\n<p>题目思路：秒了，这和 <a href=\"https://leetcode.cn/problems/valid-anagram/\">242. 有效的字母异位词</a> 几乎差不多。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">canConstruct</span><span class=\"params\">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=magazine.<span class=\"built_in\">size</span>(),m=ransomNote.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> j[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) j[magazine[i]-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) j[ransomNote[i]-<span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++) <span class=\"keyword\">if</span>(j[i]&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三数之和\"><a href=\"#三数之和\" class=\"headerlink\" title=\"三数之和\"></a>三数之和</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/3sum/\">15. 三数之和</a></p>\n<p>题目思路1：感觉这题最不好处理的地方就是去重。三次循环，意料之中的超时了，当锻炼一下代码熟练度了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;nums.<span class=\"built_in\">size</span>();j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=j<span class=\"number\">+1</span>;k&lt;nums.<span class=\"built_in\">size</span>();k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((nums[i]+nums[j]+nums[k])==<span class=\"number\">0</span>) </span><br><span class=\"line\">                    result.<span class=\"built_in\">push_back</span>(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">unique_nums</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">result_vector</span>(unique_nums.<span class=\"built_in\">begin</span>(), unique_nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_vector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>题目思路2：改了一下上一种方法，用哈希表进行处理。虽然可以通过，但是还是很慢。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            unordered_set&lt;<span class=\"type\">int</span>&gt; set;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;nums.<span class=\"built_in\">size</span>();j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> target = <span class=\"number\">0</span> - (nums[i] + nums[j]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.<span class=\"built_in\">find</span>(target) != set.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    result.<span class=\"built_in\">push_back</span>(&#123;nums[i], target, nums[j]&#125;);   </span><br><span class=\"line\">                    set.<span class=\"built_in\">erase</span>(target);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    set.<span class=\"built_in\">insert</span>(nums[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">unique_nums</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">result_vector</span>(unique_nums.<span class=\"built_in\">begin</span>(), unique_nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_vector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>双指针：代码随想录的那个代码，感觉很多地方可以优化，所以就去找了一个优化完的代码。首先先将数组排序，我们只需要输出加和等于0的元素就可以，不用管次序。排序之后就可以从两端开始操作了，先创造一个大循环，用来固定住第一个数，然后再用双指针取操作另外两个数。</p>\n<p>优化一：当最小的三个数的和大于0时，就可以直接退出循环了。</p>\n<p>优化二：当最大的两个数加最小的那个数，还是小于0，就可以向前移动到再大的数了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        ranges::<span class=\"built_in\">sort</span>(nums);</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &amp;&amp; x == nums[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 跳过重复数字</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x + nums[i + <span class=\"number\">1</span>] + nums[i + <span class=\"number\">2</span>] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">// 优化一</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x + nums[n - <span class=\"number\">2</span>] + nums[n - <span class=\"number\">1</span>] &lt; <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 优化二</span></span><br><span class=\"line\">            <span class=\"type\">int</span> j = i + <span class=\"number\">1</span>, k = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; k) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> s = x + nums[j] + nums[k];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    k--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 三数之和为 0</span></span><br><span class=\"line\">                    ans.<span class=\"built_in\">push_back</span>(&#123;x, nums[j], nums[k]&#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (j++; j &lt; k &amp;&amp; nums[j] == nums[j - <span class=\"number\">1</span>]; j++); <span class=\"comment\">// 跳过重复数字</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (k--; k &gt; j &amp;&amp; nums[k] == nums[k + <span class=\"number\">1</span>]; k--); <span class=\"comment\">// 跳过重复数字</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四数之和\"><a href=\"#四数之和\" class=\"headerlink\" title=\"四数之和\"></a>四数之和</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/4sum/\">18. 四数之和</a></p>\n<p>我的思路：做了半个小时，好几个小问题，思路和上一题一样，用同样的方法，只不过多了一层循环，需要多判断一下重复条件，那几个相加超范围不太会如何处理，chatgpt让它给的方案。看了一下代码随想录的思路，差不多，它加了两行剪枝代码，但是它的代码性能有点慢，加了也不如我的这个性能高，我也在代码中加上了那两行剪枝代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">fourSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-3</span>;i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; nums[i]==nums[i<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; target &amp;&amp; nums[i] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">// </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i<span class=\"number\">+1</span>;j&lt;n<span class=\"number\">-2</span>;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;i<span class=\"number\">+1</span> &amp;&amp; nums[j]==nums[j<span class=\"number\">-1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i]+nums[j] &gt; target &amp;&amp; nums[i]+nums[j] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"type\">int</span> c=j<span class=\"number\">+1</span>,d=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"type\">long</span> <span class=\"type\">long</span>)nums[i]+nums[j]+nums[j<span class=\"number\">+1</span>]+nums[j<span class=\"number\">+2</span>]&gt;target) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"type\">long</span> <span class=\"type\">long</span>)nums[i]+nums[j]+nums[n<span class=\"number\">-1</span>]+nums[n<span class=\"number\">-2</span>]&lt;target) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(c&lt;d)&#123;</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"type\">long</span> sum=(<span class=\"type\">long</span> <span class=\"type\">long</span>)nums[i]+nums[j]+nums[c]+nums[d];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(sum&gt;target) d--;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum&lt;target) c++;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        ans.<span class=\"built_in\">push_back</span>(vector&lt;<span class=\"type\">int</span>&gt; &#123;nums[i],nums[j],nums[c],nums[d]&#125;);</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(c&lt;d &amp;&amp; nums[c]==nums[c<span class=\"number\">+1</span>]) c++;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(c&lt;d &amp;&amp; nums[d]==nums[d<span class=\"number\">-1</span>]) d--;</span><br><span class=\"line\">                        c++;</span><br><span class=\"line\">                        d--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"代码随想录--链表","date":"2025-01-26T02:33:31.000Z","updated":"2025-02-04T09:38:55.351Z","description":"代码随想录--链表（下）","keywords":["算法","复试"],"_content":"\n## 链表操作\n\n​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。\n\n### 两两交换链表中的节点\n\n题目链接：[24. 两两交换链表中的节点](https://leetcode.cn/problems/remove-linked-list-elements/)\n\n题目描述：两两交换链表中相邻的节点，并返回交换后链表的头节点\n\n#### 虚拟头节点\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：直接对指针进行处理就行了。刚才随手写了一下，想着交一下看看哪里有bug呢，结果直接过了，也是挺顺的。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummy=new ListNode(0);\n        ListNode* pre=dummy;\n        dummy->next=head;\n        while(head && head->next)\n        {\n            ListNode* tmp=pre->next;\n            ListNode* tmp1=pre->next->next->next;\n            pre->next=head->next;\n            pre->next->next=tmp;\n            pre->next->next->next=tmp1;\n            pre=tmp;\n            head=tmp1;\n        }\n        return dummy->next;\n    }\n};\n```\n\n\n\n### 删除链表的倒数第 N 个结点\n\n题目链接：[9. 删除链表的倒数第 N 个结点](https://leetcode.cn/problems/reverse-linked-list/)\n\n题目描述：删除链表的倒数第 n 个结点，并且返回链表的头结点。\n\n#### 快慢双指针法\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：又给秒了，定义一个快指针，一个慢指针，快指针先移动到第n个位置，然后开始快慢指针开始同时移动，当快指针指向尾节点的时候，慢指针正好指向导数第n个位置的前一个结点，略过倒数第n个结点，就结束了。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy=new ListNode(0);\n        ListNode* fast=dummy;\n        ListNode* slow=dummy;\n        dummy->next=head;\n        for(int i=0;i<=n;i++) fast=fast->next;\n        while(fast)\n        {\n            fast=fast->next;\n            slow=slow->next;\n        }\n        ListNode* tmp=slow->next;\n        slow->next=slow->next->next;\n        delete tmp;\n        return dummy->next;\n    }\n};\n```\n\n### 链表相交\n\n题目链接：[面试题 02.07. 链表相交](https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/)\n\n题目描述：给定单链表的头节点 headA 和 headB ，找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。\n\n#### 思路1\n\n题目思路：求两个链表交点节点的指针。题目我都看不懂！看题解秒了。\n\n求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置。比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA == curB，则找到交点。否则循环退出返回空指针。\n\n```c++\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* curA = headA;\n        ListNode* curB = headB;\n        int lenA = 0, lenB = 0;\n        while (curA != NULL) { // 求链表A的长度\n            lenA++;\n            curA = curA->next;\n        }\n        while (curB != NULL) { // 求链表B的长度\n            lenB++;\n            curB = curB->next;\n        }\n        curA = headA;\n        curB = headB;\n        // 让curA为最长链表的头，lenA为其长度\n        if (lenB > lenA) {\n            swap (lenA, lenB);\n            swap (curA, curB);\n        }\n        // 求长度差\n        int gap = lenA - lenB;\n        // 让curA和curB在同一起点上（末尾位置对齐）\n        while (gap--) {\n            curA = curA->next;\n        }\n        // 遍历curA 和 curB，遇到相同则直接返回\n        while (curA != NULL) {\n            if (curA == curB) {\n                return curA;\n            }\n            curA = curA->next;\n            curB = curB->next;\n        }\n        return NULL;\n    }\n};\n```\n\n#### 思路二\n\n再贴个牛逼代码。\n\n```c++\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *A = headA, *B = headB;\n        while (A != B) {\n            A = A != nullptr ? A->next : headB;\n            B = B != nullptr ? B->next : headA;\n        }\n        return A;\n    }\n};\n```\n\n### 环形链表\n\n题目链接：[142. 环形链表 II](https://leetcode.cn/problems/linked-list-cycle-ii/)\n\n题目描述：给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n\n题目思路：很有生活的题，不太好想，看题解才明白怎么才能找到环的入口，也是挺有思维量的。想明白了就好了，记下来就行了。\n\n```c++\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* fast=head;\n        ListNode* slow=head;\n        while(fast && fast->next){\n            fast=fast->next->next;\n            slow=slow->next;\n            if(fast==slow){\n                ListNode* f=fast;\n                ListNode* s=head;\n                while(f!=s){\n                    f=f->next;\n                    s=s->next;\n                }\n                return s;\n            }\n        }\n        return 0;\n    }\n};\n```\n\n","source":"_posts/4day.md","raw":"---\ntitle: 代码随想录--链表\ndate: 2025-01-26 10:33:31\ntags: [数据结构与算法,递归,双指针,链表]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--链表（下）\nkeywords: [算法,复试]\n---\n\n## 链表操作\n\n​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。\n\n### 两两交换链表中的节点\n\n题目链接：[24. 两两交换链表中的节点](https://leetcode.cn/problems/remove-linked-list-elements/)\n\n题目描述：两两交换链表中相邻的节点，并返回交换后链表的头节点\n\n#### 虚拟头节点\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：直接对指针进行处理就行了。刚才随手写了一下，想着交一下看看哪里有bug呢，结果直接过了，也是挺顺的。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummy=new ListNode(0);\n        ListNode* pre=dummy;\n        dummy->next=head;\n        while(head && head->next)\n        {\n            ListNode* tmp=pre->next;\n            ListNode* tmp1=pre->next->next->next;\n            pre->next=head->next;\n            pre->next->next=tmp;\n            pre->next->next->next=tmp1;\n            pre=tmp;\n            head=tmp1;\n        }\n        return dummy->next;\n    }\n};\n```\n\n\n\n### 删除链表的倒数第 N 个结点\n\n题目链接：[9. 删除链表的倒数第 N 个结点](https://leetcode.cn/problems/reverse-linked-list/)\n\n题目描述：删除链表的倒数第 n 个结点，并且返回链表的头结点。\n\n#### 快慢双指针法\n\n时间复杂度：O(n)     空间复杂度：O(1)\n\n题目思路：又给秒了，定义一个快指针，一个慢指针，快指针先移动到第n个位置，然后开始快慢指针开始同时移动，当快指针指向尾节点的时候，慢指针正好指向导数第n个位置的前一个结点，略过倒数第n个结点，就结束了。\n\n``` c++\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy=new ListNode(0);\n        ListNode* fast=dummy;\n        ListNode* slow=dummy;\n        dummy->next=head;\n        for(int i=0;i<=n;i++) fast=fast->next;\n        while(fast)\n        {\n            fast=fast->next;\n            slow=slow->next;\n        }\n        ListNode* tmp=slow->next;\n        slow->next=slow->next->next;\n        delete tmp;\n        return dummy->next;\n    }\n};\n```\n\n### 链表相交\n\n题目链接：[面试题 02.07. 链表相交](https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/)\n\n题目描述：给定单链表的头节点 headA 和 headB ，找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。\n\n#### 思路1\n\n题目思路：求两个链表交点节点的指针。题目我都看不懂！看题解秒了。\n\n求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置。比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA == curB，则找到交点。否则循环退出返回空指针。\n\n```c++\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* curA = headA;\n        ListNode* curB = headB;\n        int lenA = 0, lenB = 0;\n        while (curA != NULL) { // 求链表A的长度\n            lenA++;\n            curA = curA->next;\n        }\n        while (curB != NULL) { // 求链表B的长度\n            lenB++;\n            curB = curB->next;\n        }\n        curA = headA;\n        curB = headB;\n        // 让curA为最长链表的头，lenA为其长度\n        if (lenB > lenA) {\n            swap (lenA, lenB);\n            swap (curA, curB);\n        }\n        // 求长度差\n        int gap = lenA - lenB;\n        // 让curA和curB在同一起点上（末尾位置对齐）\n        while (gap--) {\n            curA = curA->next;\n        }\n        // 遍历curA 和 curB，遇到相同则直接返回\n        while (curA != NULL) {\n            if (curA == curB) {\n                return curA;\n            }\n            curA = curA->next;\n            curB = curB->next;\n        }\n        return NULL;\n    }\n};\n```\n\n#### 思路二\n\n再贴个牛逼代码。\n\n```c++\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *A = headA, *B = headB;\n        while (A != B) {\n            A = A != nullptr ? A->next : headB;\n            B = B != nullptr ? B->next : headA;\n        }\n        return A;\n    }\n};\n```\n\n### 环形链表\n\n题目链接：[142. 环形链表 II](https://leetcode.cn/problems/linked-list-cycle-ii/)\n\n题目描述：给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n\n题目思路：很有生活的题，不太好想，看题解才明白怎么才能找到环的入口，也是挺有思维量的。想明白了就好了，记下来就行了。\n\n```c++\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* fast=head;\n        ListNode* slow=head;\n        while(fast && fast->next){\n            fast=fast->next->next;\n            slow=slow->next;\n            if(fast==slow){\n                ListNode* f=fast;\n                ListNode* s=head;\n                while(f!=s){\n                    f=f->next;\n                    s=s->next;\n                }\n                return s;\n            }\n        }\n        return 0;\n    }\n};\n```\n\n","slug":"4day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvd001ga4wmbfv8exdg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"链表操作\"><a href=\"#链表操作\" class=\"headerlink\" title=\"链表操作\"></a>链表操作</h2><p>​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。</p>\n<h3 id=\"两两交换链表中的节点\"><a href=\"#两两交换链表中的节点\" class=\"headerlink\" title=\"两两交换链表中的节点\"></a>两两交换链表中的节点</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">24. 两两交换链表中的节点</a></p>\n<p>题目描述：两两交换链表中相邻的节点，并返回交换后链表的头节点</p>\n<h4 id=\"虚拟头节点\"><a href=\"#虚拟头节点\" class=\"headerlink\" title=\"虚拟头节点\"></a>虚拟头节点</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：直接对指针进行处理就行了。刚才随手写了一下，想着交一下看看哪里有bug呢，结果直接过了，也是挺顺的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode* pre=dummy;</span><br><span class=\"line\">        dummy-&gt;next=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head &amp;&amp; head-&gt;next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListNode* tmp=pre-&gt;next;</span><br><span class=\"line\">            ListNode* tmp1=pre-&gt;next-&gt;next-&gt;next;</span><br><span class=\"line\">            pre-&gt;next=head-&gt;next;</span><br><span class=\"line\">            pre-&gt;next-&gt;next=tmp;</span><br><span class=\"line\">            pre-&gt;next-&gt;next-&gt;next=tmp1;</span><br><span class=\"line\">            pre=tmp;</span><br><span class=\"line\">            head=tmp1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除链表的倒数第-N-个结点\"><a href=\"#删除链表的倒数第-N-个结点\" class=\"headerlink\" title=\"删除链表的倒数第 N 个结点\"></a>删除链表的倒数第 N 个结点</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">9. 删除链表的倒数第 N 个结点</a></p>\n<p>题目描述：删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>\n<h4 id=\"快慢双指针法\"><a href=\"#快慢双指针法\" class=\"headerlink\" title=\"快慢双指针法\"></a>快慢双指针法</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：又给秒了，定义一个快指针，一个慢指针，快指针先移动到第n个位置，然后开始快慢指针开始同时移动，当快指针指向尾节点的时候，慢指针正好指向导数第n个位置的前一个结点，略过倒数第n个结点，就结束了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode* fast=dummy;</span><br><span class=\"line\">        ListNode* slow=dummy;</span><br><span class=\"line\">        dummy-&gt;next=head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) fast=fast-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fast=fast-&gt;next;</span><br><span class=\"line\">            slow=slow-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* tmp=slow-&gt;next;</span><br><span class=\"line\">        slow-&gt;next=slow-&gt;next-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表相交\"><a href=\"#链表相交\" class=\"headerlink\" title=\"链表相交\"></a>链表相交</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/\">面试题 02.07. 链表相交</a></p>\n<p>题目描述：给定单链表的头节点 headA 和 headB ，找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p>\n<h4 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h4><p>题目思路：求两个链表交点节点的指针。题目我都看不懂！看题解秒了。</p>\n<p>求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置。比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA &#x3D;&#x3D; curB，则找到交点。否则循环退出返回空指针。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* curA = headA;</span><br><span class=\"line\">        ListNode* curB = headB;</span><br><span class=\"line\">        <span class=\"type\">int</span> lenA = <span class=\"number\">0</span>, lenB = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curA != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// 求链表A的长度</span></span><br><span class=\"line\">            lenA++;</span><br><span class=\"line\">            curA = curA-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curB != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// 求链表B的长度</span></span><br><span class=\"line\">            lenB++;</span><br><span class=\"line\">            curB = curB-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curA = headA;</span><br><span class=\"line\">        curB = headB;</span><br><span class=\"line\">        <span class=\"comment\">// 让curA为最长链表的头，lenA为其长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lenB &gt; lenA) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span> (lenA, lenB);</span><br><span class=\"line\">            <span class=\"built_in\">swap</span> (curA, curB);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 求长度差</span></span><br><span class=\"line\">        <span class=\"type\">int</span> gap = lenA - lenB;</span><br><span class=\"line\">        <span class=\"comment\">// 让curA和curB在同一起点上（末尾位置对齐）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (gap--) &#123;</span><br><span class=\"line\">            curA = curA-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历curA 和 curB，遇到相同则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curA != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curA == curB) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curA;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curA = curA-&gt;next;</span><br><span class=\"line\">            curB = curB-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h4><p>再贴个牛逼代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class=\"line\">        ListNode *A = headA, *B = headB;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (A != B) &#123;</span><br><span class=\"line\">            A = A != <span class=\"literal\">nullptr</span> ? A-&gt;next : headB;</span><br><span class=\"line\">            B = B != <span class=\"literal\">nullptr</span> ? B-&gt;next : headA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环形链表\"><a href=\"#环形链表\" class=\"headerlink\" title=\"环形链表\"></a>环形链表</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\">142. 环形链表 II</a></p>\n<p>题目描述：给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>题目思路：很有生活的题，不太好想，看题解才明白怎么才能找到环的入口，也是挺有思维量的。想明白了就好了，记下来就行了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode *<span class=\"title\">detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* fast=head;</span><br><span class=\"line\">        ListNode* slow=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class=\"line\">            fast=fast-&gt;next-&gt;next;</span><br><span class=\"line\">            slow=slow-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                ListNode* f=fast;</span><br><span class=\"line\">                ListNode* s=head;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(f!=s)&#123;</span><br><span class=\"line\">                    f=f-&gt;next;</span><br><span class=\"line\">                    s=s-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</div>","excerpt":"","more":"<h2 id=\"链表操作\"><a href=\"#链表操作\" class=\"headerlink\" title=\"链表操作\"></a>链表操作</h2><p>​\t链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null（空指针的意思）。</p>\n<h3 id=\"两两交换链表中的节点\"><a href=\"#两两交换链表中的节点\" class=\"headerlink\" title=\"两两交换链表中的节点\"></a>两两交换链表中的节点</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\">24. 两两交换链表中的节点</a></p>\n<p>题目描述：两两交换链表中相邻的节点，并返回交换后链表的头节点</p>\n<h4 id=\"虚拟头节点\"><a href=\"#虚拟头节点\" class=\"headerlink\" title=\"虚拟头节点\"></a>虚拟头节点</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：直接对指针进行处理就行了。刚才随手写了一下，想着交一下看看哪里有bug呢，结果直接过了，也是挺顺的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode* pre=dummy;</span><br><span class=\"line\">        dummy-&gt;next=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head &amp;&amp; head-&gt;next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListNode* tmp=pre-&gt;next;</span><br><span class=\"line\">            ListNode* tmp1=pre-&gt;next-&gt;next-&gt;next;</span><br><span class=\"line\">            pre-&gt;next=head-&gt;next;</span><br><span class=\"line\">            pre-&gt;next-&gt;next=tmp;</span><br><span class=\"line\">            pre-&gt;next-&gt;next-&gt;next=tmp1;</span><br><span class=\"line\">            pre=tmp;</span><br><span class=\"line\">            head=tmp1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除链表的倒数第-N-个结点\"><a href=\"#删除链表的倒数第-N-个结点\" class=\"headerlink\" title=\"删除链表的倒数第 N 个结点\"></a>删除链表的倒数第 N 个结点</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list/\">9. 删除链表的倒数第 N 个结点</a></p>\n<p>题目描述：删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>\n<h4 id=\"快慢双指针法\"><a href=\"#快慢双指针法\" class=\"headerlink\" title=\"快慢双指针法\"></a>快慢双指针法</h4><p>时间复杂度：O(n)     空间复杂度：O(1)</p>\n<p>题目思路：又给秒了，定义一个快指针，一个慢指针，快指针先移动到第n个位置，然后开始快慢指针开始同时移动，当快指针指向尾节点的时候，慢指针正好指向导数第n个位置的前一个结点，略过倒数第n个结点，就结束了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode* fast=dummy;</span><br><span class=\"line\">        ListNode* slow=dummy;</span><br><span class=\"line\">        dummy-&gt;next=head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) fast=fast-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fast=fast-&gt;next;</span><br><span class=\"line\">            slow=slow-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* tmp=slow-&gt;next;</span><br><span class=\"line\">        slow-&gt;next=slow-&gt;next-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表相交\"><a href=\"#链表相交\" class=\"headerlink\" title=\"链表相交\"></a>链表相交</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/\">面试题 02.07. 链表相交</a></p>\n<p>题目描述：给定单链表的头节点 headA 和 headB ，找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p>\n<h4 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h4><p>题目思路：求两个链表交点节点的指针。题目我都看不懂！看题解秒了。</p>\n<p>求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置。比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA &#x3D;&#x3D; curB，则找到交点。否则循环退出返回空指针。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* curA = headA;</span><br><span class=\"line\">        ListNode* curB = headB;</span><br><span class=\"line\">        <span class=\"type\">int</span> lenA = <span class=\"number\">0</span>, lenB = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curA != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// 求链表A的长度</span></span><br><span class=\"line\">            lenA++;</span><br><span class=\"line\">            curA = curA-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curB != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// 求链表B的长度</span></span><br><span class=\"line\">            lenB++;</span><br><span class=\"line\">            curB = curB-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curA = headA;</span><br><span class=\"line\">        curB = headB;</span><br><span class=\"line\">        <span class=\"comment\">// 让curA为最长链表的头，lenA为其长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lenB &gt; lenA) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span> (lenA, lenB);</span><br><span class=\"line\">            <span class=\"built_in\">swap</span> (curA, curB);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 求长度差</span></span><br><span class=\"line\">        <span class=\"type\">int</span> gap = lenA - lenB;</span><br><span class=\"line\">        <span class=\"comment\">// 让curA和curB在同一起点上（末尾位置对齐）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (gap--) &#123;</span><br><span class=\"line\">            curA = curA-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历curA 和 curB，遇到相同则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curA != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curA == curB) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curA;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curA = curA-&gt;next;</span><br><span class=\"line\">            curB = curB-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h4><p>再贴个牛逼代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class=\"line\">        ListNode *A = headA, *B = headB;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (A != B) &#123;</span><br><span class=\"line\">            A = A != <span class=\"literal\">nullptr</span> ? A-&gt;next : headB;</span><br><span class=\"line\">            B = B != <span class=\"literal\">nullptr</span> ? B-&gt;next : headA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环形链表\"><a href=\"#环形链表\" class=\"headerlink\" title=\"环形链表\"></a>环形链表</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\">142. 环形链表 II</a></p>\n<p>题目描述：给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>题目思路：很有生活的题，不太好想，看题解才明白怎么才能找到环的入口，也是挺有思维量的。想明白了就好了，记下来就行了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode *<span class=\"title\">detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* fast=head;</span><br><span class=\"line\">        ListNode* slow=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class=\"line\">            fast=fast-&gt;next-&gt;next;</span><br><span class=\"line\">            slow=slow-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                ListNode* f=fast;</span><br><span class=\"line\">                ListNode* s=head;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(f!=s)&#123;</span><br><span class=\"line\">                    f=f-&gt;next;</span><br><span class=\"line\">                    s=s-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录--字符串","date":"2025-02-05T09:48:35.000Z","updated":"2025-02-06T15:08:04.873Z","description":"代码随想录--字符串","_content":"\n## 字符串\n\n​\t字符串，就是由字符连接而成的序列。常见的字符串问题包括字符串匹配问题、子串相关问题、前缀/后缀相关问题、回文串相关问题、子序列相关问题等。\n\n### 反转字符串\n\n题目链接：[344. 反转字符串](https://leetcode.cn/problems/reverse-string/)\n\n```c++\nclass Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        for(int i=0,j=s.size()-1;i<j;i++,j--)\n        {\n            char a=s[i];\n            s[i]=s[j];\n            s[j]=a;\n        }\n    }\n};\n```\n\n### 反转字符串\n\n题目链接：[541. 反转字符串 II](https://leetcode.cn/problems/reverse-string-ii/)\n\n注意一下reverse函数的用法。\n\n```c++\nclass Solution {\npublic:\n    string reverseStr(string s, int k) {\n        for (int i = 0; i < s.size(); i += (2 * k)) {\n            if (i + k <= s.size()) {\n                reverse(s.begin()  i, s.begin() + i + k );\n            } else {\n                reverse(s.begin() + i, s.end());\n            }\n        }\n        return s;\n    }\n};\n\n```\n\n### 替换数字                            \n\n题目链接：[替换数字（第八期模拟笔试）](https://kamacoder.com/problempage.php?pid=1064)\n\n题目思路：看似简单，实则不好操作，gpt给的这个思路很好啊，重新弄一个新字符串然后拼接。代码随想录的那个太麻烦了，直接pass掉了。\n\n```c++\n#include <iostream>\n#include <cctype>  // 需要 isdigit()\nusing namespace std;\nstring replaceDigitsWithNumber(const string& s) {\n    string result;\n    for (char c : s) {\n        if (isdigit(c)) {\n            result += \"number\";  // 仅替换数字\n        } else {\n            result += c;  // 直接添加非数字字符\n        }\n    }\n    return result;\n}\nint main() {\n    string s;\n    cin >> s;  // 读取输入\n    cout << replaceDigitsWithNumber(s) << endl;  \n    return 0;\n}\n```\n\n主要难点在于如何去掉空格，使用快慢指针。\n\n```c++\nclass Solution {\npublic:\n    void reverse(string& s, int start, int end){ //翻转，区间写法：左闭右闭 []\n        for (int i = start, j = end; i < j; i++, j--) {\n            swap(s[i], s[j]);\n        }\n    }\n\n    void removeExtraSpaces(string& s) {//去除所有空格并在相邻单词之间添加空格, 快慢指针。\n        int slow = 0;   //整体思想参考https://programmercarl.com/0027.移除元素.html\n        for (int i = 0; i < s.size(); ++i) { //\n            if (s[i] != ' ') { //遇到非空格就处理，即删除所有空格。\n                if (slow != 0) s[slow++] = ' '; //手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。\n                while (i < s.size() && s[i] != ' ') { //补上该单词，遇到空格说明单词结束。\n                    s[slow++] = s[i++];\n                }\n            }\n        }\n        s.resize(slow); //slow的大小即为去除多余空格后的大小。\n    }\n\n    string reverseWords(string s) {\n        removeExtraSpaces(s); //去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。\n        reverse(s, 0, s.size() - 1);\n        int start = 0; //removeExtraSpaces后保证第一个单词的开始下标一定是0。\n        for (int i = 0; i <= s.size(); ++i) {\n            if (i == s.size() || s[i] == ' ') { //到达空格或者串尾，说明一个单词结束。进行翻转。\n                reverse(s, start, i - 1); //翻转，注意是左闭右闭 []的翻转。\n                start = i + 1; //更新下一个单词的开始下标start\n            }\n        }\n        return s;\n    }\n};\n```\n\n\n\n### 右旋字符串\n\n题目链接：[右旋字符串](https://kamacoder.com/problempage.php?pid=1065)\n\n题目思路：和前边有一题很类似，都是申请了一个额外的空间往上加，这题是先把后n个加上，再把前m-n个加上。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    int n;\n    string s,ans;\n    cin>>n>>s;\n    int m=s.size();\n    for(int i=(m-n);i<m;i++) ans+=s[i];\n    for(int i=0;i<(m-n);i++) ans+=s[i];\n    cout<<ans;\n    return 0;\n}\n```\n\n代码随想录：它要求不申请额外的空间，这个就直接reverse两次，和上一题差不多，先全局再局部。\n\n```c++\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main() {\n    int n;\n    string s;\n    cin >> n;\n    cin >> s;\n    int len = s.size(); //获取长度\n    reverse(s.begin(), s.end()); // 整体反转\n    reverse(s.begin(), s.begin() + n); // 先反转前一段，长度n\n    reverse(s.begin() + n, s.end()); // 再反转后一段\n    cout << s << endl;\n\n} \n```\n\n\n\n### 找出字符串中第一个匹配项的下标\n\n题目链接：[28. 找出字符串中第一个匹配项的下标](https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/)\n\n暴力解法：思路正确，但是我写的代码写的太麻烦了，下边贴一份优雅的代码。时间复杂度O(m*n)。\n\n```c++\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int s[26]={0};\n        if(needle.size()>haystack.size()) return -1;\n        for(int i:needle) s[i-'a']++;\n        for(int i=0;i<haystack.size();i++)\n        {\n            int t;\n            if(s[haystack[i]-'a']==0) continue;\n            else{\n                t=i;\n                int a=t;\n                for(int j=0;j<needle.size();j++) if(haystack.size()-a>=needle.size() && haystack[a+j]==needle[j]) t++;\n            }\n            if((t-i)==needle.size()) return i;\n        }\n        return -1;\n    }\n};\n```\n\n```c++\nclass Solution {\npublic:\n    int strStr(string s, string p) {\n        int n = s.size(), m = p.size();\n        for(int i = 0; i <= n - m; i++){\n            int j = i, k = 0; \n            while(k < m and s[j] == p[k]){\n                j++;\n                k++;\n            }\n            if(k == m) return i;\n        }\n        return -1;\n    }\n};\n```\n\n**KMP解法：**当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。\n\n前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。代码随想录写的这个就很通俗易懂。\n\n**Nex数组构造：**\n\n1. 初始化\n2. 处理前后缀不相同的情况\n3. 处理前后缀相同的情况\n\n![](https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B23.gif)\n\n```c++\nclass Solution {\npublic:\n    void getNext(int* next, const string& s) {\n        int j = -1;\n        next[0] = j;\n        for(int i = 1; i < s.size(); i++) { // 注意i从1开始\n            while (j >= 0 && s[i] != s[j + 1]) { // 前后缀不相同了\n                j = next[j]; // 向前回退\n            }\n            if (s[i] == s[j + 1]) { // 找到相同的前后缀\n                j++;\n            }\n            next[i] = j; // 将j（前缀的长度）赋给next[i]\n        }\n    }\n    int strStr(string haystack, string needle) {\n        if (needle.size() == 0) {\n            return 0;\n        }\n\t\tvector<int> next(needle.size());\n\t\tgetNext(&next[0], needle);\n        int j = -1; // // 因为next数组里记录的起始位置为-1\n        for (int i = 0; i < haystack.size(); i++) { // 注意i就从0开始\n            while(j >= 0 && haystack[i] != needle[j + 1]) { // 不匹配\n                j = next[j]; // j 寻找之前匹配的位置\n            }\n            if (haystack[i] == needle[j + 1]) { // 匹配，j和i同时向后移动\n                j++; // i的增加在for循环里\n            }\n            if (j == (needle.size() - 1) ) { // 文本串s里出现了模式串t\n                return (i - needle.size() + 1);\n            }\n        }\n        return -1;\n    }\n};\n```\n\n\n\n### 重复的子字符串\n\n题目链接：[459. 重复的子字符串](https://leetcode.cn/problems/repeated-substring-pattern/)\n\n暴力解法：想用暴力法写一下，结果写了两个小时，还是看了题解写出来的，钻牛角尖了。我写的代码性能不如官方代码高，贴一下官方代码。\n\n```c++\nclass Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        int n = s.size();\n        for (int i = 1; i * 2 <= n; ++i) {\n            if (n % i == 0) {\n                bool match = true;\n                for (int j = i; j < n; ++j) {\n                    if (s[j] != s[j - i]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n\n```\n\n移动匹配：将两个 s 连在一起，并移除第一个和最后一个字符。如果 s 是该字符串的子串，那么 s 就满足题目要求。\n\n```c++\nclass Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        string t = s + s;\n        t.erase(t.begin()); t.erase(t.end() - 1); // 掐头去尾\n        if (t.find(s) != std::string::npos) return true; // r\n        return false;\n    }\n};\n```\n\nKMP实现：\n\n```c++\nclass Solution {\npublic:\n    void getNext (int* next, const string& s){\n        next[0] = -1;\n        int j = -1;\n        for(int i = 1;i < s.size(); i++){\n            while(j >= 0 && s[i] != s[j + 1]) {\n                j = next[j];\n            }\n            if(s[i] == s[j + 1]) {\n                j++;\n            }\n            next[i] = j;\n        }\n    }\n    bool repeatedSubstringPattern (string s) {\n        if (s.size() == 0) {\n            return false;\n        }\n        int next[s.size()];\n        getNext(next, s);\n        int len = s.size();\n        if (next[len - 1] != -1 && len % (len - (next[len - 1] + 1)) == 0) {\n            return true;\n        }\n        return false;\n    }\n};\n```\n\n","source":"_posts/7day.md","raw":"---\ntitle: 代码随想录--字符串\ndate: 2025-02-05 17:48:35\ntags: [数据结构与算法,字符串,KMP,双指针,reverse]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--字符串\n---\n\n## 字符串\n\n​\t字符串，就是由字符连接而成的序列。常见的字符串问题包括字符串匹配问题、子串相关问题、前缀/后缀相关问题、回文串相关问题、子序列相关问题等。\n\n### 反转字符串\n\n题目链接：[344. 反转字符串](https://leetcode.cn/problems/reverse-string/)\n\n```c++\nclass Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        for(int i=0,j=s.size()-1;i<j;i++,j--)\n        {\n            char a=s[i];\n            s[i]=s[j];\n            s[j]=a;\n        }\n    }\n};\n```\n\n### 反转字符串\n\n题目链接：[541. 反转字符串 II](https://leetcode.cn/problems/reverse-string-ii/)\n\n注意一下reverse函数的用法。\n\n```c++\nclass Solution {\npublic:\n    string reverseStr(string s, int k) {\n        for (int i = 0; i < s.size(); i += (2 * k)) {\n            if (i + k <= s.size()) {\n                reverse(s.begin()  i, s.begin() + i + k );\n            } else {\n                reverse(s.begin() + i, s.end());\n            }\n        }\n        return s;\n    }\n};\n\n```\n\n### 替换数字                            \n\n题目链接：[替换数字（第八期模拟笔试）](https://kamacoder.com/problempage.php?pid=1064)\n\n题目思路：看似简单，实则不好操作，gpt给的这个思路很好啊，重新弄一个新字符串然后拼接。代码随想录的那个太麻烦了，直接pass掉了。\n\n```c++\n#include <iostream>\n#include <cctype>  // 需要 isdigit()\nusing namespace std;\nstring replaceDigitsWithNumber(const string& s) {\n    string result;\n    for (char c : s) {\n        if (isdigit(c)) {\n            result += \"number\";  // 仅替换数字\n        } else {\n            result += c;  // 直接添加非数字字符\n        }\n    }\n    return result;\n}\nint main() {\n    string s;\n    cin >> s;  // 读取输入\n    cout << replaceDigitsWithNumber(s) << endl;  \n    return 0;\n}\n```\n\n主要难点在于如何去掉空格，使用快慢指针。\n\n```c++\nclass Solution {\npublic:\n    void reverse(string& s, int start, int end){ //翻转，区间写法：左闭右闭 []\n        for (int i = start, j = end; i < j; i++, j--) {\n            swap(s[i], s[j]);\n        }\n    }\n\n    void removeExtraSpaces(string& s) {//去除所有空格并在相邻单词之间添加空格, 快慢指针。\n        int slow = 0;   //整体思想参考https://programmercarl.com/0027.移除元素.html\n        for (int i = 0; i < s.size(); ++i) { //\n            if (s[i] != ' ') { //遇到非空格就处理，即删除所有空格。\n                if (slow != 0) s[slow++] = ' '; //手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。\n                while (i < s.size() && s[i] != ' ') { //补上该单词，遇到空格说明单词结束。\n                    s[slow++] = s[i++];\n                }\n            }\n        }\n        s.resize(slow); //slow的大小即为去除多余空格后的大小。\n    }\n\n    string reverseWords(string s) {\n        removeExtraSpaces(s); //去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。\n        reverse(s, 0, s.size() - 1);\n        int start = 0; //removeExtraSpaces后保证第一个单词的开始下标一定是0。\n        for (int i = 0; i <= s.size(); ++i) {\n            if (i == s.size() || s[i] == ' ') { //到达空格或者串尾，说明一个单词结束。进行翻转。\n                reverse(s, start, i - 1); //翻转，注意是左闭右闭 []的翻转。\n                start = i + 1; //更新下一个单词的开始下标start\n            }\n        }\n        return s;\n    }\n};\n```\n\n\n\n### 右旋字符串\n\n题目链接：[右旋字符串](https://kamacoder.com/problempage.php?pid=1065)\n\n题目思路：和前边有一题很类似，都是申请了一个额外的空间往上加，这题是先把后n个加上，再把前m-n个加上。\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    int n;\n    string s,ans;\n    cin>>n>>s;\n    int m=s.size();\n    for(int i=(m-n);i<m;i++) ans+=s[i];\n    for(int i=0;i<(m-n);i++) ans+=s[i];\n    cout<<ans;\n    return 0;\n}\n```\n\n代码随想录：它要求不申请额外的空间，这个就直接reverse两次，和上一题差不多，先全局再局部。\n\n```c++\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main() {\n    int n;\n    string s;\n    cin >> n;\n    cin >> s;\n    int len = s.size(); //获取长度\n    reverse(s.begin(), s.end()); // 整体反转\n    reverse(s.begin(), s.begin() + n); // 先反转前一段，长度n\n    reverse(s.begin() + n, s.end()); // 再反转后一段\n    cout << s << endl;\n\n} \n```\n\n\n\n### 找出字符串中第一个匹配项的下标\n\n题目链接：[28. 找出字符串中第一个匹配项的下标](https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/)\n\n暴力解法：思路正确，但是我写的代码写的太麻烦了，下边贴一份优雅的代码。时间复杂度O(m*n)。\n\n```c++\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int s[26]={0};\n        if(needle.size()>haystack.size()) return -1;\n        for(int i:needle) s[i-'a']++;\n        for(int i=0;i<haystack.size();i++)\n        {\n            int t;\n            if(s[haystack[i]-'a']==0) continue;\n            else{\n                t=i;\n                int a=t;\n                for(int j=0;j<needle.size();j++) if(haystack.size()-a>=needle.size() && haystack[a+j]==needle[j]) t++;\n            }\n            if((t-i)==needle.size()) return i;\n        }\n        return -1;\n    }\n};\n```\n\n```c++\nclass Solution {\npublic:\n    int strStr(string s, string p) {\n        int n = s.size(), m = p.size();\n        for(int i = 0; i <= n - m; i++){\n            int j = i, k = 0; \n            while(k < m and s[j] == p[k]){\n                j++;\n                k++;\n            }\n            if(k == m) return i;\n        }\n        return -1;\n    }\n};\n```\n\n**KMP解法：**当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。\n\n前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。代码随想录写的这个就很通俗易懂。\n\n**Nex数组构造：**\n\n1. 初始化\n2. 处理前后缀不相同的情况\n3. 处理前后缀相同的情况\n\n![](https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B23.gif)\n\n```c++\nclass Solution {\npublic:\n    void getNext(int* next, const string& s) {\n        int j = -1;\n        next[0] = j;\n        for(int i = 1; i < s.size(); i++) { // 注意i从1开始\n            while (j >= 0 && s[i] != s[j + 1]) { // 前后缀不相同了\n                j = next[j]; // 向前回退\n            }\n            if (s[i] == s[j + 1]) { // 找到相同的前后缀\n                j++;\n            }\n            next[i] = j; // 将j（前缀的长度）赋给next[i]\n        }\n    }\n    int strStr(string haystack, string needle) {\n        if (needle.size() == 0) {\n            return 0;\n        }\n\t\tvector<int> next(needle.size());\n\t\tgetNext(&next[0], needle);\n        int j = -1; // // 因为next数组里记录的起始位置为-1\n        for (int i = 0; i < haystack.size(); i++) { // 注意i就从0开始\n            while(j >= 0 && haystack[i] != needle[j + 1]) { // 不匹配\n                j = next[j]; // j 寻找之前匹配的位置\n            }\n            if (haystack[i] == needle[j + 1]) { // 匹配，j和i同时向后移动\n                j++; // i的增加在for循环里\n            }\n            if (j == (needle.size() - 1) ) { // 文本串s里出现了模式串t\n                return (i - needle.size() + 1);\n            }\n        }\n        return -1;\n    }\n};\n```\n\n\n\n### 重复的子字符串\n\n题目链接：[459. 重复的子字符串](https://leetcode.cn/problems/repeated-substring-pattern/)\n\n暴力解法：想用暴力法写一下，结果写了两个小时，还是看了题解写出来的，钻牛角尖了。我写的代码性能不如官方代码高，贴一下官方代码。\n\n```c++\nclass Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        int n = s.size();\n        for (int i = 1; i * 2 <= n; ++i) {\n            if (n % i == 0) {\n                bool match = true;\n                for (int j = i; j < n; ++j) {\n                    if (s[j] != s[j - i]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n\n```\n\n移动匹配：将两个 s 连在一起，并移除第一个和最后一个字符。如果 s 是该字符串的子串，那么 s 就满足题目要求。\n\n```c++\nclass Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        string t = s + s;\n        t.erase(t.begin()); t.erase(t.end() - 1); // 掐头去尾\n        if (t.find(s) != std::string::npos) return true; // r\n        return false;\n    }\n};\n```\n\nKMP实现：\n\n```c++\nclass Solution {\npublic:\n    void getNext (int* next, const string& s){\n        next[0] = -1;\n        int j = -1;\n        for(int i = 1;i < s.size(); i++){\n            while(j >= 0 && s[i] != s[j + 1]) {\n                j = next[j];\n            }\n            if(s[i] == s[j + 1]) {\n                j++;\n            }\n            next[i] = j;\n        }\n    }\n    bool repeatedSubstringPattern (string s) {\n        if (s.size() == 0) {\n            return false;\n        }\n        int next[s.size()];\n        getNext(next, s);\n        int len = s.size();\n        if (next[len - 1] != -1 && len % (len - (next[len - 1] + 1)) == 0) {\n            return true;\n        }\n        return false;\n    }\n};\n```\n\n","slug":"7day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqve001ha4wm3wd877t4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>​\t字符串，就是由字符连接而成的序列。常见的字符串问题包括字符串匹配问题、子串相关问题、前缀&#x2F;后缀相关问题、回文串相关问题、子序列相关问题等。</p>\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-string/\">344. 反转字符串</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverseString</span><span class=\"params\">(vector&lt;<span class=\"type\">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=s.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&lt;j;i++,j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> a=s[i];</span><br><span class=\"line\">            s[i]=s[j];</span><br><span class=\"line\">            s[j]=a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反转字符串-1\"><a href=\"#反转字符串-1\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-string-ii/\">541. 反转字符串 II</a></p>\n<p>注意一下reverse函数的用法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">reverseStr</span><span class=\"params\">(string s, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i += (<span class=\"number\">2</span> * k)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + k &lt;= s.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>()  i, s.<span class=\"built_in\">begin</span>() + i + k );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>() + i, s.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替换数字\"><a href=\"#替换数字\" class=\"headerlink\" title=\"替换数字\"></a>替换数字</h3><p>题目链接：<a href=\"https://kamacoder.com/problempage.php?pid=1064\">替换数字（第八期模拟笔试）</a></p>\n<p>题目思路：看似简单，实则不好操作，gpt给的这个思路很好啊，重新弄一个新字符串然后拼接。代码随想录的那个太麻烦了，直接pass掉了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span>  <span class=\"comment\">// 需要 isdigit()</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">replaceDigitsWithNumber</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">    string result;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;number&quot;</span>;  <span class=\"comment\">// 仅替换数字</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result += c;  <span class=\"comment\">// 直接添加非数字字符</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;  <span class=\"comment\">// 读取输入</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">replaceDigitsWithNumber</span>(s) &lt;&lt; endl;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要难点在于如何去掉空格，使用快慢指针。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(string&amp; s, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span></span>&#123; <span class=\"comment\">//翻转，区间写法：左闭右闭 []</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(s[i], s[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">removeExtraSpaces</span><span class=\"params\">(string&amp; s)</span> </span>&#123;<span class=\"comment\">//去除所有空格并在相邻单词之间添加空格, 快慢指针。</span></span><br><span class=\"line\">        <span class=\"type\">int</span> slow = <span class=\"number\">0</span>;   <span class=\"comment\">//整体思想参考https://programmercarl.com/0027.移除元素.html</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i) &#123; <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] != <span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//遇到非空格就处理，即删除所有空格。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (slow != <span class=\"number\">0</span>) s[slow++] = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; s[i] != <span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//补上该单词，遇到空格说明单词结束。</span></span><br><span class=\"line\">                    s[slow++] = s[i++];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">resize</span>(slow); <span class=\"comment\">//slow的大小即为去除多余空格后的大小。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">reverseWords</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">removeExtraSpaces</span>(s); <span class=\"comment\">//去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span></span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(s, <span class=\"number\">0</span>, s.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> start = <span class=\"number\">0</span>; <span class=\"comment\">//removeExtraSpaces后保证第一个单词的开始下标一定是0。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == s.<span class=\"built_in\">size</span>() || s[i] == <span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//到达空格或者串尾，说明一个单词结束。进行翻转。</span></span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s, start, i - <span class=\"number\">1</span>); <span class=\"comment\">//翻转，注意是左闭右闭 []的翻转。</span></span><br><span class=\"line\">                start = i + <span class=\"number\">1</span>; <span class=\"comment\">//更新下一个单词的开始下标start</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"右旋字符串\"><a href=\"#右旋字符串\" class=\"headerlink\" title=\"右旋字符串\"></a>右旋字符串</h3><p>题目链接：<a href=\"https://kamacoder.com/problempage.php?pid=1065\">右旋字符串</a></p>\n<p>题目思路：和前边有一题很类似，都是申请了一个额外的空间往上加，这题是先把后n个加上，再把前m-n个加上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string s,ans;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"type\">int</span> m=s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=(m-n);i&lt;m;i++) ans+=s[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;(m-n);i++) ans+=s[i];</span><br><span class=\"line\">    cout&lt;&lt;ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码随想录：它要求不申请额外的空间，这个就直接reverse两次，和上一题差不多，先全局再局部。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> len = s.<span class=\"built_in\">size</span>(); <span class=\"comment\">//获取长度</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 整体反转</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">begin</span>() + n); <span class=\"comment\">// 先反转前一段，长度n</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>() + n, s.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 再反转后一段</span></span><br><span class=\"line\">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"找出字符串中第一个匹配项的下标\"><a href=\"#找出字符串中第一个匹配项的下标\" class=\"headerlink\" title=\"找出字符串中第一个匹配项的下标\"></a>找出字符串中第一个匹配项的下标</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\">28. 找出字符串中第一个匹配项的下标</a></p>\n<p>暴力解法：思路正确，但是我写的代码写的太麻烦了，下边贴一份优雅的代码。时间复杂度O(m*n)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string haystack, string needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> s[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(needle.<span class=\"built_in\">size</span>()&gt;haystack.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i:needle) s[i-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;haystack.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[haystack[i]-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                t=i;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;needle.<span class=\"built_in\">size</span>();j++) <span class=\"keyword\">if</span>(haystack.<span class=\"built_in\">size</span>()-a&gt;=needle.<span class=\"built_in\">size</span>() &amp;&amp; haystack[a+j]==needle[j]) t++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((t-i)==needle.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string s, string p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>(), m = p.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - m; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j = i, k = <span class=\"number\">0</span>; </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k &lt; m <span class=\"keyword\">and</span> s[j] == p[k])&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k == m) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>KMP解法：</strong>当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</p>\n<p>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。代码随想录写的这个就很通俗易懂。</p>\n<p><strong>Nex数组构造：</strong></p>\n<ol>\n<li>初始化</li>\n<li>处理前后缀不相同的情况</li>\n<li>处理前后缀相同的情况</li>\n</ol>\n<p><img src=\"https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B23.gif\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i从1开始</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 前后缀不相同了</span></span><br><span class=\"line\">                j = next[j]; <span class=\"comment\">// 向前回退</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 找到相同的前后缀</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j; <span class=\"comment\">// 将j（前缀的长度）赋给next[i]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string haystack, string needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needle.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">next</span><span class=\"params\">(needle.size())</span></span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getNext</span>(&amp;next[<span class=\"number\">0</span>], needle);</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>; <span class=\"comment\">// // 因为next数组里记录的起始位置为-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; haystack.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i就从0开始</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; haystack[i] != needle[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 不匹配</span></span><br><span class=\"line\">                j = next[j]; <span class=\"comment\">// j 寻找之前匹配的位置</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack[i] == needle[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 匹配，j和i同时向后移动</span></span><br><span class=\"line\">                j++; <span class=\"comment\">// i的增加在for循环里</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == (needle.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) ) &#123; <span class=\"comment\">// 文本串s里出现了模式串t</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i - needle.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重复的子字符串\"><a href=\"#重复的子字符串\" class=\"headerlink\" title=\"重复的子字符串\"></a>重复的子字符串</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/repeated-substring-pattern/\">459. 重复的子字符串</a></p>\n<p>暴力解法：想用暴力法写一下，结果写了两个小时，还是看了题解写出来的，钻牛角尖了。我写的代码性能不如官方代码高，贴一下官方代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeatedSubstringPattern</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i * <span class=\"number\">2</span> &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">bool</span> match = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s[j] != s[j - i]) &#123;</span><br><span class=\"line\">                        match = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>移动匹配：将两个 s 连在一起，并移除第一个和最后一个字符。如果 s 是该字符串的子串，那么 s 就满足题目要求。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeatedSubstringPattern</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        string t = s + s;</span><br><span class=\"line\">        t.<span class=\"built_in\">erase</span>(t.<span class=\"built_in\">begin</span>()); t.<span class=\"built_in\">erase</span>(t.<span class=\"built_in\">end</span>() - <span class=\"number\">1</span>); <span class=\"comment\">// 掐头去尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.<span class=\"built_in\">find</span>(s) != std::string::npos) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// r</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>KMP实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span> <span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span></span>&#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; s.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == s[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeatedSubstringPattern</span> <span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> next[s.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">        <span class=\"built_in\">getNext</span>(next, s);</span><br><span class=\"line\">        <span class=\"type\">int</span> len = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next[len - <span class=\"number\">1</span>] != <span class=\"number\">-1</span> &amp;&amp; len % (len - (next[len - <span class=\"number\">1</span>] + <span class=\"number\">1</span>)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</div>","excerpt":"","more":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>​\t字符串，就是由字符连接而成的序列。常见的字符串问题包括字符串匹配问题、子串相关问题、前缀&#x2F;后缀相关问题、回文串相关问题、子序列相关问题等。</p>\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-string/\">344. 反转字符串</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverseString</span><span class=\"params\">(vector&lt;<span class=\"type\">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=s.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&lt;j;i++,j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> a=s[i];</span><br><span class=\"line\">            s[i]=s[j];</span><br><span class=\"line\">            s[j]=a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反转字符串-1\"><a href=\"#反转字符串-1\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/reverse-string-ii/\">541. 反转字符串 II</a></p>\n<p>注意一下reverse函数的用法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">reverseStr</span><span class=\"params\">(string s, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i += (<span class=\"number\">2</span> * k)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + k &lt;= s.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>()  i, s.<span class=\"built_in\">begin</span>() + i + k );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>() + i, s.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替换数字\"><a href=\"#替换数字\" class=\"headerlink\" title=\"替换数字\"></a>替换数字</h3><p>题目链接：<a href=\"https://kamacoder.com/problempage.php?pid=1064\">替换数字（第八期模拟笔试）</a></p>\n<p>题目思路：看似简单，实则不好操作，gpt给的这个思路很好啊，重新弄一个新字符串然后拼接。代码随想录的那个太麻烦了，直接pass掉了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span>  <span class=\"comment\">// 需要 isdigit()</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">replaceDigitsWithNumber</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">    string result;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(c)) &#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;number&quot;</span>;  <span class=\"comment\">// 仅替换数字</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result += c;  <span class=\"comment\">// 直接添加非数字字符</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;  <span class=\"comment\">// 读取输入</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">replaceDigitsWithNumber</span>(s) &lt;&lt; endl;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要难点在于如何去掉空格，使用快慢指针。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(string&amp; s, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span></span>&#123; <span class=\"comment\">//翻转，区间写法：左闭右闭 []</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(s[i], s[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">removeExtraSpaces</span><span class=\"params\">(string&amp; s)</span> </span>&#123;<span class=\"comment\">//去除所有空格并在相邻单词之间添加空格, 快慢指针。</span></span><br><span class=\"line\">        <span class=\"type\">int</span> slow = <span class=\"number\">0</span>;   <span class=\"comment\">//整体思想参考https://programmercarl.com/0027.移除元素.html</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i) &#123; <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] != <span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//遇到非空格就处理，即删除所有空格。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (slow != <span class=\"number\">0</span>) s[slow++] = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; s[i] != <span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//补上该单词，遇到空格说明单词结束。</span></span><br><span class=\"line\">                    s[slow++] = s[i++];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">resize</span>(slow); <span class=\"comment\">//slow的大小即为去除多余空格后的大小。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">reverseWords</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">removeExtraSpaces</span>(s); <span class=\"comment\">//去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span></span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(s, <span class=\"number\">0</span>, s.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> start = <span class=\"number\">0</span>; <span class=\"comment\">//removeExtraSpaces后保证第一个单词的开始下标一定是0。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == s.<span class=\"built_in\">size</span>() || s[i] == <span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//到达空格或者串尾，说明一个单词结束。进行翻转。</span></span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s, start, i - <span class=\"number\">1</span>); <span class=\"comment\">//翻转，注意是左闭右闭 []的翻转。</span></span><br><span class=\"line\">                start = i + <span class=\"number\">1</span>; <span class=\"comment\">//更新下一个单词的开始下标start</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"右旋字符串\"><a href=\"#右旋字符串\" class=\"headerlink\" title=\"右旋字符串\"></a>右旋字符串</h3><p>题目链接：<a href=\"https://kamacoder.com/problempage.php?pid=1065\">右旋字符串</a></p>\n<p>题目思路：和前边有一题很类似，都是申请了一个额外的空间往上加，这题是先把后n个加上，再把前m-n个加上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string s,ans;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"type\">int</span> m=s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=(m-n);i&lt;m;i++) ans+=s[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;(m-n);i++) ans+=s[i];</span><br><span class=\"line\">    cout&lt;&lt;ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码随想录：它要求不申请额外的空间，这个就直接reverse两次，和上一题差不多，先全局再局部。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> len = s.<span class=\"built_in\">size</span>(); <span class=\"comment\">//获取长度</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 整体反转</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">begin</span>() + n); <span class=\"comment\">// 先反转前一段，长度n</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>() + n, s.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 再反转后一段</span></span><br><span class=\"line\">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"找出字符串中第一个匹配项的下标\"><a href=\"#找出字符串中第一个匹配项的下标\" class=\"headerlink\" title=\"找出字符串中第一个匹配项的下标\"></a>找出字符串中第一个匹配项的下标</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\">28. 找出字符串中第一个匹配项的下标</a></p>\n<p>暴力解法：思路正确，但是我写的代码写的太麻烦了，下边贴一份优雅的代码。时间复杂度O(m*n)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string haystack, string needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> s[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(needle.<span class=\"built_in\">size</span>()&gt;haystack.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i:needle) s[i-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;haystack.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[haystack[i]-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                t=i;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;needle.<span class=\"built_in\">size</span>();j++) <span class=\"keyword\">if</span>(haystack.<span class=\"built_in\">size</span>()-a&gt;=needle.<span class=\"built_in\">size</span>() &amp;&amp; haystack[a+j]==needle[j]) t++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((t-i)==needle.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string s, string p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>(), m = p.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - m; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j = i, k = <span class=\"number\">0</span>; </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k &lt; m <span class=\"keyword\">and</span> s[j] == p[k])&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k == m) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>KMP解法：</strong>当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</p>\n<p>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。代码随想录写的这个就很通俗易懂。</p>\n<p><strong>Nex数组构造：</strong></p>\n<ol>\n<li>初始化</li>\n<li>处理前后缀不相同的情况</li>\n<li>处理前后缀相同的情况</li>\n</ol>\n<p><img src=\"https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B23.gif\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i从1开始</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 前后缀不相同了</span></span><br><span class=\"line\">                j = next[j]; <span class=\"comment\">// 向前回退</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == s[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 找到相同的前后缀</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j; <span class=\"comment\">// 将j（前缀的长度）赋给next[i]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(string haystack, string needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needle.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">next</span><span class=\"params\">(needle.size())</span></span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getNext</span>(&amp;next[<span class=\"number\">0</span>], needle);</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>; <span class=\"comment\">// // 因为next数组里记录的起始位置为-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; haystack.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 注意i就从0开始</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; haystack[i] != needle[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 不匹配</span></span><br><span class=\"line\">                j = next[j]; <span class=\"comment\">// j 寻找之前匹配的位置</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack[i] == needle[j + <span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 匹配，j和i同时向后移动</span></span><br><span class=\"line\">                j++; <span class=\"comment\">// i的增加在for循环里</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == (needle.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) ) &#123; <span class=\"comment\">// 文本串s里出现了模式串t</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i - needle.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重复的子字符串\"><a href=\"#重复的子字符串\" class=\"headerlink\" title=\"重复的子字符串\"></a>重复的子字符串</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/repeated-substring-pattern/\">459. 重复的子字符串</a></p>\n<p>暴力解法：想用暴力法写一下，结果写了两个小时，还是看了题解写出来的，钻牛角尖了。我写的代码性能不如官方代码高，贴一下官方代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeatedSubstringPattern</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i * <span class=\"number\">2</span> &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">bool</span> match = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s[j] != s[j - i]) &#123;</span><br><span class=\"line\">                        match = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>移动匹配：将两个 s 连在一起，并移除第一个和最后一个字符。如果 s 是该字符串的子串，那么 s 就满足题目要求。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeatedSubstringPattern</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        string t = s + s;</span><br><span class=\"line\">        t.<span class=\"built_in\">erase</span>(t.<span class=\"built_in\">begin</span>()); t.<span class=\"built_in\">erase</span>(t.<span class=\"built_in\">end</span>() - <span class=\"number\">1</span>); <span class=\"comment\">// 掐头去尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.<span class=\"built_in\">find</span>(s) != std::string::npos) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// r</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>KMP实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getNext</span> <span class=\"params\">(<span class=\"type\">int</span>* next, <span class=\"type\">const</span> string&amp; s)</span></span>&#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; s.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] != s[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == s[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeatedSubstringPattern</span> <span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> next[s.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">        <span class=\"built_in\">getNext</span>(next, s);</span><br><span class=\"line\">        <span class=\"type\">int</span> len = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next[len - <span class=\"number\">1</span>] != <span class=\"number\">-1</span> &amp;&amp; len % (len - (next[len - <span class=\"number\">1</span>] + <span class=\"number\">1</span>)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"代码随想录--栈·队列","date":"2025-02-06T16:10:23.023Z","updated":"2025-02-07T15:15:19.177Z","description":"代码随想录--栈·队列","_content":"\n## 栈·队列\n\n​                                     ![栈：先进后出](https://oi-wiki.org/ds/images/stack.svg)                                               ![队列：先进先出](https://oi-wiki.org/ds/images/queue.svg)\n\n### stack\n\nSTL 中的 `stack` 容器提供了一众成员函数以供调用，其中较为常用的有：\n\n- 元素访问\n  - `st.top()` 返回栈顶\n- 修改\n  - `st.push()` 插入传入的参数到栈顶\n  - `st.pop()` 弹出栈顶\n- 容量\n  - `st.empty()` 返回是否为空\n  - `st.size()` 返回元素数量\n\n### queue \n\nSTL 中的 `queue` 容器提供了一众成员函数以供调用。其中较为常用的有：\n\n- 元素访问\n  - `q.front()` 返回队首元素\n  - `q.back()` 返回队尾元素\n- 修改\n  - `q.push()` 在队尾插入元素\n  - `q.pop()` 弹出队首元素\n- 容量\n  - `q.empty()` 队列是否为空\n  - `q.size()` 返回队列中元素的数量\n\n### deque\n\nSTL 中的 `deque` 容器提供了一众成员函数以供调用。其中较为常用的有：\n\n- 元素访问\n  - `q.front()` 返回队首元素\n  - `q.back()` 返回队尾元素\n- 修改\n  - `q.push_back()` 在队尾插入元素\n  - `q.pop_back()` 弹出队尾元素\n  - `q.push_front()` 在队首插入元素\n  - `q.pop_front()` 弹出队首元素\n  - `q.insert()` 在指定位置前插入元素（传入迭代器和元素）\n  - `q.erase()` 删除指定位置的元素（传入迭代器）\n- 容量\n  - `q.empty()` 队列是否为空\n  - `q.size()` 返回队列中元素的数量\n\n此外，`deque` 还提供了一些运算符。其中较为常用的有：\n\n- 使用赋值运算符 `=` 为 `deque` 赋值，类似 `queue`。\n\n- 使用 `[]` 访问元素，类似 `vector`。\n\n  \n\n### 用栈实现队列\n\n题目链接：[232. 用栈实现队列](https://leetcode.cn/problems/implement-queue-using-stacks/)\n\n```c++\nclass MyQueue {\nprivate:\n    // 如果 B 栈为空，将 A 栈中的元素倒入 B 栈\n    void moveToB() {\n        if (B.empty()) {\n            while (!A.empty()) {\n                B.push(A.top());\n                A.pop();\n            }\n        }\n    }\npublic:\n    stack<int> A, B;\n    MyQueue() {\n    }\n    void push(int x) {\n        A.push(x);\n    }\n    int pop() {\n        moveToB(); // 移动元素到 B 栈\n        int val = B.top();\n        B.pop();\n        return val;\n    }\n    int peek() {\n        moveToB(); // 移动元素到 B 栈\n        return B.top();\n    }\n    bool empty() {\n        return A.empty() && B.empty();\n    }\n};\n\n```\n\n\n\n### 用队列实现栈\n\n题目链接：[225. 用队列实现栈](https://leetcode.cn/problems/implement-stack-using-queues/)\n\n#### 方法一：使用 **一个队列**\n\n1. **push(x)**：\n   - 首先，将元素 `x` 入队到队列末尾。\n   - 然后，将队列中前面已有的元素依次出队，再重新入队到队列末尾。\n     这样，队列的前端就始终是最新压入的元素，相当于实现了栈的“后进先出（LIFO）”顺序。\n2. **pop()**：\n   - 直接将队首元素出队即可。因为在上一步的处理里，队首元素就是栈顶。\n3. **top()**：\n   - 返回队首元素（不弹出）。\n4. **empty()**：\n   - 判断队列是否为空。\n\n```c++\nclass MyStack {\npublic:\n    queue<int> q;\n\n    MyStack() {\n    }\n    \n    // 每次 push 后，把前面的 (size - 1) 个元素依次出队并重新入队，确保新元素在队首\n    void push(int x) {\n        // 1. 新元素先入队\n        q.push(x);\n        // 2. 将前面的元素依次移到末尾\n        int n = q.size();\n        // 只需要将前面的 (n - 1) 个元素移动到末尾\n        for(int i = 0; i < n - 1; i++) {\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    int pop() {\n        int val = q.front();  // 由于 push 中的旋转操作，队首就是栈顶\n        q.pop();\n        return val;\n    }\n    \n    int top() {\n        return q.front();     // 队首即为栈顶\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};\n```\n\n\n\n#### 方法二：使用 **两个队列**\n\n1. **队列 A** 和 **队列 B** 协同工作，保证其中一个队列始终存放当前所有元素，另一个队列用来做辅助操作。\n2. push(x)：\n   - 把新元素直接入队到**空**队列中（或者你可以总是把它放到 A，然后把 A 里旧的元素转移到 B，具体实现略有差异）。\n3. pop()：\n   - 在 `pop()` 之前，我们需要把除最后一个元素外的所有元素，从一个队列（有数据的队列）依次出队并入队到另一个空队列，让最后一个元素留在原队列，然后弹出这个元素，这相当于栈顶元素。\n4. top()：\n   - 类似 `pop()`，只是查看最后一个元素而不把它真正弹出。\n5. empty()：\n   - 两个队列都为空即为真。\n\n```c++\n#include <queue>\nusing namespace std;\n\nclass MyStack {\npublic:\n    queue<int> q1, q2;  // 两个队列\n\n    MyStack() {\n    }\n    \n    void push(int x) {\n        // 1. 新元素先入空的队列 q2\n        q2.push(x);\n\n        // 2. 把 q1 中所有元素依次移到 q2 中\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n\n        // 3. 交换 q1 和 q2，保证所有元素又回到 q1，q2 变空\n        swap(q1, q2);\n    }\n    \n    int pop() {\n        // 队首就是栈顶\n        int val = q1.front();\n        q1.pop();\n        return val;\n    }\n    \n    int top() {\n        return q1.front();\n    }\n    \n    bool empty() {\n        return q1.empty() && q2.empty();\n    }\n};\n\n```\n\n\n\n### 有效的括号\n\n题目链接：[20. 有效的括号](https://leetcode.cn/problems/valid-parentheses/)\n\n题目思路：先判断一下s的长度是否为偶数，如果不是就返回false，再将全部的左符号压入栈中，然后开始判断剩余的符号是否可以匹配，如果不能就返回false，将s循环结束，如果全部匹配成功，最后应该栈是空的，如果不是返回false。\n\n```c++\nclass Solution {\npublic:\n    bool isValid(string s) {\n        int n=s.size();\n        if(n%2!=0) return false;\n        stack<char> t;\n        for(int i=0;i<n;i++)\n        {\n            if(s[i]=='(') t.push(')');\n            else if(s[i]=='{') t.push('}');\n            else if(s[i]=='[') t.push(']');\n            else if(t.empty() || t.top()!=s[i]) return false;\n            else t.pop();\n        }\n        return t.empty();\n    }\n};\n```\n\n\n\n### 删除字符串中的所有相邻重复项\n\n题目链接：[1047. 删除字符串中的所有相邻重复项](https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/)\n\n建栈的写法，性能太差了。\n\n```c++\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        stack<char> t;\n        int n=s.size();\n        for(int i=0;i<n;i++)\n        {\n            if(!t.empty() && s[i]==t.top()) t.pop();\n            else t.push(s[i]); \n        } \n        string result;\n        while(!t.empty())\n        {\n            result=t.top()+result;\n            t.pop();\n        }\n        return result;\n    }\n};\n```\n\nstring自己就可以做栈，string有pop和push接口，性能很高。\n\n```c++\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        string stk;\n        for (char ch : s) {\n            if (!stk.empty() && stk.back() == ch) {\n                stk.pop_back();\n            } else {\n                stk.push_back(ch);\n            }\n        }\n        return stk;\n    }\n};\n```\n\n\n\n### 逆波兰表达式求值\n\n题目链接：[150. 逆波兰表达式求值](https://leetcode.cn/problems/evaluate-reverse-polish-notation/)\n\n题目挺简单的，就是一个点需要注意：\n\n**`stoi()`**：\n\n- `stoi` 是一个将 `std::string` 类型转换为 `int` 的函数。如果 `tokens[i]` 是一个有效的整数表示，`stoi(tokens[i])` 将返回对应的整数值。\n\n```c++\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> t;\n        int n=tokens.size(),re;\n        for(int i=0;i<n;i++)\n        {\n            if(tokens[i]==\"+\") \n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=a+b;\n                t.push(re);\n            }\n            else if(tokens[i]==\"-\")\n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=b-a;\n                t.push(re);\n            }\n            else if(tokens[i]==\"*\")\n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=b*a;\n                t.push(re);\n            }\n            else if(tokens[i]==\"/\")\n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=b/a;\n                t.push(re);\n            }\n            else t.push(stoi(tokens[i]));\n        }\n        return t.top();\n    }\n};\n```\n\n\n\n### 滑动窗口最大值\n\n题目链接：[239. 滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)\n\n双端队列：队列中元素个数大于k，就删除队首元素，若入队元素大于队列中的元素，则把队列中的元素弹出。\n\n```c++\nclass Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        vector<int> ans;\n        deque<int> q; // 双端队列\n        for (int i = 0; i < nums.size(); i++) {\n            // 1. 入\n            while (!q.empty() && nums[q.back()] <= nums[i]) {\n                q.pop_back(); // 维护 q 的单调性\n            }\n            q.push_back(i); // 入队\n            // 2. 出\n            if (i - q.front() >= k) { // 队首已经离开窗口了\n                q.pop_front();\n            }\n            // 3. 记录答案\n            if (i >= k - 1) {\n                // 由于队首到队尾单调递减，所以窗口最大值就是队首\n                ans.push_back(nums[q.front()]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n### 前 K 个高频元素\n\n题目链接：[347. 前 K 个高频元素](https://leetcode.cn/problems/top-k-frequent-elements/)\n\n堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。**小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。**\n\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.jpg\" style=\"zoom: 50%;\" />\n\n```c++\nclass Solution {\npublic:\n    // 小顶堆\n    class mycomparison {\n    public:\n        bool operator()(const pair<int, int>& lhs, const pair<int, int>& rhs) {\n            return lhs.second > rhs.second;\n        }\n    };\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        // 要统计元素出现频率\n        unordered_map<int, int> map; // map<nums[i],对应出现的次数>\n        for (int i = 0; i < nums.size(); i++) {\n            map[nums[i]]++;\n        }\n\n        // 对频率排序\n        // 定义一个小顶堆，大小为k\n        priority_queue<pair<int, int>, vector<pair<int, int>>, mycomparison> pri_que;\n\n        // 用固定大小为k的小顶堆，扫面所有频率的数值\n        for (unordered_map<int, int>::iterator it = map.begin(); it != map.end(); it++) {\n            pri_que.push(*it);\n            if (pri_que.size() > k) { // 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k\n                pri_que.pop();\n            }\n        }\n\n        // 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组\n        vector<int> result(k);\n        for (int i = k - 1; i >= 0; i--) {\n            result[i] = pri_que.top().first;\n            pri_que.pop();\n        }\n        return result;\n\n    }\n};\n```\n\n","source":"_posts/8day.md","raw":"---\ntitle: 代码随想录--栈·队列\ndate: 2025-02-07 00:10:23---\ntags: [数据结构与算法,栈,队列,双端队列,堆,queue,stack,deque]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--栈·队列\n---\n\n## 栈·队列\n\n​                                     ![栈：先进后出](https://oi-wiki.org/ds/images/stack.svg)                                               ![队列：先进先出](https://oi-wiki.org/ds/images/queue.svg)\n\n### stack\n\nSTL 中的 `stack` 容器提供了一众成员函数以供调用，其中较为常用的有：\n\n- 元素访问\n  - `st.top()` 返回栈顶\n- 修改\n  - `st.push()` 插入传入的参数到栈顶\n  - `st.pop()` 弹出栈顶\n- 容量\n  - `st.empty()` 返回是否为空\n  - `st.size()` 返回元素数量\n\n### queue \n\nSTL 中的 `queue` 容器提供了一众成员函数以供调用。其中较为常用的有：\n\n- 元素访问\n  - `q.front()` 返回队首元素\n  - `q.back()` 返回队尾元素\n- 修改\n  - `q.push()` 在队尾插入元素\n  - `q.pop()` 弹出队首元素\n- 容量\n  - `q.empty()` 队列是否为空\n  - `q.size()` 返回队列中元素的数量\n\n### deque\n\nSTL 中的 `deque` 容器提供了一众成员函数以供调用。其中较为常用的有：\n\n- 元素访问\n  - `q.front()` 返回队首元素\n  - `q.back()` 返回队尾元素\n- 修改\n  - `q.push_back()` 在队尾插入元素\n  - `q.pop_back()` 弹出队尾元素\n  - `q.push_front()` 在队首插入元素\n  - `q.pop_front()` 弹出队首元素\n  - `q.insert()` 在指定位置前插入元素（传入迭代器和元素）\n  - `q.erase()` 删除指定位置的元素（传入迭代器）\n- 容量\n  - `q.empty()` 队列是否为空\n  - `q.size()` 返回队列中元素的数量\n\n此外，`deque` 还提供了一些运算符。其中较为常用的有：\n\n- 使用赋值运算符 `=` 为 `deque` 赋值，类似 `queue`。\n\n- 使用 `[]` 访问元素，类似 `vector`。\n\n  \n\n### 用栈实现队列\n\n题目链接：[232. 用栈实现队列](https://leetcode.cn/problems/implement-queue-using-stacks/)\n\n```c++\nclass MyQueue {\nprivate:\n    // 如果 B 栈为空，将 A 栈中的元素倒入 B 栈\n    void moveToB() {\n        if (B.empty()) {\n            while (!A.empty()) {\n                B.push(A.top());\n                A.pop();\n            }\n        }\n    }\npublic:\n    stack<int> A, B;\n    MyQueue() {\n    }\n    void push(int x) {\n        A.push(x);\n    }\n    int pop() {\n        moveToB(); // 移动元素到 B 栈\n        int val = B.top();\n        B.pop();\n        return val;\n    }\n    int peek() {\n        moveToB(); // 移动元素到 B 栈\n        return B.top();\n    }\n    bool empty() {\n        return A.empty() && B.empty();\n    }\n};\n\n```\n\n\n\n### 用队列实现栈\n\n题目链接：[225. 用队列实现栈](https://leetcode.cn/problems/implement-stack-using-queues/)\n\n#### 方法一：使用 **一个队列**\n\n1. **push(x)**：\n   - 首先，将元素 `x` 入队到队列末尾。\n   - 然后，将队列中前面已有的元素依次出队，再重新入队到队列末尾。\n     这样，队列的前端就始终是最新压入的元素，相当于实现了栈的“后进先出（LIFO）”顺序。\n2. **pop()**：\n   - 直接将队首元素出队即可。因为在上一步的处理里，队首元素就是栈顶。\n3. **top()**：\n   - 返回队首元素（不弹出）。\n4. **empty()**：\n   - 判断队列是否为空。\n\n```c++\nclass MyStack {\npublic:\n    queue<int> q;\n\n    MyStack() {\n    }\n    \n    // 每次 push 后，把前面的 (size - 1) 个元素依次出队并重新入队，确保新元素在队首\n    void push(int x) {\n        // 1. 新元素先入队\n        q.push(x);\n        // 2. 将前面的元素依次移到末尾\n        int n = q.size();\n        // 只需要将前面的 (n - 1) 个元素移动到末尾\n        for(int i = 0; i < n - 1; i++) {\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    int pop() {\n        int val = q.front();  // 由于 push 中的旋转操作，队首就是栈顶\n        q.pop();\n        return val;\n    }\n    \n    int top() {\n        return q.front();     // 队首即为栈顶\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};\n```\n\n\n\n#### 方法二：使用 **两个队列**\n\n1. **队列 A** 和 **队列 B** 协同工作，保证其中一个队列始终存放当前所有元素，另一个队列用来做辅助操作。\n2. push(x)：\n   - 把新元素直接入队到**空**队列中（或者你可以总是把它放到 A，然后把 A 里旧的元素转移到 B，具体实现略有差异）。\n3. pop()：\n   - 在 `pop()` 之前，我们需要把除最后一个元素外的所有元素，从一个队列（有数据的队列）依次出队并入队到另一个空队列，让最后一个元素留在原队列，然后弹出这个元素，这相当于栈顶元素。\n4. top()：\n   - 类似 `pop()`，只是查看最后一个元素而不把它真正弹出。\n5. empty()：\n   - 两个队列都为空即为真。\n\n```c++\n#include <queue>\nusing namespace std;\n\nclass MyStack {\npublic:\n    queue<int> q1, q2;  // 两个队列\n\n    MyStack() {\n    }\n    \n    void push(int x) {\n        // 1. 新元素先入空的队列 q2\n        q2.push(x);\n\n        // 2. 把 q1 中所有元素依次移到 q2 中\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n\n        // 3. 交换 q1 和 q2，保证所有元素又回到 q1，q2 变空\n        swap(q1, q2);\n    }\n    \n    int pop() {\n        // 队首就是栈顶\n        int val = q1.front();\n        q1.pop();\n        return val;\n    }\n    \n    int top() {\n        return q1.front();\n    }\n    \n    bool empty() {\n        return q1.empty() && q2.empty();\n    }\n};\n\n```\n\n\n\n### 有效的括号\n\n题目链接：[20. 有效的括号](https://leetcode.cn/problems/valid-parentheses/)\n\n题目思路：先判断一下s的长度是否为偶数，如果不是就返回false，再将全部的左符号压入栈中，然后开始判断剩余的符号是否可以匹配，如果不能就返回false，将s循环结束，如果全部匹配成功，最后应该栈是空的，如果不是返回false。\n\n```c++\nclass Solution {\npublic:\n    bool isValid(string s) {\n        int n=s.size();\n        if(n%2!=0) return false;\n        stack<char> t;\n        for(int i=0;i<n;i++)\n        {\n            if(s[i]=='(') t.push(')');\n            else if(s[i]=='{') t.push('}');\n            else if(s[i]=='[') t.push(']');\n            else if(t.empty() || t.top()!=s[i]) return false;\n            else t.pop();\n        }\n        return t.empty();\n    }\n};\n```\n\n\n\n### 删除字符串中的所有相邻重复项\n\n题目链接：[1047. 删除字符串中的所有相邻重复项](https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/)\n\n建栈的写法，性能太差了。\n\n```c++\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        stack<char> t;\n        int n=s.size();\n        for(int i=0;i<n;i++)\n        {\n            if(!t.empty() && s[i]==t.top()) t.pop();\n            else t.push(s[i]); \n        } \n        string result;\n        while(!t.empty())\n        {\n            result=t.top()+result;\n            t.pop();\n        }\n        return result;\n    }\n};\n```\n\nstring自己就可以做栈，string有pop和push接口，性能很高。\n\n```c++\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        string stk;\n        for (char ch : s) {\n            if (!stk.empty() && stk.back() == ch) {\n                stk.pop_back();\n            } else {\n                stk.push_back(ch);\n            }\n        }\n        return stk;\n    }\n};\n```\n\n\n\n### 逆波兰表达式求值\n\n题目链接：[150. 逆波兰表达式求值](https://leetcode.cn/problems/evaluate-reverse-polish-notation/)\n\n题目挺简单的，就是一个点需要注意：\n\n**`stoi()`**：\n\n- `stoi` 是一个将 `std::string` 类型转换为 `int` 的函数。如果 `tokens[i]` 是一个有效的整数表示，`stoi(tokens[i])` 将返回对应的整数值。\n\n```c++\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> t;\n        int n=tokens.size(),re;\n        for(int i=0;i<n;i++)\n        {\n            if(tokens[i]==\"+\") \n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=a+b;\n                t.push(re);\n            }\n            else if(tokens[i]==\"-\")\n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=b-a;\n                t.push(re);\n            }\n            else if(tokens[i]==\"*\")\n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=b*a;\n                t.push(re);\n            }\n            else if(tokens[i]==\"/\")\n            {\n                int a=t.top();t.pop();\n                int b=t.top();t.pop();\n                re=b/a;\n                t.push(re);\n            }\n            else t.push(stoi(tokens[i]));\n        }\n        return t.top();\n    }\n};\n```\n\n\n\n### 滑动窗口最大值\n\n题目链接：[239. 滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)\n\n双端队列：队列中元素个数大于k，就删除队首元素，若入队元素大于队列中的元素，则把队列中的元素弹出。\n\n```c++\nclass Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        vector<int> ans;\n        deque<int> q; // 双端队列\n        for (int i = 0; i < nums.size(); i++) {\n            // 1. 入\n            while (!q.empty() && nums[q.back()] <= nums[i]) {\n                q.pop_back(); // 维护 q 的单调性\n            }\n            q.push_back(i); // 入队\n            // 2. 出\n            if (i - q.front() >= k) { // 队首已经离开窗口了\n                q.pop_front();\n            }\n            // 3. 记录答案\n            if (i >= k - 1) {\n                // 由于队首到队尾单调递减，所以窗口最大值就是队首\n                ans.push_back(nums[q.front()]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n\n\n### 前 K 个高频元素\n\n题目链接：[347. 前 K 个高频元素](https://leetcode.cn/problems/top-k-frequent-elements/)\n\n堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。**小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。**\n\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.jpg\" style=\"zoom: 50%;\" />\n\n```c++\nclass Solution {\npublic:\n    // 小顶堆\n    class mycomparison {\n    public:\n        bool operator()(const pair<int, int>& lhs, const pair<int, int>& rhs) {\n            return lhs.second > rhs.second;\n        }\n    };\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        // 要统计元素出现频率\n        unordered_map<int, int> map; // map<nums[i],对应出现的次数>\n        for (int i = 0; i < nums.size(); i++) {\n            map[nums[i]]++;\n        }\n\n        // 对频率排序\n        // 定义一个小顶堆，大小为k\n        priority_queue<pair<int, int>, vector<pair<int, int>>, mycomparison> pri_que;\n\n        // 用固定大小为k的小顶堆，扫面所有频率的数值\n        for (unordered_map<int, int>::iterator it = map.begin(); it != map.end(); it++) {\n            pri_que.push(*it);\n            if (pri_que.size() > k) { // 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k\n                pri_que.pop();\n            }\n        }\n\n        // 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组\n        vector<int> result(k);\n        for (int i = k - 1; i >= 0; i--) {\n            result[i] = pri_que.top().first;\n            pri_que.pop();\n        }\n        return result;\n\n    }\n};\n```\n\n","slug":"8day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvf001ka4wmflx73be4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"栈·队列\"><a href=\"#栈·队列\" class=\"headerlink\" title=\"栈·队列\"></a>栈·队列</h2><p>​                                     <img src=\"https://oi-wiki.org/ds/images/stack.svg\" alt=\"栈：先进后出\">                                               <img src=\"https://oi-wiki.org/ds/images/queue.svg\" alt=\"队列：先进先出\"></p>\n<h3 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack\"></a>stack</h3><p>STL 中的 <code>stack</code> 容器提供了一众成员函数以供调用，其中较为常用的有：</p>\n<ul>\n<li>元素访问<ul>\n<li><code>st.top()</code> 返回栈顶</li>\n</ul>\n</li>\n<li>修改<ul>\n<li><code>st.push()</code> 插入传入的参数到栈顶</li>\n<li><code>st.pop()</code> 弹出栈顶</li>\n</ul>\n</li>\n<li>容量<ul>\n<li><code>st.empty()</code> 返回是否为空</li>\n<li><code>st.size()</code> 返回元素数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h3><p>STL 中的 <code>queue</code> 容器提供了一众成员函数以供调用。其中较为常用的有：</p>\n<ul>\n<li>元素访问<ul>\n<li><code>q.front()</code> 返回队首元素</li>\n<li><code>q.back()</code> 返回队尾元素</li>\n</ul>\n</li>\n<li>修改<ul>\n<li><code>q.push()</code> 在队尾插入元素</li>\n<li><code>q.pop()</code> 弹出队首元素</li>\n</ul>\n</li>\n<li>容量<ul>\n<li><code>q.empty()</code> 队列是否为空</li>\n<li><code>q.size()</code> 返回队列中元素的数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><p>STL 中的 <code>deque</code> 容器提供了一众成员函数以供调用。其中较为常用的有：</p>\n<ul>\n<li>元素访问<ul>\n<li><code>q.front()</code> 返回队首元素</li>\n<li><code>q.back()</code> 返回队尾元素</li>\n</ul>\n</li>\n<li>修改<ul>\n<li><code>q.push_back()</code> 在队尾插入元素</li>\n<li><code>q.pop_back()</code> 弹出队尾元素</li>\n<li><code>q.push_front()</code> 在队首插入元素</li>\n<li><code>q.pop_front()</code> 弹出队首元素</li>\n<li><code>q.insert()</code> 在指定位置前插入元素（传入迭代器和元素）</li>\n<li><code>q.erase()</code> 删除指定位置的元素（传入迭代器）</li>\n</ul>\n</li>\n<li>容量<ul>\n<li><code>q.empty()</code> 队列是否为空</li>\n<li><code>q.size()</code> 返回队列中元素的数量</li>\n</ul>\n</li>\n</ul>\n<p>此外，<code>deque</code> 还提供了一些运算符。其中较为常用的有：</p>\n<ul>\n<li><p>使用赋值运算符 <code>=</code> 为 <code>deque</code> 赋值，类似 <code>queue</code>。</p>\n</li>\n<li><p>使用 <code>[]</code> 访问元素，类似 <code>vector</code>。</p>\n</li>\n</ul>\n<h3 id=\"用栈实现队列\"><a href=\"#用栈实现队列\" class=\"headerlink\" title=\"用栈实现队列\"></a>用栈实现队列</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\">232. 用栈实现队列</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 如果 B 栈为空，将 A 栈中的元素倒入 B 栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveToB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (B.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!A.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                B.<span class=\"built_in\">push</span>(A.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                A.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; A, B;</span><br><span class=\"line\">    <span class=\"built_in\">MyQueue</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        A.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">moveToB</span>(); <span class=\"comment\">// 移动元素到 B 栈</span></span><br><span class=\"line\">        <span class=\"type\">int</span> val = B.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        B.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">moveToB</span>(); <span class=\"comment\">// 移动元素到 B 栈</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> B.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A.<span class=\"built_in\">empty</span>() &amp;&amp; B.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"用队列实现栈\"><a href=\"#用队列实现栈\" class=\"headerlink\" title=\"用队列实现栈\"></a>用队列实现栈</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/implement-stack-using-queues/\">225. 用队列实现栈</a></p>\n<h4 id=\"方法一：使用-一个队列\"><a href=\"#方法一：使用-一个队列\" class=\"headerlink\" title=\"方法一：使用 一个队列\"></a>方法一：使用 <strong>一个队列</strong></h4><ol>\n<li>**push(x)**：<ul>\n<li>首先，将元素 <code>x</code> 入队到队列末尾。</li>\n<li>然后，将队列中前面已有的元素依次出队，再重新入队到队列末尾。<br>这样，队列的前端就始终是最新压入的元素，相当于实现了栈的“后进先出（LIFO）”顺序。</li>\n</ul>\n</li>\n<li>**pop()**：<ul>\n<li>直接将队首元素出队即可。因为在上一步的处理里，队首元素就是栈顶。</li>\n</ul>\n</li>\n<li>**top()**：<ul>\n<li>返回队首元素（不弹出）。</li>\n</ul>\n</li>\n<li>**empty()**：<ul>\n<li>判断队列是否为空。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MyStack</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 每次 push 后，把前面的 (size - 1) 个元素依次出队并重新入队，确保新元素在队首</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 新元素先入队</span></span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 将前面的元素依次移到末尾</span></span><br><span class=\"line\">        <span class=\"type\">int</span> n = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 只需要将前面的 (n - 1) 个元素移动到末尾</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val = q.<span class=\"built_in\">front</span>();  <span class=\"comment\">// 由于 push 中的旋转操作，队首就是栈顶</span></span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q.<span class=\"built_in\">front</span>();     <span class=\"comment\">// 队首即为栈顶</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"方法二：使用-两个队列\"><a href=\"#方法二：使用-两个队列\" class=\"headerlink\" title=\"方法二：使用 两个队列\"></a>方法二：使用 <strong>两个队列</strong></h4><ol>\n<li><strong>队列 A</strong> 和 <strong>队列 B</strong> 协同工作，保证其中一个队列始终存放当前所有元素，另一个队列用来做辅助操作。</li>\n<li>push(x)：<ul>\n<li>把新元素直接入队到<strong>空</strong>队列中（或者你可以总是把它放到 A，然后把 A 里旧的元素转移到 B，具体实现略有差异）。</li>\n</ul>\n</li>\n<li>pop()：<ul>\n<li>在 <code>pop()</code> 之前，我们需要把除最后一个元素外的所有元素，从一个队列（有数据的队列）依次出队并入队到另一个空队列，让最后一个元素留在原队列，然后弹出这个元素，这相当于栈顶元素。</li>\n</ul>\n</li>\n<li>top()：<ul>\n<li>类似 <code>pop()</code>，只是查看最后一个元素而不把它真正弹出。</li>\n</ul>\n</li>\n<li>empty()：<ul>\n<li>两个队列都为空即为真。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q1, q2;  <span class=\"comment\">// 两个队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MyStack</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 新元素先入空的队列 q2</span></span><br><span class=\"line\">        q<span class=\"number\">2.</span><span class=\"built_in\">push</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 把 q1 中所有元素依次移到 q2 中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q<span class=\"number\">1.</span><span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            q<span class=\"number\">2.</span><span class=\"built_in\">push</span>(q<span class=\"number\">1.f</span>ront());</span><br><span class=\"line\">            q<span class=\"number\">1.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 交换 q1 和 q2，保证所有元素又回到 q1，q2 变空</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(q1, q2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 队首就是栈顶</span></span><br><span class=\"line\">        <span class=\"type\">int</span> val = q<span class=\"number\">1.f</span>ront();</span><br><span class=\"line\">        q<span class=\"number\">1.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q<span class=\"number\">1.f</span>ront();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q<span class=\"number\">1.</span><span class=\"built_in\">empty</span>() &amp;&amp; q<span class=\"number\">2.</span><span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"有效的括号\"><a href=\"#有效的括号\" class=\"headerlink\" title=\"有效的括号\"></a>有效的括号</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/valid-parentheses/\">20. 有效的括号</a></p>\n<p>题目思路：先判断一下s的长度是否为偶数，如果不是就返回false，再将全部的左符号压入栈中，然后开始判断剩余的符号是否可以匹配，如果不能就返回false，将s循环结束，如果全部匹配成功，最后应该栈是空的，如果不是返回false。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">char</span>&gt; t;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;(&#x27;</span>) t.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;&#123;&#x27;</span>) t.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;&#125;&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;[&#x27;</span>) t.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t.<span class=\"built_in\">empty</span>() || t.<span class=\"built_in\">top</span>()!=s[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除字符串中的所有相邻重复项\"><a href=\"#删除字符串中的所有相邻重复项\" class=\"headerlink\" title=\"删除字符串中的所有相邻重复项\"></a>删除字符串中的所有相邻重复项</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/\">1047. 删除字符串中的所有相邻重复项</a></p>\n<p>建栈的写法，性能太差了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">removeDuplicates</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">char</span>&gt; t;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!t.<span class=\"built_in\">empty</span>() &amp;&amp; s[i]==t.<span class=\"built_in\">top</span>()) t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t.<span class=\"built_in\">push</span>(s[i]); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        string result;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!t.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result=t.<span class=\"built_in\">top</span>()+result;</span><br><span class=\"line\">            t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>string自己就可以做栈，string有pop和push接口，性能很高。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">removeDuplicates</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        string stk;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : s) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!stk.<span class=\"built_in\">empty</span>() &amp;&amp; stk.<span class=\"built_in\">back</span>() == ch) &#123;</span><br><span class=\"line\">                stk.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stk.<span class=\"built_in\">push_back</span>(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"逆波兰表达式求值\"><a href=\"#逆波兰表达式求值\" class=\"headerlink\" title=\"逆波兰表达式求值\"></a>逆波兰表达式求值</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/evaluate-reverse-polish-notation/\">150. 逆波兰表达式求值</a></p>\n<p>题目挺简单的，就是一个点需要注意：</p>\n<p>**<code>stoi()</code>**：</p>\n<ul>\n<li><code>stoi</code> 是一个将 <code>std::string</code> 类型转换为 <code>int</code> 的函数。如果 <code>tokens[i]</code> 是一个有效的整数表示，<code>stoi(tokens[i])</code> 将返回对应的整数值。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; t;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=tokens.<span class=\"built_in\">size</span>(),re;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;+&quot;</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=a+b;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=b-a;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=b*a;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=b/a;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t.<span class=\"built_in\">push</span>(<span class=\"built_in\">stoi</span>(tokens[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"滑动窗口最大值\"><a href=\"#滑动窗口最大值\" class=\"headerlink\" title=\"滑动窗口最大值\"></a>滑动窗口最大值</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">239. 滑动窗口最大值</a></p>\n<p>双端队列：队列中元素个数大于k，就删除队首元素，若入队元素大于队列中的元素，则把队列中的元素弹出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">maxSlidingWindow</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">        deque&lt;<span class=\"type\">int</span>&gt; q; <span class=\"comment\">// 双端队列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 入</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>() &amp;&amp; nums[q.<span class=\"built_in\">back</span>()] &lt;= nums[i]) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">pop_back</span>(); <span class=\"comment\">// 维护 q 的单调性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q.<span class=\"built_in\">push_back</span>(i); <span class=\"comment\">// 入队</span></span><br><span class=\"line\">            <span class=\"comment\">// 2. 出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - q.<span class=\"built_in\">front</span>() &gt;= k) &#123; <span class=\"comment\">// 队首已经离开窗口了</span></span><br><span class=\"line\">                q.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 记录答案</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 由于队首到队尾单调递减，所以窗口最大值就是队首</span></span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(nums[q.<span class=\"built_in\">front</span>()]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"前-K-个高频元素\"><a href=\"#前-K-个高频元素\" class=\"headerlink\" title=\"前 K 个高频元素\"></a>前 K 个高频元素</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/top-k-frequent-elements/\">347. 前 K 个高频元素</a></p>\n<p>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。<strong>小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。</strong></p>\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.jpg\" style=\"zoom: 50%;\" />\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 小顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">mycomparison</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&amp; lhs, <span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs.second &gt; rhs.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">topKFrequent</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要统计元素出现频率</span></span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map; <span class=\"comment\">// map&lt;nums[i],对应出现的次数&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            map[nums[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对频率排序</span></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个小顶堆，大小为k</span></span><br><span class=\"line\">        priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;, mycomparison&gt; pri_que;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用固定大小为k的小顶堆，扫面所有频率的数值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::iterator it = map.<span class=\"built_in\">begin</span>(); it != map.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">            pri_que.<span class=\"built_in\">push</span>(*it);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pri_que.<span class=\"built_in\">size</span>() &gt; k) &#123; <span class=\"comment\">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span></span><br><span class=\"line\">                pri_que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(k)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = k - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            result[i] = pri_que.<span class=\"built_in\">top</span>().first;</span><br><span class=\"line\">            pri_que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</div>","excerpt":"","more":"<h2 id=\"栈·队列\"><a href=\"#栈·队列\" class=\"headerlink\" title=\"栈·队列\"></a>栈·队列</h2><p>​                                     <img src=\"https://oi-wiki.org/ds/images/stack.svg\" alt=\"栈：先进后出\">                                               <img src=\"https://oi-wiki.org/ds/images/queue.svg\" alt=\"队列：先进先出\"></p>\n<h3 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack\"></a>stack</h3><p>STL 中的 <code>stack</code> 容器提供了一众成员函数以供调用，其中较为常用的有：</p>\n<ul>\n<li>元素访问<ul>\n<li><code>st.top()</code> 返回栈顶</li>\n</ul>\n</li>\n<li>修改<ul>\n<li><code>st.push()</code> 插入传入的参数到栈顶</li>\n<li><code>st.pop()</code> 弹出栈顶</li>\n</ul>\n</li>\n<li>容量<ul>\n<li><code>st.empty()</code> 返回是否为空</li>\n<li><code>st.size()</code> 返回元素数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h3><p>STL 中的 <code>queue</code> 容器提供了一众成员函数以供调用。其中较为常用的有：</p>\n<ul>\n<li>元素访问<ul>\n<li><code>q.front()</code> 返回队首元素</li>\n<li><code>q.back()</code> 返回队尾元素</li>\n</ul>\n</li>\n<li>修改<ul>\n<li><code>q.push()</code> 在队尾插入元素</li>\n<li><code>q.pop()</code> 弹出队首元素</li>\n</ul>\n</li>\n<li>容量<ul>\n<li><code>q.empty()</code> 队列是否为空</li>\n<li><code>q.size()</code> 返回队列中元素的数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><p>STL 中的 <code>deque</code> 容器提供了一众成员函数以供调用。其中较为常用的有：</p>\n<ul>\n<li>元素访问<ul>\n<li><code>q.front()</code> 返回队首元素</li>\n<li><code>q.back()</code> 返回队尾元素</li>\n</ul>\n</li>\n<li>修改<ul>\n<li><code>q.push_back()</code> 在队尾插入元素</li>\n<li><code>q.pop_back()</code> 弹出队尾元素</li>\n<li><code>q.push_front()</code> 在队首插入元素</li>\n<li><code>q.pop_front()</code> 弹出队首元素</li>\n<li><code>q.insert()</code> 在指定位置前插入元素（传入迭代器和元素）</li>\n<li><code>q.erase()</code> 删除指定位置的元素（传入迭代器）</li>\n</ul>\n</li>\n<li>容量<ul>\n<li><code>q.empty()</code> 队列是否为空</li>\n<li><code>q.size()</code> 返回队列中元素的数量</li>\n</ul>\n</li>\n</ul>\n<p>此外，<code>deque</code> 还提供了一些运算符。其中较为常用的有：</p>\n<ul>\n<li><p>使用赋值运算符 <code>=</code> 为 <code>deque</code> 赋值，类似 <code>queue</code>。</p>\n</li>\n<li><p>使用 <code>[]</code> 访问元素，类似 <code>vector</code>。</p>\n</li>\n</ul>\n<h3 id=\"用栈实现队列\"><a href=\"#用栈实现队列\" class=\"headerlink\" title=\"用栈实现队列\"></a>用栈实现队列</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/implement-queue-using-stacks/\">232. 用栈实现队列</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 如果 B 栈为空，将 A 栈中的元素倒入 B 栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveToB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (B.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!A.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                B.<span class=\"built_in\">push</span>(A.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                A.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; A, B;</span><br><span class=\"line\">    <span class=\"built_in\">MyQueue</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        A.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">moveToB</span>(); <span class=\"comment\">// 移动元素到 B 栈</span></span><br><span class=\"line\">        <span class=\"type\">int</span> val = B.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        B.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">moveToB</span>(); <span class=\"comment\">// 移动元素到 B 栈</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> B.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A.<span class=\"built_in\">empty</span>() &amp;&amp; B.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"用队列实现栈\"><a href=\"#用队列实现栈\" class=\"headerlink\" title=\"用队列实现栈\"></a>用队列实现栈</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/implement-stack-using-queues/\">225. 用队列实现栈</a></p>\n<h4 id=\"方法一：使用-一个队列\"><a href=\"#方法一：使用-一个队列\" class=\"headerlink\" title=\"方法一：使用 一个队列\"></a>方法一：使用 <strong>一个队列</strong></h4><ol>\n<li>**push(x)**：<ul>\n<li>首先，将元素 <code>x</code> 入队到队列末尾。</li>\n<li>然后，将队列中前面已有的元素依次出队，再重新入队到队列末尾。<br>这样，队列的前端就始终是最新压入的元素，相当于实现了栈的“后进先出（LIFO）”顺序。</li>\n</ul>\n</li>\n<li>**pop()**：<ul>\n<li>直接将队首元素出队即可。因为在上一步的处理里，队首元素就是栈顶。</li>\n</ul>\n</li>\n<li>**top()**：<ul>\n<li>返回队首元素（不弹出）。</li>\n</ul>\n</li>\n<li>**empty()**：<ul>\n<li>判断队列是否为空。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MyStack</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 每次 push 后，把前面的 (size - 1) 个元素依次出队并重新入队，确保新元素在队首</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 新元素先入队</span></span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 将前面的元素依次移到末尾</span></span><br><span class=\"line\">        <span class=\"type\">int</span> n = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 只需要将前面的 (n - 1) 个元素移动到末尾</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val = q.<span class=\"built_in\">front</span>();  <span class=\"comment\">// 由于 push 中的旋转操作，队首就是栈顶</span></span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q.<span class=\"built_in\">front</span>();     <span class=\"comment\">// 队首即为栈顶</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"方法二：使用-两个队列\"><a href=\"#方法二：使用-两个队列\" class=\"headerlink\" title=\"方法二：使用 两个队列\"></a>方法二：使用 <strong>两个队列</strong></h4><ol>\n<li><strong>队列 A</strong> 和 <strong>队列 B</strong> 协同工作，保证其中一个队列始终存放当前所有元素，另一个队列用来做辅助操作。</li>\n<li>push(x)：<ul>\n<li>把新元素直接入队到<strong>空</strong>队列中（或者你可以总是把它放到 A，然后把 A 里旧的元素转移到 B，具体实现略有差异）。</li>\n</ul>\n</li>\n<li>pop()：<ul>\n<li>在 <code>pop()</code> 之前，我们需要把除最后一个元素外的所有元素，从一个队列（有数据的队列）依次出队并入队到另一个空队列，让最后一个元素留在原队列，然后弹出这个元素，这相当于栈顶元素。</li>\n</ul>\n</li>\n<li>top()：<ul>\n<li>类似 <code>pop()</code>，只是查看最后一个元素而不把它真正弹出。</li>\n</ul>\n</li>\n<li>empty()：<ul>\n<li>两个队列都为空即为真。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q1, q2;  <span class=\"comment\">// 两个队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MyStack</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 新元素先入空的队列 q2</span></span><br><span class=\"line\">        q<span class=\"number\">2.</span><span class=\"built_in\">push</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 把 q1 中所有元素依次移到 q2 中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q<span class=\"number\">1.</span><span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            q<span class=\"number\">2.</span><span class=\"built_in\">push</span>(q<span class=\"number\">1.f</span>ront());</span><br><span class=\"line\">            q<span class=\"number\">1.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 交换 q1 和 q2，保证所有元素又回到 q1，q2 变空</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(q1, q2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 队首就是栈顶</span></span><br><span class=\"line\">        <span class=\"type\">int</span> val = q<span class=\"number\">1.f</span>ront();</span><br><span class=\"line\">        q<span class=\"number\">1.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q<span class=\"number\">1.f</span>ront();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q<span class=\"number\">1.</span><span class=\"built_in\">empty</span>() &amp;&amp; q<span class=\"number\">2.</span><span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"有效的括号\"><a href=\"#有效的括号\" class=\"headerlink\" title=\"有效的括号\"></a>有效的括号</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/valid-parentheses/\">20. 有效的括号</a></p>\n<p>题目思路：先判断一下s的长度是否为偶数，如果不是就返回false，再将全部的左符号压入栈中，然后开始判断剩余的符号是否可以匹配，如果不能就返回false，将s循环结束，如果全部匹配成功，最后应该栈是空的，如果不是返回false。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">char</span>&gt; t;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;(&#x27;</span>) t.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;&#123;&#x27;</span>) t.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;&#125;&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;[&#x27;</span>) t.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t.<span class=\"built_in\">empty</span>() || t.<span class=\"built_in\">top</span>()!=s[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除字符串中的所有相邻重复项\"><a href=\"#删除字符串中的所有相邻重复项\" class=\"headerlink\" title=\"删除字符串中的所有相邻重复项\"></a>删除字符串中的所有相邻重复项</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/\">1047. 删除字符串中的所有相邻重复项</a></p>\n<p>建栈的写法，性能太差了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">removeDuplicates</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">char</span>&gt; t;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!t.<span class=\"built_in\">empty</span>() &amp;&amp; s[i]==t.<span class=\"built_in\">top</span>()) t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t.<span class=\"built_in\">push</span>(s[i]); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        string result;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!t.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result=t.<span class=\"built_in\">top</span>()+result;</span><br><span class=\"line\">            t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>string自己就可以做栈，string有pop和push接口，性能很高。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">removeDuplicates</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        string stk;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : s) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!stk.<span class=\"built_in\">empty</span>() &amp;&amp; stk.<span class=\"built_in\">back</span>() == ch) &#123;</span><br><span class=\"line\">                stk.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stk.<span class=\"built_in\">push_back</span>(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"逆波兰表达式求值\"><a href=\"#逆波兰表达式求值\" class=\"headerlink\" title=\"逆波兰表达式求值\"></a>逆波兰表达式求值</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/evaluate-reverse-polish-notation/\">150. 逆波兰表达式求值</a></p>\n<p>题目挺简单的，就是一个点需要注意：</p>\n<p>**<code>stoi()</code>**：</p>\n<ul>\n<li><code>stoi</code> 是一个将 <code>std::string</code> 类型转换为 <code>int</code> 的函数。如果 <code>tokens[i]</code> 是一个有效的整数表示，<code>stoi(tokens[i])</code> 将返回对应的整数值。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; t;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=tokens.<span class=\"built_in\">size</span>(),re;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;+&quot;</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=a+b;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=b-a;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=b*a;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=t.<span class=\"built_in\">top</span>();t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                re=b/a;</span><br><span class=\"line\">                t.<span class=\"built_in\">push</span>(re);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t.<span class=\"built_in\">push</span>(<span class=\"built_in\">stoi</span>(tokens[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"滑动窗口最大值\"><a href=\"#滑动窗口最大值\" class=\"headerlink\" title=\"滑动窗口最大值\"></a>滑动窗口最大值</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/sliding-window-maximum/\">239. 滑动窗口最大值</a></p>\n<p>双端队列：队列中元素个数大于k，就删除队首元素，若入队元素大于队列中的元素，则把队列中的元素弹出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">maxSlidingWindow</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">        deque&lt;<span class=\"type\">int</span>&gt; q; <span class=\"comment\">// 双端队列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 入</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>() &amp;&amp; nums[q.<span class=\"built_in\">back</span>()] &lt;= nums[i]) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">pop_back</span>(); <span class=\"comment\">// 维护 q 的单调性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q.<span class=\"built_in\">push_back</span>(i); <span class=\"comment\">// 入队</span></span><br><span class=\"line\">            <span class=\"comment\">// 2. 出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - q.<span class=\"built_in\">front</span>() &gt;= k) &#123; <span class=\"comment\">// 队首已经离开窗口了</span></span><br><span class=\"line\">                q.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 记录答案</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 由于队首到队尾单调递减，所以窗口最大值就是队首</span></span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(nums[q.<span class=\"built_in\">front</span>()]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"前-K-个高频元素\"><a href=\"#前-K-个高频元素\" class=\"headerlink\" title=\"前 K 个高频元素\"></a>前 K 个高频元素</h3><p>题目链接：<a href=\"https://leetcode.cn/problems/top-k-frequent-elements/\">347. 前 K 个高频元素</a></p>\n<p>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。<strong>小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。</strong></p>\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.jpg\" style=\"zoom: 50%;\" />\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 小顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">mycomparison</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&amp; lhs, <span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs.second &gt; rhs.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">topKFrequent</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要统计元素出现频率</span></span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map; <span class=\"comment\">// map&lt;nums[i],对应出现的次数&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            map[nums[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对频率排序</span></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个小顶堆，大小为k</span></span><br><span class=\"line\">        priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;, mycomparison&gt; pri_que;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用固定大小为k的小顶堆，扫面所有频率的数值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::iterator it = map.<span class=\"built_in\">begin</span>(); it != map.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">            pri_que.<span class=\"built_in\">push</span>(*it);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pri_que.<span class=\"built_in\">size</span>() &gt; k) &#123; <span class=\"comment\">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span></span><br><span class=\"line\">                pri_que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(k)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = k - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            result[i] = pri_que.<span class=\"built_in\">top</span>().first;</span><br><span class=\"line\">            pri_que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"STL","date":"2025-02-07T16:11:46.000Z","updated":"2025-02-07T16:15:34.567Z","type":null,"cover":"https://oi-wiki.org/lang/csl/images/container1.png","_content":"\n## STL\n\n","source":"_posts/STL.md","raw":"---\ntitle: STL\ndate: 2025-02-08 00:11:46\ntags: [STL]\ncategories: [数据结构与算法,基础知识]\nupdated: \ntype: \ncover: https://oi-wiki.org/lang/csl/images/container1.png\n---\n\n## STL\n\n","slug":"STL","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvg001oa4wm2jdqaqpx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2></div>","excerpt":"","more":"<h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2>"},{"title":"代码随想录--二叉树","date":"2025-02-07T15:24:48.031Z","updated":"2025-02-07T16:11:57.944Z","description":"代码随想录--二叉树","_content":"\n## 二叉树\n\n","source":"_posts/9day.md","raw":"---\ntitle: 代码随想录--二叉树\ndate: 2025-02-08 00:10:23---\ntags: [数据结构与算法,]\ncategories: [数据结构与算法,代码随想录]\nupdated: \ndescription: 代码随想录--二叉树\n---\n\n## 二叉树\n\n","slug":"9day","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvh001ra4wmck0c6849","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2></div>","excerpt":"","more":"<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2>"},{"title":"哈希表","date":"2025-02-02T12:04:09.000Z","updated":"2025-02-04T07:18:32.573Z","type":null,"cover":"https://wpironman.oss-cn-qingdao.aliyuncs.com/10year.webp","_content":"\n## 哈希表 \n\n### 哈希表概述\n\n​\t**哈希表：**又称散列表，一种以关键码的值**「key-value」**而直接进行访问的**数据结构**。任意的键值 key  都唯一对应到内存中的某个位置。只需要输入查找的键值，就可以快速地找到其对应的  value。\n\n​\t**哈希函数：**根据键值计算索引的函数就叫做**哈希函数**。\n\n​\t**冲突：**不同的关键码映射到同一散列位置。key1!=key2，但是H(key1)=H(key2)。\n\n​\t**同义词：**具有相同函数值的多个关键字。\n\n​\t**All in all:  将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素** 。\n\n​\t**需要解决的问题：**1. 哈希函数的构造。   2. 冲突解决的方法。\n\n### 哈希函数构造方法\n\n​\t哈希函数应当易于计算，并且尽量使计算出来的索引均匀分布，以避免冲突。\n\n####  直接定址法\n\n**概述：**直接取关键字的某个线性函数值为哈希函数。\n\n**哈希函数：**H(key) = key 或 H(key) = a*key + b   ( a和b为常数 )\n\n**特点：**计算简单，不会产生冲突，适合关键字分布连续的情况（若不连续，则存储空间浪费很多，空间效率低）。\n\n#### 除留余数法\n\n**概述：**指把key除以一个数mod得到的余数作为hash值的方法。当mod是一个质数时，H(key)能尽可能均匀覆盖每一个数。所以取mod为不大于表长Tsize但接近或等于表长的质数，**即mod<=Tsize且为质数**。\n\n**哈希函数：**H(key) = key % mod\n\n**特点：**比较常用，关键在mod的选择，如何使得每个关键字通过该函数转换后等概率映射到散列空间的任一地址。\n\n#### 平方取中法\n\n**概述：**指取key的平方的中间若干位作为hash值的方法，不常用。\n\n**特点：**适合于关键字的每位取值都不够均匀或均小于散列地址所需位数。\n\n### 处理冲突的方法\n\n#### 开放定址法（开地址法）\n\n**基本思想：**有冲突时就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将数据元素存入。Hi = (H(key) + di) % Tsize (di为增量序列)   计算新的哈希值。\n\n##### 线性探查法\n\n​\tdi = 0, 1, 2, ... , Tsize-1 \n\n​\t发生冲突时，顺序表查看表中下一个元素，直到有空闲单元。会出现聚集现象，降低查询效率。\n\n##### 平方探查法\n\n​\tdi = 0² , +1² ,  -1² , +2² , -2² , ... , +k² , -k²   \n\n​\t不会出现聚集现象，不能探测所有单元，但至少能探测一半\n\n##### 伪随机探测法\n\n​\tdi = 伪随机数序列\n\n#### 链地址法（拉链法）\n\n**基本思想：**和上边方法不同，链地址法不计算新的哈希值，而是把相同散列地址的记录链成一单链表。m个散列地址就设m个单链表，然后用一个数组将m个单链表的表头指针存储起来，形成一个动态的结构。\n\n**优点：**1. 非同义词不会冲突，无\"聚集\"现象。\n\n​\t   2. 链表上结点空间动态申请，更适合于表长不确定的情况（经常插入删除）。\n\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png\" style=\"zoom:50%;\" />\n\n### 哈希的查找及性能分析\n\n#### 查找过程\n\n​\t检测由散列函数形成的地址上是否有记录，若无记录则失败； 若有记录比较关键字值，若相等则查找成功，否则散列函数更新增量值，重复执行。\n\n#### 性能分析\n\n​\t在列表查找中，使用最广泛的二分查找算法，复杂度为O(log2n)，但其始终只能用于有序列表。普通无序列表只能采用遍历查找，复杂度为O(n)。而拥有较为理想的哈希函数实现的哈希表，对其任意元素的查找速度始终为常数级，即O(1)。  链地址法优于开放定址法，除留余数法作散列函数优于其它类型函数。\n\n**装填因子：**∂=表中记录数/散列表长度。平均查找长度直接依赖于装填因子大小。也就是说，装填因子大小会直接影响到查找效率。装填因子越大，发生冲突的可能性越大。\n\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/ASL.png\" style=\"zoom:33%;\" />\n\n​\t查找效率三个因素影响：哈希函数、装填因子、处理冲突方法。\n\n\n\n","source":"_posts/哈希表.md","raw":"---\ntitle: 哈希表\ndate: 2025-02-02 20:04:09\ntags: [数据结构与算法,哈希表,查找,链表,数组]\ncategories: [数据结构与算法,基础知识]\nupdated: \ntype: \ncover: https://wpironman.oss-cn-qingdao.aliyuncs.com/10year.webp\n---\n\n## 哈希表 \n\n### 哈希表概述\n\n​\t**哈希表：**又称散列表，一种以关键码的值**「key-value」**而直接进行访问的**数据结构**。任意的键值 key  都唯一对应到内存中的某个位置。只需要输入查找的键值，就可以快速地找到其对应的  value。\n\n​\t**哈希函数：**根据键值计算索引的函数就叫做**哈希函数**。\n\n​\t**冲突：**不同的关键码映射到同一散列位置。key1!=key2，但是H(key1)=H(key2)。\n\n​\t**同义词：**具有相同函数值的多个关键字。\n\n​\t**All in all:  将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素** 。\n\n​\t**需要解决的问题：**1. 哈希函数的构造。   2. 冲突解决的方法。\n\n### 哈希函数构造方法\n\n​\t哈希函数应当易于计算，并且尽量使计算出来的索引均匀分布，以避免冲突。\n\n####  直接定址法\n\n**概述：**直接取关键字的某个线性函数值为哈希函数。\n\n**哈希函数：**H(key) = key 或 H(key) = a*key + b   ( a和b为常数 )\n\n**特点：**计算简单，不会产生冲突，适合关键字分布连续的情况（若不连续，则存储空间浪费很多，空间效率低）。\n\n#### 除留余数法\n\n**概述：**指把key除以一个数mod得到的余数作为hash值的方法。当mod是一个质数时，H(key)能尽可能均匀覆盖每一个数。所以取mod为不大于表长Tsize但接近或等于表长的质数，**即mod<=Tsize且为质数**。\n\n**哈希函数：**H(key) = key % mod\n\n**特点：**比较常用，关键在mod的选择，如何使得每个关键字通过该函数转换后等概率映射到散列空间的任一地址。\n\n#### 平方取中法\n\n**概述：**指取key的平方的中间若干位作为hash值的方法，不常用。\n\n**特点：**适合于关键字的每位取值都不够均匀或均小于散列地址所需位数。\n\n### 处理冲突的方法\n\n#### 开放定址法（开地址法）\n\n**基本思想：**有冲突时就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将数据元素存入。Hi = (H(key) + di) % Tsize (di为增量序列)   计算新的哈希值。\n\n##### 线性探查法\n\n​\tdi = 0, 1, 2, ... , Tsize-1 \n\n​\t发生冲突时，顺序表查看表中下一个元素，直到有空闲单元。会出现聚集现象，降低查询效率。\n\n##### 平方探查法\n\n​\tdi = 0² , +1² ,  -1² , +2² , -2² , ... , +k² , -k²   \n\n​\t不会出现聚集现象，不能探测所有单元，但至少能探测一半\n\n##### 伪随机探测法\n\n​\tdi = 伪随机数序列\n\n#### 链地址法（拉链法）\n\n**基本思想：**和上边方法不同，链地址法不计算新的哈希值，而是把相同散列地址的记录链成一单链表。m个散列地址就设m个单链表，然后用一个数组将m个单链表的表头指针存储起来，形成一个动态的结构。\n\n**优点：**1. 非同义词不会冲突，无\"聚集\"现象。\n\n​\t   2. 链表上结点空间动态申请，更适合于表长不确定的情况（经常插入删除）。\n\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png\" style=\"zoom:50%;\" />\n\n### 哈希的查找及性能分析\n\n#### 查找过程\n\n​\t检测由散列函数形成的地址上是否有记录，若无记录则失败； 若有记录比较关键字值，若相等则查找成功，否则散列函数更新增量值，重复执行。\n\n#### 性能分析\n\n​\t在列表查找中，使用最广泛的二分查找算法，复杂度为O(log2n)，但其始终只能用于有序列表。普通无序列表只能采用遍历查找，复杂度为O(n)。而拥有较为理想的哈希函数实现的哈希表，对其任意元素的查找速度始终为常数级，即O(1)。  链地址法优于开放定址法，除留余数法作散列函数优于其它类型函数。\n\n**装填因子：**∂=表中记录数/散列表长度。平均查找长度直接依赖于装填因子大小。也就是说，装填因子大小会直接影响到查找效率。装填因子越大，发生冲突的可能性越大。\n\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/ASL.png\" style=\"zoom:33%;\" />\n\n​\t查找效率三个因素影响：哈希函数、装填因子、处理冲突方法。\n\n\n\n","slug":"哈希表","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm6xqvqvi001va4wmeivwa4qb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div id=\"postchat_postcontent\"><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><h3 id=\"哈希表概述\"><a href=\"#哈希表概述\" class=\"headerlink\" title=\"哈希表概述\"></a>哈希表概述</h3><p>​\t<strong>哈希表：</strong>又称散列表，一种以关键码的值<strong>「key-value」</strong>而直接进行访问的<strong>数据结构</strong>。任意的键值 key  都唯一对应到内存中的某个位置。只需要输入查找的键值，就可以快速地找到其对应的  value。</p>\n<p>​\t<strong>哈希函数：</strong>根据键值计算索引的函数就叫做<strong>哈希函数</strong>。</p>\n<p>​\t<strong>冲突：</strong>不同的关键码映射到同一散列位置。key1!&#x3D;key2，但是H(key1)&#x3D;H(key2)。</p>\n<p>​\t<strong>同义词：</strong>具有相同函数值的多个关键字。</p>\n<p>​\t<strong>All in all:  将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素</strong> 。</p>\n<p>​\t<strong>需要解决的问题：</strong>1. 哈希函数的构造。   2. 冲突解决的方法。</p>\n<h3 id=\"哈希函数构造方法\"><a href=\"#哈希函数构造方法\" class=\"headerlink\" title=\"哈希函数构造方法\"></a>哈希函数构造方法</h3><p>​\t哈希函数应当易于计算，并且尽量使计算出来的索引均匀分布，以避免冲突。</p>\n<h4 id=\"直接定址法\"><a href=\"#直接定址法\" class=\"headerlink\" title=\"直接定址法\"></a>直接定址法</h4><p><strong>概述：</strong>直接取关键字的某个线性函数值为哈希函数。</p>\n<p><strong>哈希函数：</strong>H(key) &#x3D; key 或 H(key) &#x3D; a*key + b   ( a和b为常数 )</p>\n<p><strong>特点：</strong>计算简单，不会产生冲突，适合关键字分布连续的情况（若不连续，则存储空间浪费很多，空间效率低）。</p>\n<h4 id=\"除留余数法\"><a href=\"#除留余数法\" class=\"headerlink\" title=\"除留余数法\"></a>除留余数法</h4><p><strong>概述：</strong>指把key除以一个数mod得到的余数作为hash值的方法。当mod是一个质数时，H(key)能尽可能均匀覆盖每一个数。所以取mod为不大于表长Tsize但接近或等于表长的质数，<strong>即mod&lt;&#x3D;Tsize且为质数</strong>。</p>\n<p><strong>哈希函数：</strong>H(key) &#x3D; key % mod</p>\n<p><strong>特点：</strong>比较常用，关键在mod的选择，如何使得每个关键字通过该函数转换后等概率映射到散列空间的任一地址。</p>\n<h4 id=\"平方取中法\"><a href=\"#平方取中法\" class=\"headerlink\" title=\"平方取中法\"></a>平方取中法</h4><p><strong>概述：</strong>指取key的平方的中间若干位作为hash值的方法，不常用。</p>\n<p><strong>特点：</strong>适合于关键字的每位取值都不够均匀或均小于散列地址所需位数。</p>\n<h3 id=\"处理冲突的方法\"><a href=\"#处理冲突的方法\" class=\"headerlink\" title=\"处理冲突的方法\"></a>处理冲突的方法</h3><h4 id=\"开放定址法（开地址法）\"><a href=\"#开放定址法（开地址法）\" class=\"headerlink\" title=\"开放定址法（开地址法）\"></a>开放定址法（开地址法）</h4><p><strong>基本思想：</strong>有冲突时就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将数据元素存入。Hi &#x3D; (H(key) + di) % Tsize (di为增量序列)   计算新的哈希值。</p>\n<h5 id=\"线性探查法\"><a href=\"#线性探查法\" class=\"headerlink\" title=\"线性探查法\"></a>线性探查法</h5><p>​\tdi &#x3D; 0, 1, 2, … , Tsize-1 </p>\n<p>​\t发生冲突时，顺序表查看表中下一个元素，直到有空闲单元。会出现聚集现象，降低查询效率。</p>\n<h5 id=\"平方探查法\"><a href=\"#平方探查法\" class=\"headerlink\" title=\"平方探查法\"></a>平方探查法</h5><p>​\tdi &#x3D; 0² , +1² ,  -1² , +2² , -2² , … , +k² , -k²   </p>\n<p>​\t不会出现聚集现象，不能探测所有单元，但至少能探测一半</p>\n<h5 id=\"伪随机探测法\"><a href=\"#伪随机探测法\" class=\"headerlink\" title=\"伪随机探测法\"></a>伪随机探测法</h5><p>​\tdi &#x3D; 伪随机数序列</p>\n<h4 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h4><p><strong>基本思想：</strong>和上边方法不同，链地址法不计算新的哈希值，而是把相同散列地址的记录链成一单链表。m个散列地址就设m个单链表，然后用一个数组将m个单链表的表头指针存储起来，形成一个动态的结构。</p>\n<p><strong>优点：</strong>1. 非同义词不会冲突，无”聚集”现象。</p>\n<p>​\t   2. 链表上结点空间动态申请，更适合于表长不确定的情况（经常插入删除）。</p>\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"哈希的查找及性能分析\"><a href=\"#哈希的查找及性能分析\" class=\"headerlink\" title=\"哈希的查找及性能分析\"></a>哈希的查找及性能分析</h3><h4 id=\"查找过程\"><a href=\"#查找过程\" class=\"headerlink\" title=\"查找过程\"></a>查找过程</h4><p>​\t检测由散列函数形成的地址上是否有记录，若无记录则失败； 若有记录比较关键字值，若相等则查找成功，否则散列函数更新增量值，重复执行。</p>\n<h4 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h4><p>​\t在列表查找中，使用最广泛的二分查找算法，复杂度为O(log2n)，但其始终只能用于有序列表。普通无序列表只能采用遍历查找，复杂度为O(n)。而拥有较为理想的哈希函数实现的哈希表，对其任意元素的查找速度始终为常数级，即O(1)。  链地址法优于开放定址法，除留余数法作散列函数优于其它类型函数。</p>\n<p><strong>装填因子：</strong>∂&#x3D;表中记录数&#x2F;散列表长度。平均查找长度直接依赖于装填因子大小。也就是说，装填因子大小会直接影响到查找效率。装填因子越大，发生冲突的可能性越大。</p>\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/ASL.png\" style=\"zoom:33%;\" />\n\n<p>​\t查找效率三个因素影响：哈希函数、装填因子、处理冲突方法。</p>\n</div>","excerpt":"","more":"<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><h3 id=\"哈希表概述\"><a href=\"#哈希表概述\" class=\"headerlink\" title=\"哈希表概述\"></a>哈希表概述</h3><p>​\t<strong>哈希表：</strong>又称散列表，一种以关键码的值<strong>「key-value」</strong>而直接进行访问的<strong>数据结构</strong>。任意的键值 key  都唯一对应到内存中的某个位置。只需要输入查找的键值，就可以快速地找到其对应的  value。</p>\n<p>​\t<strong>哈希函数：</strong>根据键值计算索引的函数就叫做<strong>哈希函数</strong>。</p>\n<p>​\t<strong>冲突：</strong>不同的关键码映射到同一散列位置。key1!&#x3D;key2，但是H(key1)&#x3D;H(key2)。</p>\n<p>​\t<strong>同义词：</strong>具有相同函数值的多个关键字。</p>\n<p>​\t<strong>All in all:  将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素</strong> 。</p>\n<p>​\t<strong>需要解决的问题：</strong>1. 哈希函数的构造。   2. 冲突解决的方法。</p>\n<h3 id=\"哈希函数构造方法\"><a href=\"#哈希函数构造方法\" class=\"headerlink\" title=\"哈希函数构造方法\"></a>哈希函数构造方法</h3><p>​\t哈希函数应当易于计算，并且尽量使计算出来的索引均匀分布，以避免冲突。</p>\n<h4 id=\"直接定址法\"><a href=\"#直接定址法\" class=\"headerlink\" title=\"直接定址法\"></a>直接定址法</h4><p><strong>概述：</strong>直接取关键字的某个线性函数值为哈希函数。</p>\n<p><strong>哈希函数：</strong>H(key) &#x3D; key 或 H(key) &#x3D; a*key + b   ( a和b为常数 )</p>\n<p><strong>特点：</strong>计算简单，不会产生冲突，适合关键字分布连续的情况（若不连续，则存储空间浪费很多，空间效率低）。</p>\n<h4 id=\"除留余数法\"><a href=\"#除留余数法\" class=\"headerlink\" title=\"除留余数法\"></a>除留余数法</h4><p><strong>概述：</strong>指把key除以一个数mod得到的余数作为hash值的方法。当mod是一个质数时，H(key)能尽可能均匀覆盖每一个数。所以取mod为不大于表长Tsize但接近或等于表长的质数，<strong>即mod&lt;&#x3D;Tsize且为质数</strong>。</p>\n<p><strong>哈希函数：</strong>H(key) &#x3D; key % mod</p>\n<p><strong>特点：</strong>比较常用，关键在mod的选择，如何使得每个关键字通过该函数转换后等概率映射到散列空间的任一地址。</p>\n<h4 id=\"平方取中法\"><a href=\"#平方取中法\" class=\"headerlink\" title=\"平方取中法\"></a>平方取中法</h4><p><strong>概述：</strong>指取key的平方的中间若干位作为hash值的方法，不常用。</p>\n<p><strong>特点：</strong>适合于关键字的每位取值都不够均匀或均小于散列地址所需位数。</p>\n<h3 id=\"处理冲突的方法\"><a href=\"#处理冲突的方法\" class=\"headerlink\" title=\"处理冲突的方法\"></a>处理冲突的方法</h3><h4 id=\"开放定址法（开地址法）\"><a href=\"#开放定址法（开地址法）\" class=\"headerlink\" title=\"开放定址法（开地址法）\"></a>开放定址法（开地址法）</h4><p><strong>基本思想：</strong>有冲突时就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将数据元素存入。Hi &#x3D; (H(key) + di) % Tsize (di为增量序列)   计算新的哈希值。</p>\n<h5 id=\"线性探查法\"><a href=\"#线性探查法\" class=\"headerlink\" title=\"线性探查法\"></a>线性探查法</h5><p>​\tdi &#x3D; 0, 1, 2, … , Tsize-1 </p>\n<p>​\t发生冲突时，顺序表查看表中下一个元素，直到有空闲单元。会出现聚集现象，降低查询效率。</p>\n<h5 id=\"平方探查法\"><a href=\"#平方探查法\" class=\"headerlink\" title=\"平方探查法\"></a>平方探查法</h5><p>​\tdi &#x3D; 0² , +1² ,  -1² , +2² , -2² , … , +k² , -k²   </p>\n<p>​\t不会出现聚集现象，不能探测所有单元，但至少能探测一半</p>\n<h5 id=\"伪随机探测法\"><a href=\"#伪随机探测法\" class=\"headerlink\" title=\"伪随机探测法\"></a>伪随机探测法</h5><p>​\tdi &#x3D; 伪随机数序列</p>\n<h4 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h4><p><strong>基本思想：</strong>和上边方法不同，链地址法不计算新的哈希值，而是把相同散列地址的记录链成一单链表。m个散列地址就设m个单链表，然后用一个数组将m个单链表的表头指针存储起来，形成一个动态的结构。</p>\n<p><strong>优点：</strong>1. 非同义词不会冲突，无”聚集”现象。</p>\n<p>​\t   2. 链表上结点空间动态申请，更适合于表长不确定的情况（经常插入删除）。</p>\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"哈希的查找及性能分析\"><a href=\"#哈希的查找及性能分析\" class=\"headerlink\" title=\"哈希的查找及性能分析\"></a>哈希的查找及性能分析</h3><h4 id=\"查找过程\"><a href=\"#查找过程\" class=\"headerlink\" title=\"查找过程\"></a>查找过程</h4><p>​\t检测由散列函数形成的地址上是否有记录，若无记录则失败； 若有记录比较关键字值，若相等则查找成功，否则散列函数更新增量值，重复执行。</p>\n<h4 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h4><p>​\t在列表查找中，使用最广泛的二分查找算法，复杂度为O(log2n)，但其始终只能用于有序列表。普通无序列表只能采用遍历查找，复杂度为O(n)。而拥有较为理想的哈希函数实现的哈希表，对其任意元素的查找速度始终为常数级，即O(1)。  链地址法优于开放定址法，除留余数法作散列函数优于其它类型函数。</p>\n<p><strong>装填因子：</strong>∂&#x3D;表中记录数&#x2F;散列表长度。平均查找长度直接依赖于装填因子大小。也就是说，装填因子大小会直接影响到查找效率。装填因子越大，发生冲突的可能性越大。</p>\n<img src=\"https://wpironman.oss-cn-qingdao.aliyuncs.com/ASL.png\" style=\"zoom:33%;\" />\n\n<p>​\t查找效率三个因素影响：哈希函数、装填因子、处理冲突方法。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm6xqvquf0001a4wm2xzcdcrn","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvquv000na4wmb7sf71ln"},{"post_id":"cm6xqvquf0001a4wm2xzcdcrn","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvquv000qa4wm5n5c16ey"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvquv000sa4wmhren5ki6"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvquw000va4wm0vqbgmb5"},{"post_id":"cm6xqvqum0007a4wmh8vw3vs0","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvquw000wa4wm5p0ya2o2"},{"post_id":"cm6xqvqum0007a4wmh8vw3vs0","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvquw000ya4wmeqoc5523"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvf001ia4wm3gfxbj6b"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvqvg001ma4wm9bd6ceq3"},{"post_id":"cm6xqvqvc001ea4wm7q62gj5w","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvh001pa4wmbasjg8ar"},{"post_id":"cm6xqvqvc001ea4wm7q62gj5w","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvqvh001sa4wmhwxy5hv5"},{"post_id":"cm6xqvqvd001ga4wmbfv8exdg","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvi001xa4wme4oo18sd"},{"post_id":"cm6xqvqvd001ga4wmbfv8exdg","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvqvj001za4wm0aj24dyn"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvj0023a4wm0vn98e1d"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvqvk0025a4wm3i8i7wsi"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvk0028a4wmgosd4iln"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvqvk002aa4wmb3aedpdw"},{"post_id":"cm6xqvqvh001ra4wmck0c6849","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvk002da4wmfpn8ejs7"},{"post_id":"cm6xqvqvh001ra4wmck0c6849","category_id":"cm6xqvqut000ha4wmewa732zv","_id":"cm6xqvqvk002fa4wm35596y1e"},{"post_id":"cm6xqvqvg001oa4wm2jdqaqpx","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvl002ia4wm203t0lfj"},{"post_id":"cm6xqvqvg001oa4wm2jdqaqpx","category_id":"cm6xqvqvi001wa4wm5iq02zi8","_id":"cm6xqvqvl002ka4wmhbkbe6na"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","category_id":"cm6xqvquk0004a4wm47xpc69c","_id":"cm6xqvqvm002na4wmhpvqdca0"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","category_id":"cm6xqvqvi001wa4wm5iq02zi8","_id":"cm6xqvqvm002pa4wmbgnng23s"}],"PostTag":[{"post_id":"cm6xqvquf0001a4wm2xzcdcrn","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvquv000la4wm8c2n6g4w"},{"post_id":"cm6xqvquf0001a4wm2xzcdcrn","tag_id":"cm6xqvquq000ba4wm1ro93eue","_id":"cm6xqvquv000oa4wmhx2i5tqo"},{"post_id":"cm6xqvquf0001a4wm2xzcdcrn","tag_id":"cm6xqvqut000fa4wmh17i7vpi","_id":"cm6xqvquv000ra4wmg0ugbvqr"},{"post_id":"cm6xqvquf0001a4wm2xzcdcrn","tag_id":"cm6xqvquu000ia4wm7egc3j0n","_id":"cm6xqvquw000ta4wmc74q5bt3"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqux0011a4wm7y412mpn"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","tag_id":"cm6xqvquu000ia4wm7egc3j0n","_id":"cm6xqvqux0012a4wmf3va7bp2"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","tag_id":"cm6xqvquw000ua4wm5wrvdsm6","_id":"cm6xqvqux0014a4wmg8gdh4ai"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","tag_id":"cm6xqvquw000xa4wm9t57fklq","_id":"cm6xqvqux0015a4wm0n0fgyb4"},{"post_id":"cm6xqvqui0003a4wmcjln12gd","tag_id":"cm6xqvquw000za4wmhu5w89w2","_id":"cm6xqvqux0017a4wm3l0gh59m"},{"post_id":"cm6xqvqum0007a4wmh8vw3vs0","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvquy0019a4wmfukxaxo2"},{"post_id":"cm6xqvqum0007a4wmh8vw3vs0","tag_id":"cm6xqvqux0013a4wmcgge70ya","_id":"cm6xqvquy001aa4wmhxvy2jyx"},{"post_id":"cm6xqvqum0007a4wmh8vw3vs0","tag_id":"cm6xqvqut000fa4wmh17i7vpi","_id":"cm6xqvquy001ba4wmfj0gewuh"},{"post_id":"cm6xqvqum0007a4wmh8vw3vs0","tag_id":"cm6xqvqux0018a4wm77ew341c","_id":"cm6xqvquy001ca4wm99ushv8g"},{"post_id":"cm6xqvqvd001ga4wmbfv8exdg","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvf001ja4wm8ychfkqc"},{"post_id":"cm6xqvqvd001ga4wmbfv8exdg","tag_id":"cm6xqvqux0013a4wmcgge70ya","_id":"cm6xqvqvg001na4wm47mc4yre"},{"post_id":"cm6xqvqvd001ga4wmbfv8exdg","tag_id":"cm6xqvqut000fa4wmh17i7vpi","_id":"cm6xqvqvh001qa4wm63p69o9u"},{"post_id":"cm6xqvqvd001ga4wmbfv8exdg","tag_id":"cm6xqvqux0018a4wm77ew341c","_id":"cm6xqvqvi001ua4wmbwb99i2b"},{"post_id":"cm6xqvqvh001ra4wmck0c6849","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvj001ya4wm4pc86nw9"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvj0021a4wm8h30c18z"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","tag_id":"cm6xqvqvd001fa4wma1xb3r1h","_id":"cm6xqvqvj0024a4wmeq1223um"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","tag_id":"cm6xqvqvg001la4wm8n11bli0","_id":"cm6xqvqvk0026a4wmhoez3wir"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","tag_id":"cm6xqvqux0018a4wm77ew341c","_id":"cm6xqvqvk0029a4wm2qyj1ljf"},{"post_id":"cm6xqvqvi001va4wmeivwa4qb","tag_id":"cm6xqvquu000ia4wm7egc3j0n","_id":"cm6xqvqvk002ba4wm8fm2eic8"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvk002ea4wmbjzm73od"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","tag_id":"cm6xqvqvd001fa4wma1xb3r1h","_id":"cm6xqvqvk002ga4wmdcy983xr"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","tag_id":"cm6xqvqvg001la4wm8n11bli0","_id":"cm6xqvqvl002ja4wm644o878e"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","tag_id":"cm6xqvqvi001ta4wmae95abfb","_id":"cm6xqvqvm002la4wm5pvdbwcb"},{"post_id":"cm6xqvqvb001da4wmc2gv03dd","tag_id":"cm6xqvqvj0020a4wmcxck8unt","_id":"cm6xqvqvm002oa4wmb77k26pq"},{"post_id":"cm6xqvqvc001ea4wm7q62gj5w","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvm002qa4wmggtd50rb"},{"post_id":"cm6xqvqvc001ea4wm7q62gj5w","tag_id":"cm6xqvqvd001fa4wma1xb3r1h","_id":"cm6xqvqvn002sa4wmakp4ca9r"},{"post_id":"cm6xqvqvc001ea4wm7q62gj5w","tag_id":"cm6xqvqvj0020a4wmcxck8unt","_id":"cm6xqvqvn002ta4wm5snw9j0g"},{"post_id":"cm6xqvqvc001ea4wm7q62gj5w","tag_id":"cm6xqvqut000fa4wmh17i7vpi","_id":"cm6xqvqvo002va4wmfcrd5a3b"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvo002wa4wm0p756ik3"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","tag_id":"cm6xqvqvl002ha4wmbgdd9iax","_id":"cm6xqvqvo002xa4wmgv8qd04p"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","tag_id":"cm6xqvqvm002ma4wmadmw4xow","_id":"cm6xqvqvo002za4wm14ath2yg"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","tag_id":"cm6xqvqut000fa4wmh17i7vpi","_id":"cm6xqvqvo0030a4wmcjl892bk"},{"post_id":"cm6xqvqve001ha4wm3wd877t4","tag_id":"cm6xqvqvn002ra4wm01d85z0z","_id":"cm6xqvqvo0032a4wm23ge9w1p"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqul0005a4wmhw561oo2","_id":"cm6xqvqvq0038a4wmdo2n6j2g"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvn002ua4wm7cqk578j","_id":"cm6xqvqvq0039a4wm8ewy3525"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvo002ya4wm0xbmac27","_id":"cm6xqvqvq003aa4wmgid678da"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvo0031a4wmgibedtcn","_id":"cm6xqvqvq003ba4wmfhvw2lkd"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvo0033a4wm1a3b2fjr","_id":"cm6xqvqvq003ca4wmhuqgh2s2"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvp0034a4wm5of00m6f","_id":"cm6xqvqvq003da4wmfhf01fhz"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvp0035a4wmh3os3pdl","_id":"cm6xqvqvq003ea4wm3b9rhejv"},{"post_id":"cm6xqvqvf001ka4wmflx73be4","tag_id":"cm6xqvqvp0036a4wm8cpr3qb0","_id":"cm6xqvqvq003fa4wm6rq71xs6"},{"post_id":"cm6xqvqvg001oa4wm2jdqaqpx","tag_id":"cm6xqvqvp0037a4wm67984ie5","_id":"cm6xqvqvq003ga4wmcip4hody"}],"Tag":[{"name":"数据结构与算法","_id":"cm6xqvqul0005a4wmhw561oo2"},{"name":"二分查找","_id":"cm6xqvquq000ba4wm1ro93eue"},{"name":"双指针","_id":"cm6xqvqut000fa4wmh17i7vpi"},{"name":"数组","_id":"cm6xqvquu000ia4wm7egc3j0n"},{"name":"滑动窗口","_id":"cm6xqvquw000ua4wm5wrvdsm6"},{"name":"矩阵规律","_id":"cm6xqvquw000xa4wm9t57fklq"},{"name":"前缀和","_id":"cm6xqvquw000za4wmhu5w89w2"},{"name":"递归","_id":"cm6xqvqux0013a4wmcgge70ya"},{"name":"链表","_id":"cm6xqvqux0018a4wm77ew341c"},{"name":"哈希表","_id":"cm6xqvqvd001fa4wma1xb3r1h"},{"name":"查找","_id":"cm6xqvqvg001la4wm8n11bli0"},{"name":"set","_id":"cm6xqvqvi001ta4wmae95abfb"},{"name":"map","_id":"cm6xqvqvj0020a4wmcxck8unt"},{"name":"字符串","_id":"cm6xqvqvl002ha4wmbgdd9iax"},{"name":"KMP","_id":"cm6xqvqvm002ma4wmadmw4xow"},{"name":"reverse","_id":"cm6xqvqvn002ra4wm01d85z0z"},{"name":"栈","_id":"cm6xqvqvn002ua4wm7cqk578j"},{"name":"队列","_id":"cm6xqvqvo002ya4wm0xbmac27"},{"name":"双端队列","_id":"cm6xqvqvo0031a4wmgibedtcn"},{"name":"堆","_id":"cm6xqvqvo0033a4wm1a3b2fjr"},{"name":"queue","_id":"cm6xqvqvp0034a4wm5of00m6f"},{"name":"stack","_id":"cm6xqvqvp0035a4wmh3os3pdl"},{"name":"deque","_id":"cm6xqvqvp0036a4wm8cpr3qb0"},{"name":"STL","_id":"cm6xqvqvp0037a4wm67984ie5"}]}}